// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rpc.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Rpcpb {
  public static partial class ApiService
  {
    static readonly string __ServiceName = "rpcpb.ApiService";

    static readonly grpc::Marshaller<global::Rpcpb.EmptyRequest> __Marshaller_rpcpb_EmptyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rpcpb.EmptyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rpcpb.NodeInfoResponse> __Marshaller_rpcpb_NodeInfoResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rpcpb.NodeInfoResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rpcpb.ChainInfoResponse> __Marshaller_rpcpb_ChainInfoResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rpcpb.ChainInfoResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rpcpb.RAMInfoResponse> __Marshaller_rpcpb_RAMInfoResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rpcpb.RAMInfoResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rpcpb.TxHashRequest> __Marshaller_rpcpb_TxHashRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rpcpb.TxHashRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rpcpb.TransactionResponse> __Marshaller_rpcpb_TransactionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rpcpb.TransactionResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rpcpb.TxReceipt> __Marshaller_rpcpb_TxReceipt = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rpcpb.TxReceipt.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rpcpb.GetBlockByHashRequest> __Marshaller_rpcpb_GetBlockByHashRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rpcpb.GetBlockByHashRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rpcpb.BlockResponse> __Marshaller_rpcpb_BlockResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rpcpb.BlockResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rpcpb.GetBlockByNumberRequest> __Marshaller_rpcpb_GetBlockByNumberRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rpcpb.GetBlockByNumberRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rpcpb.GetAccountRequest> __Marshaller_rpcpb_GetAccountRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rpcpb.GetAccountRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rpcpb.Account> __Marshaller_rpcpb_Account = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rpcpb.Account.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rpcpb.GetTokenBalanceRequest> __Marshaller_rpcpb_GetTokenBalanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rpcpb.GetTokenBalanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rpcpb.GetTokenBalanceResponse> __Marshaller_rpcpb_GetTokenBalanceResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rpcpb.GetTokenBalanceResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rpcpb.GetToken721BalanceResponse> __Marshaller_rpcpb_GetToken721BalanceResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rpcpb.GetToken721BalanceResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rpcpb.GetToken721InfoRequest> __Marshaller_rpcpb_GetToken721InfoRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rpcpb.GetToken721InfoRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rpcpb.GetToken721MetadataResponse> __Marshaller_rpcpb_GetToken721MetadataResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rpcpb.GetToken721MetadataResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rpcpb.GetToken721OwnerResponse> __Marshaller_rpcpb_GetToken721OwnerResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rpcpb.GetToken721OwnerResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rpcpb.GasRatioResponse> __Marshaller_rpcpb_GasRatioResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rpcpb.GasRatioResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rpcpb.GetProducerVoteInfoRequest> __Marshaller_rpcpb_GetProducerVoteInfoRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rpcpb.GetProducerVoteInfoRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rpcpb.GetProducerVoteInfoResponse> __Marshaller_rpcpb_GetProducerVoteInfoResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rpcpb.GetProducerVoteInfoResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rpcpb.GetContractRequest> __Marshaller_rpcpb_GetContractRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rpcpb.GetContractRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rpcpb.Contract> __Marshaller_rpcpb_Contract = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rpcpb.Contract.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rpcpb.GetContractStorageRequest> __Marshaller_rpcpb_GetContractStorageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rpcpb.GetContractStorageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rpcpb.GetContractStorageResponse> __Marshaller_rpcpb_GetContractStorageResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rpcpb.GetContractStorageResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rpcpb.GetBatchContractStorageRequest> __Marshaller_rpcpb_GetBatchContractStorageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rpcpb.GetBatchContractStorageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rpcpb.GetBatchContractStorageResponse> __Marshaller_rpcpb_GetBatchContractStorageResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rpcpb.GetBatchContractStorageResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rpcpb.GetContractStorageFieldsRequest> __Marshaller_rpcpb_GetContractStorageFieldsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rpcpb.GetContractStorageFieldsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rpcpb.GetContractStorageFieldsResponse> __Marshaller_rpcpb_GetContractStorageFieldsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rpcpb.GetContractStorageFieldsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rpcpb.TransactionRequest> __Marshaller_rpcpb_TransactionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rpcpb.TransactionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rpcpb.SendTransactionResponse> __Marshaller_rpcpb_SendTransactionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rpcpb.SendTransactionResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rpcpb.SubscribeRequest> __Marshaller_rpcpb_SubscribeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rpcpb.SubscribeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rpcpb.SubscribeResponse> __Marshaller_rpcpb_SubscribeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rpcpb.SubscribeResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rpcpb.VoterBonus> __Marshaller_rpcpb_VoterBonus = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rpcpb.VoterBonus.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rpcpb.CandidateBonus> __Marshaller_rpcpb_CandidateBonus = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rpcpb.CandidateBonus.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rpcpb.GetTokenInfoRequest> __Marshaller_rpcpb_GetTokenInfoRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rpcpb.GetTokenInfoRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rpcpb.TokenInfo> __Marshaller_rpcpb_TokenInfo = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rpcpb.TokenInfo.Parser.ParseFrom);

    static readonly grpc::Method<global::Rpcpb.EmptyRequest, global::Rpcpb.NodeInfoResponse> __Method_GetNodeInfo = new grpc::Method<global::Rpcpb.EmptyRequest, global::Rpcpb.NodeInfoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNodeInfo",
        __Marshaller_rpcpb_EmptyRequest,
        __Marshaller_rpcpb_NodeInfoResponse);

    static readonly grpc::Method<global::Rpcpb.EmptyRequest, global::Rpcpb.ChainInfoResponse> __Method_GetChainInfo = new grpc::Method<global::Rpcpb.EmptyRequest, global::Rpcpb.ChainInfoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetChainInfo",
        __Marshaller_rpcpb_EmptyRequest,
        __Marshaller_rpcpb_ChainInfoResponse);

    static readonly grpc::Method<global::Rpcpb.EmptyRequest, global::Rpcpb.RAMInfoResponse> __Method_GetRAMInfo = new grpc::Method<global::Rpcpb.EmptyRequest, global::Rpcpb.RAMInfoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRAMInfo",
        __Marshaller_rpcpb_EmptyRequest,
        __Marshaller_rpcpb_RAMInfoResponse);

    static readonly grpc::Method<global::Rpcpb.TxHashRequest, global::Rpcpb.TransactionResponse> __Method_GetTxByHash = new grpc::Method<global::Rpcpb.TxHashRequest, global::Rpcpb.TransactionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTxByHash",
        __Marshaller_rpcpb_TxHashRequest,
        __Marshaller_rpcpb_TransactionResponse);

    static readonly grpc::Method<global::Rpcpb.TxHashRequest, global::Rpcpb.TxReceipt> __Method_GetTxReceiptByTxHash = new grpc::Method<global::Rpcpb.TxHashRequest, global::Rpcpb.TxReceipt>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTxReceiptByTxHash",
        __Marshaller_rpcpb_TxHashRequest,
        __Marshaller_rpcpb_TxReceipt);

    static readonly grpc::Method<global::Rpcpb.GetBlockByHashRequest, global::Rpcpb.BlockResponse> __Method_GetBlockByHash = new grpc::Method<global::Rpcpb.GetBlockByHashRequest, global::Rpcpb.BlockResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBlockByHash",
        __Marshaller_rpcpb_GetBlockByHashRequest,
        __Marshaller_rpcpb_BlockResponse);

    static readonly grpc::Method<global::Rpcpb.GetBlockByNumberRequest, global::Rpcpb.BlockResponse> __Method_GetBlockByNumber = new grpc::Method<global::Rpcpb.GetBlockByNumberRequest, global::Rpcpb.BlockResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBlockByNumber",
        __Marshaller_rpcpb_GetBlockByNumberRequest,
        __Marshaller_rpcpb_BlockResponse);

    static readonly grpc::Method<global::Rpcpb.GetAccountRequest, global::Rpcpb.Account> __Method_GetAccount = new grpc::Method<global::Rpcpb.GetAccountRequest, global::Rpcpb.Account>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAccount",
        __Marshaller_rpcpb_GetAccountRequest,
        __Marshaller_rpcpb_Account);

    static readonly grpc::Method<global::Rpcpb.GetTokenBalanceRequest, global::Rpcpb.GetTokenBalanceResponse> __Method_GetTokenBalance = new grpc::Method<global::Rpcpb.GetTokenBalanceRequest, global::Rpcpb.GetTokenBalanceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTokenBalance",
        __Marshaller_rpcpb_GetTokenBalanceRequest,
        __Marshaller_rpcpb_GetTokenBalanceResponse);

    static readonly grpc::Method<global::Rpcpb.GetTokenBalanceRequest, global::Rpcpb.GetToken721BalanceResponse> __Method_GetToken721Balance = new grpc::Method<global::Rpcpb.GetTokenBalanceRequest, global::Rpcpb.GetToken721BalanceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetToken721Balance",
        __Marshaller_rpcpb_GetTokenBalanceRequest,
        __Marshaller_rpcpb_GetToken721BalanceResponse);

    static readonly grpc::Method<global::Rpcpb.GetToken721InfoRequest, global::Rpcpb.GetToken721MetadataResponse> __Method_GetToken721Metadata = new grpc::Method<global::Rpcpb.GetToken721InfoRequest, global::Rpcpb.GetToken721MetadataResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetToken721Metadata",
        __Marshaller_rpcpb_GetToken721InfoRequest,
        __Marshaller_rpcpb_GetToken721MetadataResponse);

    static readonly grpc::Method<global::Rpcpb.GetToken721InfoRequest, global::Rpcpb.GetToken721OwnerResponse> __Method_GetToken721Owner = new grpc::Method<global::Rpcpb.GetToken721InfoRequest, global::Rpcpb.GetToken721OwnerResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetToken721Owner",
        __Marshaller_rpcpb_GetToken721InfoRequest,
        __Marshaller_rpcpb_GetToken721OwnerResponse);

    static readonly grpc::Method<global::Rpcpb.EmptyRequest, global::Rpcpb.GasRatioResponse> __Method_GetGasRatio = new grpc::Method<global::Rpcpb.EmptyRequest, global::Rpcpb.GasRatioResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetGasRatio",
        __Marshaller_rpcpb_EmptyRequest,
        __Marshaller_rpcpb_GasRatioResponse);

    static readonly grpc::Method<global::Rpcpb.GetProducerVoteInfoRequest, global::Rpcpb.GetProducerVoteInfoResponse> __Method_GetProducerVoteInfo = new grpc::Method<global::Rpcpb.GetProducerVoteInfoRequest, global::Rpcpb.GetProducerVoteInfoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetProducerVoteInfo",
        __Marshaller_rpcpb_GetProducerVoteInfoRequest,
        __Marshaller_rpcpb_GetProducerVoteInfoResponse);

    static readonly grpc::Method<global::Rpcpb.GetContractRequest, global::Rpcpb.Contract> __Method_GetContract = new grpc::Method<global::Rpcpb.GetContractRequest, global::Rpcpb.Contract>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetContract",
        __Marshaller_rpcpb_GetContractRequest,
        __Marshaller_rpcpb_Contract);

    static readonly grpc::Method<global::Rpcpb.GetContractStorageRequest, global::Rpcpb.GetContractStorageResponse> __Method_GetContractStorage = new grpc::Method<global::Rpcpb.GetContractStorageRequest, global::Rpcpb.GetContractStorageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetContractStorage",
        __Marshaller_rpcpb_GetContractStorageRequest,
        __Marshaller_rpcpb_GetContractStorageResponse);

    static readonly grpc::Method<global::Rpcpb.GetBatchContractStorageRequest, global::Rpcpb.GetBatchContractStorageResponse> __Method_GetBatchContractStorage = new grpc::Method<global::Rpcpb.GetBatchContractStorageRequest, global::Rpcpb.GetBatchContractStorageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBatchContractStorage",
        __Marshaller_rpcpb_GetBatchContractStorageRequest,
        __Marshaller_rpcpb_GetBatchContractStorageResponse);

    static readonly grpc::Method<global::Rpcpb.GetContractStorageFieldsRequest, global::Rpcpb.GetContractStorageFieldsResponse> __Method_GetContractStorageFields = new grpc::Method<global::Rpcpb.GetContractStorageFieldsRequest, global::Rpcpb.GetContractStorageFieldsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetContractStorageFields",
        __Marshaller_rpcpb_GetContractStorageFieldsRequest,
        __Marshaller_rpcpb_GetContractStorageFieldsResponse);

    static readonly grpc::Method<global::Rpcpb.TransactionRequest, global::Rpcpb.SendTransactionResponse> __Method_SendTransaction = new grpc::Method<global::Rpcpb.TransactionRequest, global::Rpcpb.SendTransactionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendTransaction",
        __Marshaller_rpcpb_TransactionRequest,
        __Marshaller_rpcpb_SendTransactionResponse);

    static readonly grpc::Method<global::Rpcpb.TransactionRequest, global::Rpcpb.TxReceipt> __Method_ExecTransaction = new grpc::Method<global::Rpcpb.TransactionRequest, global::Rpcpb.TxReceipt>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExecTransaction",
        __Marshaller_rpcpb_TransactionRequest,
        __Marshaller_rpcpb_TxReceipt);

    static readonly grpc::Method<global::Rpcpb.SubscribeRequest, global::Rpcpb.SubscribeResponse> __Method_Subscribe = new grpc::Method<global::Rpcpb.SubscribeRequest, global::Rpcpb.SubscribeResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Subscribe",
        __Marshaller_rpcpb_SubscribeRequest,
        __Marshaller_rpcpb_SubscribeResponse);

    static readonly grpc::Method<global::Rpcpb.GetAccountRequest, global::Rpcpb.VoterBonus> __Method_GetVoterBonus = new grpc::Method<global::Rpcpb.GetAccountRequest, global::Rpcpb.VoterBonus>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetVoterBonus",
        __Marshaller_rpcpb_GetAccountRequest,
        __Marshaller_rpcpb_VoterBonus);

    static readonly grpc::Method<global::Rpcpb.GetAccountRequest, global::Rpcpb.CandidateBonus> __Method_GetCandidateBonus = new grpc::Method<global::Rpcpb.GetAccountRequest, global::Rpcpb.CandidateBonus>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCandidateBonus",
        __Marshaller_rpcpb_GetAccountRequest,
        __Marshaller_rpcpb_CandidateBonus);

    static readonly grpc::Method<global::Rpcpb.GetTokenInfoRequest, global::Rpcpb.TokenInfo> __Method_GetTokenInfo = new grpc::Method<global::Rpcpb.GetTokenInfoRequest, global::Rpcpb.TokenInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTokenInfo",
        __Marshaller_rpcpb_GetTokenInfoRequest,
        __Marshaller_rpcpb_TokenInfo);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Rpcpb.RpcReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ApiService</summary>
    [grpc::BindServiceMethod(typeof(ApiService), "BindService")]
    public abstract partial class ApiServiceBase
    {
      /// <summary>
      /// get the node information
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Rpcpb.NodeInfoResponse> GetNodeInfo(global::Rpcpb.EmptyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// get blockchain information
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Rpcpb.ChainInfoResponse> GetChainInfo(global::Rpcpb.EmptyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// get current blockchain ram information
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Rpcpb.RAMInfoResponse> GetRAMInfo(global::Rpcpb.EmptyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// get transaction by hash
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Rpcpb.TransactionResponse> GetTxByHash(global::Rpcpb.TxHashRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// get transaction receipt by transaction hash
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Rpcpb.TxReceipt> GetTxReceiptByTxHash(global::Rpcpb.TxHashRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// get block by hash
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Rpcpb.BlockResponse> GetBlockByHash(global::Rpcpb.GetBlockByHashRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// get block by number
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Rpcpb.BlockResponse> GetBlockByNumber(global::Rpcpb.GetBlockByNumberRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// get account
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Rpcpb.Account> GetAccount(global::Rpcpb.GetAccountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// get token balance
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Rpcpb.GetTokenBalanceResponse> GetTokenBalance(global::Rpcpb.GetTokenBalanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// get token721 balance
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Rpcpb.GetToken721BalanceResponse> GetToken721Balance(global::Rpcpb.GetTokenBalanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// get token721 metadata
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Rpcpb.GetToken721MetadataResponse> GetToken721Metadata(global::Rpcpb.GetToken721InfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// get token721 owner
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Rpcpb.GetToken721OwnerResponse> GetToken721Owner(global::Rpcpb.GetToken721InfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// get gas ratio infomation
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Rpcpb.GasRatioResponse> GetGasRatio(global::Rpcpb.EmptyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// get producer vote infomation
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Rpcpb.GetProducerVoteInfoResponse> GetProducerVoteInfo(global::Rpcpb.GetProducerVoteInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// get contract
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Rpcpb.Contract> GetContract(global::Rpcpb.GetContractRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// get contract storage
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Rpcpb.GetContractStorageResponse> GetContractStorage(global::Rpcpb.GetContractStorageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// get batch contract storage
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Rpcpb.GetBatchContractStorageResponse> GetBatchContractStorage(global::Rpcpb.GetBatchContractStorageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// get contract fields storage
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Rpcpb.GetContractStorageFieldsResponse> GetContractStorageFields(global::Rpcpb.GetContractStorageFieldsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// send transaction
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Rpcpb.SendTransactionResponse> SendTransaction(global::Rpcpb.TransactionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// execute transaction
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Rpcpb.TxReceipt> ExecTransaction(global::Rpcpb.TransactionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// subscribe an event
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task Subscribe(global::Rpcpb.SubscribeRequest request, grpc::IServerStreamWriter<global::Rpcpb.SubscribeResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Rpcpb.VoterBonus> GetVoterBonus(global::Rpcpb.GetAccountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Rpcpb.CandidateBonus> GetCandidateBonus(global::Rpcpb.GetAccountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Rpcpb.TokenInfo> GetTokenInfo(global::Rpcpb.GetTokenInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ApiService</summary>
    public partial class ApiServiceClient : grpc::ClientBase<ApiServiceClient>
    {
      /// <summary>Creates a new client for ApiService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ApiServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ApiService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ApiServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ApiServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ApiServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// get the node information
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Rpcpb.NodeInfoResponse GetNodeInfo(global::Rpcpb.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNodeInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get the node information
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Rpcpb.NodeInfoResponse GetNodeInfo(global::Rpcpb.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNodeInfo, null, options, request);
      }
      /// <summary>
      /// get the node information
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.NodeInfoResponse> GetNodeInfoAsync(global::Rpcpb.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNodeInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get the node information
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.NodeInfoResponse> GetNodeInfoAsync(global::Rpcpb.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNodeInfo, null, options, request);
      }
      /// <summary>
      /// get blockchain information
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Rpcpb.ChainInfoResponse GetChainInfo(global::Rpcpb.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetChainInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get blockchain information
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Rpcpb.ChainInfoResponse GetChainInfo(global::Rpcpb.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetChainInfo, null, options, request);
      }
      /// <summary>
      /// get blockchain information
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.ChainInfoResponse> GetChainInfoAsync(global::Rpcpb.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetChainInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get blockchain information
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.ChainInfoResponse> GetChainInfoAsync(global::Rpcpb.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetChainInfo, null, options, request);
      }
      /// <summary>
      /// get current blockchain ram information
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Rpcpb.RAMInfoResponse GetRAMInfo(global::Rpcpb.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRAMInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get current blockchain ram information
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Rpcpb.RAMInfoResponse GetRAMInfo(global::Rpcpb.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRAMInfo, null, options, request);
      }
      /// <summary>
      /// get current blockchain ram information
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.RAMInfoResponse> GetRAMInfoAsync(global::Rpcpb.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRAMInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get current blockchain ram information
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.RAMInfoResponse> GetRAMInfoAsync(global::Rpcpb.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRAMInfo, null, options, request);
      }
      /// <summary>
      /// get transaction by hash
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Rpcpb.TransactionResponse GetTxByHash(global::Rpcpb.TxHashRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTxByHash(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get transaction by hash
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Rpcpb.TransactionResponse GetTxByHash(global::Rpcpb.TxHashRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTxByHash, null, options, request);
      }
      /// <summary>
      /// get transaction by hash
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.TransactionResponse> GetTxByHashAsync(global::Rpcpb.TxHashRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTxByHashAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get transaction by hash
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.TransactionResponse> GetTxByHashAsync(global::Rpcpb.TxHashRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTxByHash, null, options, request);
      }
      /// <summary>
      /// get transaction receipt by transaction hash
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Rpcpb.TxReceipt GetTxReceiptByTxHash(global::Rpcpb.TxHashRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTxReceiptByTxHash(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get transaction receipt by transaction hash
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Rpcpb.TxReceipt GetTxReceiptByTxHash(global::Rpcpb.TxHashRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTxReceiptByTxHash, null, options, request);
      }
      /// <summary>
      /// get transaction receipt by transaction hash
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.TxReceipt> GetTxReceiptByTxHashAsync(global::Rpcpb.TxHashRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTxReceiptByTxHashAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get transaction receipt by transaction hash
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.TxReceipt> GetTxReceiptByTxHashAsync(global::Rpcpb.TxHashRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTxReceiptByTxHash, null, options, request);
      }
      /// <summary>
      /// get block by hash
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Rpcpb.BlockResponse GetBlockByHash(global::Rpcpb.GetBlockByHashRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByHash(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get block by hash
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Rpcpb.BlockResponse GetBlockByHash(global::Rpcpb.GetBlockByHashRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBlockByHash, null, options, request);
      }
      /// <summary>
      /// get block by hash
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.BlockResponse> GetBlockByHashAsync(global::Rpcpb.GetBlockByHashRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByHashAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get block by hash
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.BlockResponse> GetBlockByHashAsync(global::Rpcpb.GetBlockByHashRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBlockByHash, null, options, request);
      }
      /// <summary>
      /// get block by number
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Rpcpb.BlockResponse GetBlockByNumber(global::Rpcpb.GetBlockByNumberRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByNumber(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get block by number
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Rpcpb.BlockResponse GetBlockByNumber(global::Rpcpb.GetBlockByNumberRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBlockByNumber, null, options, request);
      }
      /// <summary>
      /// get block by number
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.BlockResponse> GetBlockByNumberAsync(global::Rpcpb.GetBlockByNumberRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByNumberAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get block by number
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.BlockResponse> GetBlockByNumberAsync(global::Rpcpb.GetBlockByNumberRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBlockByNumber, null, options, request);
      }
      /// <summary>
      /// get account
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Rpcpb.Account GetAccount(global::Rpcpb.GetAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get account
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Rpcpb.Account GetAccount(global::Rpcpb.GetAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAccount, null, options, request);
      }
      /// <summary>
      /// get account
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.Account> GetAccountAsync(global::Rpcpb.GetAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get account
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.Account> GetAccountAsync(global::Rpcpb.GetAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAccount, null, options, request);
      }
      /// <summary>
      /// get token balance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Rpcpb.GetTokenBalanceResponse GetTokenBalance(global::Rpcpb.GetTokenBalanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTokenBalance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get token balance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Rpcpb.GetTokenBalanceResponse GetTokenBalance(global::Rpcpb.GetTokenBalanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTokenBalance, null, options, request);
      }
      /// <summary>
      /// get token balance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.GetTokenBalanceResponse> GetTokenBalanceAsync(global::Rpcpb.GetTokenBalanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTokenBalanceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get token balance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.GetTokenBalanceResponse> GetTokenBalanceAsync(global::Rpcpb.GetTokenBalanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTokenBalance, null, options, request);
      }
      /// <summary>
      /// get token721 balance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Rpcpb.GetToken721BalanceResponse GetToken721Balance(global::Rpcpb.GetTokenBalanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetToken721Balance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get token721 balance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Rpcpb.GetToken721BalanceResponse GetToken721Balance(global::Rpcpb.GetTokenBalanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetToken721Balance, null, options, request);
      }
      /// <summary>
      /// get token721 balance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.GetToken721BalanceResponse> GetToken721BalanceAsync(global::Rpcpb.GetTokenBalanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetToken721BalanceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get token721 balance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.GetToken721BalanceResponse> GetToken721BalanceAsync(global::Rpcpb.GetTokenBalanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetToken721Balance, null, options, request);
      }
      /// <summary>
      /// get token721 metadata
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Rpcpb.GetToken721MetadataResponse GetToken721Metadata(global::Rpcpb.GetToken721InfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetToken721Metadata(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get token721 metadata
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Rpcpb.GetToken721MetadataResponse GetToken721Metadata(global::Rpcpb.GetToken721InfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetToken721Metadata, null, options, request);
      }
      /// <summary>
      /// get token721 metadata
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.GetToken721MetadataResponse> GetToken721MetadataAsync(global::Rpcpb.GetToken721InfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetToken721MetadataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get token721 metadata
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.GetToken721MetadataResponse> GetToken721MetadataAsync(global::Rpcpb.GetToken721InfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetToken721Metadata, null, options, request);
      }
      /// <summary>
      /// get token721 owner
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Rpcpb.GetToken721OwnerResponse GetToken721Owner(global::Rpcpb.GetToken721InfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetToken721Owner(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get token721 owner
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Rpcpb.GetToken721OwnerResponse GetToken721Owner(global::Rpcpb.GetToken721InfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetToken721Owner, null, options, request);
      }
      /// <summary>
      /// get token721 owner
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.GetToken721OwnerResponse> GetToken721OwnerAsync(global::Rpcpb.GetToken721InfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetToken721OwnerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get token721 owner
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.GetToken721OwnerResponse> GetToken721OwnerAsync(global::Rpcpb.GetToken721InfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetToken721Owner, null, options, request);
      }
      /// <summary>
      /// get gas ratio infomation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Rpcpb.GasRatioResponse GetGasRatio(global::Rpcpb.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGasRatio(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get gas ratio infomation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Rpcpb.GasRatioResponse GetGasRatio(global::Rpcpb.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetGasRatio, null, options, request);
      }
      /// <summary>
      /// get gas ratio infomation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.GasRatioResponse> GetGasRatioAsync(global::Rpcpb.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGasRatioAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get gas ratio infomation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.GasRatioResponse> GetGasRatioAsync(global::Rpcpb.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetGasRatio, null, options, request);
      }
      /// <summary>
      /// get producer vote infomation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Rpcpb.GetProducerVoteInfoResponse GetProducerVoteInfo(global::Rpcpb.GetProducerVoteInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetProducerVoteInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get producer vote infomation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Rpcpb.GetProducerVoteInfoResponse GetProducerVoteInfo(global::Rpcpb.GetProducerVoteInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetProducerVoteInfo, null, options, request);
      }
      /// <summary>
      /// get producer vote infomation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.GetProducerVoteInfoResponse> GetProducerVoteInfoAsync(global::Rpcpb.GetProducerVoteInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetProducerVoteInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get producer vote infomation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.GetProducerVoteInfoResponse> GetProducerVoteInfoAsync(global::Rpcpb.GetProducerVoteInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetProducerVoteInfo, null, options, request);
      }
      /// <summary>
      /// get contract
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Rpcpb.Contract GetContract(global::Rpcpb.GetContractRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetContract(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get contract
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Rpcpb.Contract GetContract(global::Rpcpb.GetContractRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetContract, null, options, request);
      }
      /// <summary>
      /// get contract
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.Contract> GetContractAsync(global::Rpcpb.GetContractRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetContractAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get contract
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.Contract> GetContractAsync(global::Rpcpb.GetContractRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetContract, null, options, request);
      }
      /// <summary>
      /// get contract storage
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Rpcpb.GetContractStorageResponse GetContractStorage(global::Rpcpb.GetContractStorageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetContractStorage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get contract storage
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Rpcpb.GetContractStorageResponse GetContractStorage(global::Rpcpb.GetContractStorageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetContractStorage, null, options, request);
      }
      /// <summary>
      /// get contract storage
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.GetContractStorageResponse> GetContractStorageAsync(global::Rpcpb.GetContractStorageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetContractStorageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get contract storage
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.GetContractStorageResponse> GetContractStorageAsync(global::Rpcpb.GetContractStorageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetContractStorage, null, options, request);
      }
      /// <summary>
      /// get batch contract storage
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Rpcpb.GetBatchContractStorageResponse GetBatchContractStorage(global::Rpcpb.GetBatchContractStorageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBatchContractStorage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get batch contract storage
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Rpcpb.GetBatchContractStorageResponse GetBatchContractStorage(global::Rpcpb.GetBatchContractStorageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBatchContractStorage, null, options, request);
      }
      /// <summary>
      /// get batch contract storage
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.GetBatchContractStorageResponse> GetBatchContractStorageAsync(global::Rpcpb.GetBatchContractStorageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBatchContractStorageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get batch contract storage
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.GetBatchContractStorageResponse> GetBatchContractStorageAsync(global::Rpcpb.GetBatchContractStorageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBatchContractStorage, null, options, request);
      }
      /// <summary>
      /// get contract fields storage
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Rpcpb.GetContractStorageFieldsResponse GetContractStorageFields(global::Rpcpb.GetContractStorageFieldsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetContractStorageFields(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get contract fields storage
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Rpcpb.GetContractStorageFieldsResponse GetContractStorageFields(global::Rpcpb.GetContractStorageFieldsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetContractStorageFields, null, options, request);
      }
      /// <summary>
      /// get contract fields storage
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.GetContractStorageFieldsResponse> GetContractStorageFieldsAsync(global::Rpcpb.GetContractStorageFieldsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetContractStorageFieldsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get contract fields storage
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.GetContractStorageFieldsResponse> GetContractStorageFieldsAsync(global::Rpcpb.GetContractStorageFieldsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetContractStorageFields, null, options, request);
      }
      /// <summary>
      /// send transaction
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Rpcpb.SendTransactionResponse SendTransaction(global::Rpcpb.TransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendTransaction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// send transaction
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Rpcpb.SendTransactionResponse SendTransaction(global::Rpcpb.TransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendTransaction, null, options, request);
      }
      /// <summary>
      /// send transaction
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.SendTransactionResponse> SendTransactionAsync(global::Rpcpb.TransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendTransactionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// send transaction
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.SendTransactionResponse> SendTransactionAsync(global::Rpcpb.TransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendTransaction, null, options, request);
      }
      /// <summary>
      /// execute transaction
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Rpcpb.TxReceipt ExecTransaction(global::Rpcpb.TransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExecTransaction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// execute transaction
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Rpcpb.TxReceipt ExecTransaction(global::Rpcpb.TransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExecTransaction, null, options, request);
      }
      /// <summary>
      /// execute transaction
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.TxReceipt> ExecTransactionAsync(global::Rpcpb.TransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExecTransactionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// execute transaction
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.TxReceipt> ExecTransactionAsync(global::Rpcpb.TransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExecTransaction, null, options, request);
      }
      /// <summary>
      /// subscribe an event
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Rpcpb.SubscribeResponse> Subscribe(global::Rpcpb.SubscribeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Subscribe(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// subscribe an event
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Rpcpb.SubscribeResponse> Subscribe(global::Rpcpb.SubscribeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Subscribe, null, options, request);
      }
      public virtual global::Rpcpb.VoterBonus GetVoterBonus(global::Rpcpb.GetAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVoterBonus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Rpcpb.VoterBonus GetVoterBonus(global::Rpcpb.GetAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetVoterBonus, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.VoterBonus> GetVoterBonusAsync(global::Rpcpb.GetAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVoterBonusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.VoterBonus> GetVoterBonusAsync(global::Rpcpb.GetAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetVoterBonus, null, options, request);
      }
      public virtual global::Rpcpb.CandidateBonus GetCandidateBonus(global::Rpcpb.GetAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCandidateBonus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Rpcpb.CandidateBonus GetCandidateBonus(global::Rpcpb.GetAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCandidateBonus, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.CandidateBonus> GetCandidateBonusAsync(global::Rpcpb.GetAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCandidateBonusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.CandidateBonus> GetCandidateBonusAsync(global::Rpcpb.GetAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCandidateBonus, null, options, request);
      }
      public virtual global::Rpcpb.TokenInfo GetTokenInfo(global::Rpcpb.GetTokenInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTokenInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Rpcpb.TokenInfo GetTokenInfo(global::Rpcpb.GetTokenInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTokenInfo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.TokenInfo> GetTokenInfoAsync(global::Rpcpb.GetTokenInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTokenInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Rpcpb.TokenInfo> GetTokenInfoAsync(global::Rpcpb.GetTokenInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTokenInfo, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ApiServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ApiServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ApiServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetNodeInfo, serviceImpl.GetNodeInfo)
          .AddMethod(__Method_GetChainInfo, serviceImpl.GetChainInfo)
          .AddMethod(__Method_GetRAMInfo, serviceImpl.GetRAMInfo)
          .AddMethod(__Method_GetTxByHash, serviceImpl.GetTxByHash)
          .AddMethod(__Method_GetTxReceiptByTxHash, serviceImpl.GetTxReceiptByTxHash)
          .AddMethod(__Method_GetBlockByHash, serviceImpl.GetBlockByHash)
          .AddMethod(__Method_GetBlockByNumber, serviceImpl.GetBlockByNumber)
          .AddMethod(__Method_GetAccount, serviceImpl.GetAccount)
          .AddMethod(__Method_GetTokenBalance, serviceImpl.GetTokenBalance)
          .AddMethod(__Method_GetToken721Balance, serviceImpl.GetToken721Balance)
          .AddMethod(__Method_GetToken721Metadata, serviceImpl.GetToken721Metadata)
          .AddMethod(__Method_GetToken721Owner, serviceImpl.GetToken721Owner)
          .AddMethod(__Method_GetGasRatio, serviceImpl.GetGasRatio)
          .AddMethod(__Method_GetProducerVoteInfo, serviceImpl.GetProducerVoteInfo)
          .AddMethod(__Method_GetContract, serviceImpl.GetContract)
          .AddMethod(__Method_GetContractStorage, serviceImpl.GetContractStorage)
          .AddMethod(__Method_GetBatchContractStorage, serviceImpl.GetBatchContractStorage)
          .AddMethod(__Method_GetContractStorageFields, serviceImpl.GetContractStorageFields)
          .AddMethod(__Method_SendTransaction, serviceImpl.SendTransaction)
          .AddMethod(__Method_ExecTransaction, serviceImpl.ExecTransaction)
          .AddMethod(__Method_Subscribe, serviceImpl.Subscribe)
          .AddMethod(__Method_GetVoterBonus, serviceImpl.GetVoterBonus)
          .AddMethod(__Method_GetCandidateBonus, serviceImpl.GetCandidateBonus)
          .AddMethod(__Method_GetTokenInfo, serviceImpl.GetTokenInfo).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ApiServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetNodeInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Rpcpb.EmptyRequest, global::Rpcpb.NodeInfoResponse>(serviceImpl.GetNodeInfo));
      serviceBinder.AddMethod(__Method_GetChainInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Rpcpb.EmptyRequest, global::Rpcpb.ChainInfoResponse>(serviceImpl.GetChainInfo));
      serviceBinder.AddMethod(__Method_GetRAMInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Rpcpb.EmptyRequest, global::Rpcpb.RAMInfoResponse>(serviceImpl.GetRAMInfo));
      serviceBinder.AddMethod(__Method_GetTxByHash, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Rpcpb.TxHashRequest, global::Rpcpb.TransactionResponse>(serviceImpl.GetTxByHash));
      serviceBinder.AddMethod(__Method_GetTxReceiptByTxHash, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Rpcpb.TxHashRequest, global::Rpcpb.TxReceipt>(serviceImpl.GetTxReceiptByTxHash));
      serviceBinder.AddMethod(__Method_GetBlockByHash, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Rpcpb.GetBlockByHashRequest, global::Rpcpb.BlockResponse>(serviceImpl.GetBlockByHash));
      serviceBinder.AddMethod(__Method_GetBlockByNumber, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Rpcpb.GetBlockByNumberRequest, global::Rpcpb.BlockResponse>(serviceImpl.GetBlockByNumber));
      serviceBinder.AddMethod(__Method_GetAccount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Rpcpb.GetAccountRequest, global::Rpcpb.Account>(serviceImpl.GetAccount));
      serviceBinder.AddMethod(__Method_GetTokenBalance, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Rpcpb.GetTokenBalanceRequest, global::Rpcpb.GetTokenBalanceResponse>(serviceImpl.GetTokenBalance));
      serviceBinder.AddMethod(__Method_GetToken721Balance, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Rpcpb.GetTokenBalanceRequest, global::Rpcpb.GetToken721BalanceResponse>(serviceImpl.GetToken721Balance));
      serviceBinder.AddMethod(__Method_GetToken721Metadata, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Rpcpb.GetToken721InfoRequest, global::Rpcpb.GetToken721MetadataResponse>(serviceImpl.GetToken721Metadata));
      serviceBinder.AddMethod(__Method_GetToken721Owner, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Rpcpb.GetToken721InfoRequest, global::Rpcpb.GetToken721OwnerResponse>(serviceImpl.GetToken721Owner));
      serviceBinder.AddMethod(__Method_GetGasRatio, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Rpcpb.EmptyRequest, global::Rpcpb.GasRatioResponse>(serviceImpl.GetGasRatio));
      serviceBinder.AddMethod(__Method_GetProducerVoteInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Rpcpb.GetProducerVoteInfoRequest, global::Rpcpb.GetProducerVoteInfoResponse>(serviceImpl.GetProducerVoteInfo));
      serviceBinder.AddMethod(__Method_GetContract, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Rpcpb.GetContractRequest, global::Rpcpb.Contract>(serviceImpl.GetContract));
      serviceBinder.AddMethod(__Method_GetContractStorage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Rpcpb.GetContractStorageRequest, global::Rpcpb.GetContractStorageResponse>(serviceImpl.GetContractStorage));
      serviceBinder.AddMethod(__Method_GetBatchContractStorage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Rpcpb.GetBatchContractStorageRequest, global::Rpcpb.GetBatchContractStorageResponse>(serviceImpl.GetBatchContractStorage));
      serviceBinder.AddMethod(__Method_GetContractStorageFields, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Rpcpb.GetContractStorageFieldsRequest, global::Rpcpb.GetContractStorageFieldsResponse>(serviceImpl.GetContractStorageFields));
      serviceBinder.AddMethod(__Method_SendTransaction, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Rpcpb.TransactionRequest, global::Rpcpb.SendTransactionResponse>(serviceImpl.SendTransaction));
      serviceBinder.AddMethod(__Method_ExecTransaction, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Rpcpb.TransactionRequest, global::Rpcpb.TxReceipt>(serviceImpl.ExecTransaction));
      serviceBinder.AddMethod(__Method_Subscribe, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Rpcpb.SubscribeRequest, global::Rpcpb.SubscribeResponse>(serviceImpl.Subscribe));
      serviceBinder.AddMethod(__Method_GetVoterBonus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Rpcpb.GetAccountRequest, global::Rpcpb.VoterBonus>(serviceImpl.GetVoterBonus));
      serviceBinder.AddMethod(__Method_GetCandidateBonus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Rpcpb.GetAccountRequest, global::Rpcpb.CandidateBonus>(serviceImpl.GetCandidateBonus));
      serviceBinder.AddMethod(__Method_GetTokenInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Rpcpb.GetTokenInfoRequest, global::Rpcpb.TokenInfo>(serviceImpl.GetTokenInfo));
    }

  }
}
#endregion
