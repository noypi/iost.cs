// generated by IOST.DevTools last: 4/1/2019 7:03:21 PM
namespace IOSTSdk.Contract.System
{
     using IOSTSdk;

    /// <summary>
    /// Contract ID: vote_producer.iost
    /// 
    /// The Super Node campaigns for voting.
    /// 
    /// Version: javascript
    /// Language: 1.0.0
    /// Reference: https://developers.iost.io/docs/en/6-reference/SystemContract.html
    /// </summary>
    public static class VoteProducer
    {
        public static readonly string Cid = "vote_producer.iost";

        /// <summary>
        /// Apply for registration to become a super node candidate.
        /// </summary>
        /// <param name="accountName"></param>
        /// <param name="publicKeyBase58Encoding"></param>
        /// <param name="location"></param>
        /// <param name="websiteUrl"></param>
        /// <param name="networkId"></param>
        /// <param name="isProducer"></param>
        public static Transaction VoteProducerApplyRegister(this Transaction tx, string accountName, string publicKeyBase58Encoding, string location, string websiteUrl, string networkId, bool isProducer)
        {
            tx.AddAction(Cid, "applyRegister", accountName, publicKeyBase58Encoding, location, websiteUrl, networkId, isProducer);
            return tx;
        }

        /// <summary>
        /// Apply for cancellation.
        /// </summary>
        /// <param name="accountName"></param>
        public static Transaction VoteProducerApplyUnregister(this Transaction tx, string accountName)
        {
            tx.AddAction(Cid, "applyUnregister", accountName);
            return tx;
        }

        /// <summary>
        /// Cancel the registration. If you are an approved producer node, you need to call ApplyUnregister first, after the audit is passed, you can call this interface.
        /// </summary>
        /// <param name="accountName"></param>
        public static Transaction VoteProducerUnregister(this Transaction tx, string accountName)
        {
            tx.AddAction(Cid, "unregister", accountName);
            return tx;
        }

        /// <summary>
        /// Update registration information.
        /// </summary>
        /// <param name="accountName"></param>
        /// <param name="publicKeyBase58Encoding"></param>
        /// <param name="location"></param>
        /// <param name="websiteUrl"></param>
        /// <param name="networkId"></param>
        public static Transaction VoteProducerUpdateProducer(this Transaction tx, string accountName, string publicKeyBase58Encoding, string location, string websiteUrl, string networkId)
        {
            tx.AddAction(Cid, "updateProducer", accountName, publicKeyBase58Encoding, location, websiteUrl, networkId);
            return tx;
        }

        /// <summary>
        /// Go online, indicating that the node is currently available for service.
        /// </summary>
        /// <param name="accountName"></param>
        public static Transaction VoteProducerLogInProducer(this Transaction tx, string accountName)
        {
            tx.AddAction(Cid, "logInProducer", accountName);
            return tx;
        }

        /// <summary>
        /// Offline means that the node is currently unable to provide services.
        /// </summary>
        /// <param name="accountName"></param>
        public static Transaction VoteProducerLogOutProducer(this Transaction tx, string accountName)
        {
            tx.AddAction(Cid, "logOutProducer", accountName);
            return tx;
        }

        /// <summary>
        /// vote.
        /// </summary>
        /// <param name="voterAccountName"></param>
        /// <param name="candidateAccountName"></param>
        /// <param name="numberOfVotes"></param>
        public static Transaction VoteProducerVote(this Transaction tx, string voterAccountName, string candidateAccountName, string numberOfVotes)
        {
            tx.AddAction(Cid, "vote", voterAccountName, candidateAccountName, numberOfVotes);
            return tx;
        }

        /// <summary>
        /// Cancel the vote.
        /// </summary>
        /// <param name="voterAccountName"></param>
        /// <param name="candidateAccountName"></param>
        /// <param name="numberOfVotes"></param>
        public static Transaction VoteProducerUnvote(this Transaction tx, string voterAccountName, string candidateAccountName, string numberOfVotes)
        {
            tx.AddAction(Cid, "unvote", voterAccountName, candidateAccountName, numberOfVotes);
            return tx;
        }

        /// <summary>
        /// Voters receive bonus awards.
        /// </summary>
        /// <param name="voterAccountName"></param>
        public static Transaction VoteProducerVoterWithdraw(this Transaction tx, string voterAccountName)
        {
            tx.AddAction(Cid, "voterWithdraw", voterAccountName);
            return tx;
        }

        /// <summary>
        /// The contestant receives a bonus award.
        /// </summary>
        /// <param name="candidateAccountName"></param>
        public static Transaction VoteProducerCandidateWithdraw(this Transaction tx, string candidateAccountName)
        {
            tx.AddAction(Cid, "candidateWithdraw", candidateAccountName);
            return tx;
        }

        /// <summary>
        /// Calculate voter's bonus awards.
        /// </summary>
        /// <param name="voterAccountName"></param>
        public static Transaction VoteProducerGetVoterBonus(this Transaction tx, string voterAccountName)
        {
            tx.AddAction(Cid, "getVoterBonus", voterAccountName);
            return tx;
        }

        /// <summary>
        /// Calculate contestant's bonus award.
        /// </summary>
        /// <param name="candidateAccountName"></param>
        public static Transaction VoteProducerGetCandidateBonus(this Transaction tx, string candidateAccountName)
        {
            tx.AddAction(Cid, "getCandidateBonus", candidateAccountName);
            return tx;
        }

        /// <summary>
        /// recharge iost to candidates' bonus pool.
        /// </summary>
        /// <param name="amount"></param>
        /// <param name="payerAccountName"></param>
        public static Transaction VoteProducerTopupCandidateBonus(this Transaction tx, string amount, string payerAccountName)
        {
            tx.AddAction(Cid, "topupCandidateBonus", amount, payerAccountName);
            return tx;
        }

        /// <summary>
        /// recharge iost to voters' bonus pool.
        /// </summary>
        /// <param name="candidateAccountName"></param>
        /// <param name="amount"></param>
        /// <param name="payerAccountName"></param>
        public static Transaction VoteProducerTopupVoterBonus(this Transaction tx, string candidateAccountName, string amount, string payerAccountName)
        {
            tx.AddAction(Cid, "topupVoterBonus", candidateAccountName, amount, payerAccountName);
            return tx;
        }
    }
}
