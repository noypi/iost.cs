// generated by IOST.DevTools last: 3/21/2019 12:22:56 PM
namespace IOST.Contract.System
{
    /// <summary>
    /// Account system and rights management
    /// 
    /// Version: javascript
    /// Language: 1.0.0
    /// Reference: https://developers.iost.io/docs/en/6-reference/SystemContract.html
    /// </summary>
    public partial class Auth : Contract
    {
        private const string Cid = "auth.iost";

        /// <summary>
        /// Create an account
        /// </summary>
        /// <param name="username"></param>
        /// <param name="ownerKey"></param>
        /// <param name="activeKey"></param>
        public static void SignUp(Transaction tx, string username, string ownerKey, string activeKey)
        {
            tx.AddAction(Cid, "signUp", username, ownerKey, activeKey);
        }

        /// <summary>
        /// Add permissions to an account
        /// </summary>
        /// <param name="username"></param>
        /// <param name="permissionName"></param>
        /// <param name="permissionThreshold"></param>
        public static void AddPermission(Transaction tx, string username, string permissionName, double permissionThreshold)
        {
            tx.AddAction(Cid, "addPermission", username, permissionName, permissionThreshold);
        }

        /// <summary>
        /// Delete permission
        /// </summary>
        /// <param name="username"></param>
        /// <param name="permissionName"></param>
        public static void DropPermission(Transaction tx, string username, string permissionName)
        {
            tx.AddAction(Cid, "dropPermission", username, permissionName);
        }

        /// <summary>
        /// Specify permissions for item
        /// </summary>
        /// <param name="username"></param>
        /// <param name="permissions"></param>
        /// <param name="item"></param>
        /// <param name="weight"></param>
        public static void AssignPermission(Transaction tx, string username, string permissions, string item, double weight)
        {
            tx.AddAction(Cid, "assignPermission", username, permissions, item, weight);
        }

        /// <summary>
        /// Revoke permission
        /// </summary>
        /// <param name="username"></param>
        /// <param name="permissions"></param>
        /// <param name="item"></param>
        public static void RevokePermission(Transaction tx, string username, string permissions, string item)
        {
            tx.AddAction(Cid, "revokePermission", username, permissions, item);
        }

        /// <summary>
        /// Add permission group
        /// </summary>
        /// <param name="username"></param>
        /// <param name="groupName"></param>
        public static void AddGroup(Transaction tx, string username, string groupName)
        {
            tx.AddAction(Cid, "addGroup", username, groupName);
        }

        /// <summary>
        /// Delete permission group
        /// </summary>
        /// <param name="username"></param>
        /// <param name="groupName"></param>
        public static void DropGroup(Transaction tx, string username, string groupName)
        {
            tx.AddAction(Cid, "dropGroup", username, groupName);
        }

        /// <summary>
        /// Specify item to the permission group
        /// </summary>
        /// <param name="username"></param>
        /// <param name="groupName"></param>
        /// <param name="item"></param>
        /// <param name="weight"></param>
        public static void AssignGroup(Transaction tx, string username, string groupName, string item, double weight)
        {
            tx.AddAction(Cid, "assignGroup", username, groupName, item, weight);
        }

        /// <summary>
        /// Revoke the item of the permission group
        /// </summary>
        /// <param name="username"></param>
        /// <param name="groupName"></param>
        /// <param name="item"></param>
        public static void RevokeGroup(Transaction tx, string username, string groupName, string item)
        {
            tx.AddAction(Cid, "revokeGroup", username, groupName, item);
        }

        /// <summary>
        /// Add permissions to the group
        /// </summary>
        /// <param name="username"></param>
        /// <param name="permissionName"></param>
        /// <param name="groupName"></param>
        public static void AssignPermissionToGroup(Transaction tx, string username, string permissionName, string groupName)
        {
            tx.AddAction(Cid, "assignPermissionToGroup", username, permissionName, groupName);
        }

        /// <summary>
        /// Delete permissions in a group
        /// </summary>
        /// <param name="username"></param>
        /// <param name="permissionName"></param>
        /// <param name="groupName"></param>
        public static void RevokePermissionInGroup(Transaction tx, string username, string permissionName, string groupName)
        {
            tx.AddAction(Cid, "revokePermissionInGroup", username, permissionName, groupName);
        }
    }
}
