// generated by IOST.DevTools last: 3/25/2019 9:28:18 PM
namespace IOSTSdk.Contract.System
{
     using IOSTSdk;

    /// <summary>
    /// Account system and rights management
    /// 
    /// Version: javascript
    /// Language: 1.0.0
    /// Reference: https://developers.iost.io/docs/en/6-reference/SystemContract.html
    /// </summary>
    public static class Auth
    {
        public const string Cid = "auth.iost";

        /// <summary>
        /// Create an account
        /// </summary>
        /// <param name="username"></param>
        /// <param name="ownerKey"></param>
        /// <param name="activeKey"></param>
        public static Transaction AuthSignUp(this Transaction tx, string username, string ownerKey, string activeKey)
        {
            tx.AddAction(Cid, "signUp", username, ownerKey, activeKey);
            return tx;
        }

        /// <summary>
        /// Add permissions to an account
        /// </summary>
        /// <param name="username"></param>
        /// <param name="permissionName"></param>
        /// <param name="permissionThreshold"></param>
        public static Transaction AuthAddPermission(this Transaction tx, string username, string permissionName, int permissionThreshold)
        {
            tx.AddAction(Cid, "addPermission", username, permissionName, permissionThreshold);
            return tx;
        }

        /// <summary>
        /// Delete permission
        /// </summary>
        /// <param name="username"></param>
        /// <param name="permissionName"></param>
        public static Transaction AuthDropPermission(this Transaction tx, string username, string permissionName)
        {
            tx.AddAction(Cid, "dropPermission", username, permissionName);
            return tx;
        }

        /// <summary>
        /// Specify permissions for item
        /// </summary>
        /// <param name="username"></param>
        /// <param name="permissions"></param>
        /// <param name="item"></param>
        /// <param name="weight"></param>
        public static Transaction AuthAssignPermission(this Transaction tx, string username, string permissions, string item, int weight)
        {
            tx.AddAction(Cid, "assignPermission", username, permissions, item, weight);
            return tx;
        }

        /// <summary>
        /// Revoke permission
        /// </summary>
        /// <param name="username"></param>
        /// <param name="permissions"></param>
        /// <param name="item"></param>
        public static Transaction AuthRevokePermission(this Transaction tx, string username, string permissions, string item)
        {
            tx.AddAction(Cid, "revokePermission", username, permissions, item);
            return tx;
        }

        /// <summary>
        /// Add permission group
        /// </summary>
        /// <param name="username"></param>
        /// <param name="groupName"></param>
        public static Transaction AuthAddGroup(this Transaction tx, string username, string groupName)
        {
            tx.AddAction(Cid, "addGroup", username, groupName);
            return tx;
        }

        /// <summary>
        /// Delete permission group
        /// </summary>
        /// <param name="username"></param>
        /// <param name="groupName"></param>
        public static Transaction AuthDropGroup(this Transaction tx, string username, string groupName)
        {
            tx.AddAction(Cid, "dropGroup", username, groupName);
            return tx;
        }

        /// <summary>
        /// Specify item to the permission group
        /// </summary>
        /// <param name="username"></param>
        /// <param name="groupName"></param>
        /// <param name="item"></param>
        /// <param name="weight"></param>
        public static Transaction AuthAssignGroup(this Transaction tx, string username, string groupName, string item, int weight)
        {
            tx.AddAction(Cid, "assignGroup", username, groupName, item, weight);
            return tx;
        }

        /// <summary>
        /// Revoke the item of the permission group
        /// </summary>
        /// <param name="username"></param>
        /// <param name="groupName"></param>
        /// <param name="item"></param>
        public static Transaction AuthRevokeGroup(this Transaction tx, string username, string groupName, string item)
        {
            tx.AddAction(Cid, "revokeGroup", username, groupName, item);
            return tx;
        }

        /// <summary>
        /// Add permissions to the group
        /// </summary>
        /// <param name="username"></param>
        /// <param name="permissionName"></param>
        /// <param name="groupName"></param>
        public static Transaction AuthAssignPermissionToGroup(this Transaction tx, string username, string permissionName, string groupName)
        {
            tx.AddAction(Cid, "assignPermissionToGroup", username, permissionName, groupName);
            return tx;
        }

        /// <summary>
        /// Delete permissions in a group
        /// </summary>
        /// <param name="username"></param>
        /// <param name="permissionName"></param>
        /// <param name="groupName"></param>
        public static Transaction AuthRevokePermissionInGroup(this Transaction tx, string username, string permissionName, string groupName)
        {
            tx.AddAction(Cid, "revokePermissionInGroup", username, permissionName, groupName);
            return tx;
        }
    }
}
