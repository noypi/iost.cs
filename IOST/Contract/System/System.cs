// generated by IOST.DevTools last: 4/1/2019 7:03:21 PM
namespace IOSTSdk.Contract.System
{
     using IOSTSdk;

    /// <summary>
    /// Contract ID: system.iost
    /// 
    /// Base system contract for issuing and updating contracts and other basic system functions.
    /// 
    /// Version: native
    /// Language: 1.0.0
    /// Reference: https://developers.iost.io/docs/en/6-reference/SystemContract.html
    /// </summary>
    public static class System
    {
        public static readonly string Cid = "system.iost";

        /// <summary>
        /// Deploy smart contracts.
        /// </summary>
        /// <param name="code">Smart Contract Code</param>
        public static Transaction SystemSetCode(this Transaction tx, string code)
        {
            tx.AddAction(Cid, "setCode", code);
            return tx;
        }

        /// <summary>
        /// Upgrade smart contracts.
        /// </summary>
        /// <param name="code">Smart Contract Code</param>
        /// <param name="data">upgrade function parameters</param>
        public static Transaction SystemUpdateCode(this Transaction tx, string code, string data)
        {
            tx.AddAction(Cid, "updateCode", code, data);
            return tx;
        }

        /// <summary>
        /// Cancel a delayed transaction, call this function before the execution of the delayed transaction to cancel the delayed transaction.
        /// </summary>
        /// <param name="txHash">Transaction hash</param>
        public static Transaction SystemCancelDelaytx(this Transaction tx, string txHash)
        {
            tx.AddAction(Cid, "cancelDelaytx", txHash);
            return tx;
        }

        /// <summary>
        /// Check if the transaction has the permission of the account.
        /// </summary>
        /// <param name="acc">account name</param>
        /// <param name="permission">permission name</param>
        public static Transaction SystemRequireAuth(this Transaction tx, string acc, string permission)
        {
            tx.AddAction(Cid, "requireAuth", acc, permission);
            return tx;
        }

        /// <summary>
        /// Generate a transaction receipt, the receipt is stored in the block, and can also be queried through the transaction hash.
        /// </summary>
        /// <param name="data">receipt content</param>
        public static Transaction SystemReceipt(this Transaction tx, string data)
        {
            tx.AddAction(Cid, "receipt", data);
            return tx;
        }
    }
}
