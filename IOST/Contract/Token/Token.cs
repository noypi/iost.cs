// generated by IOST.DevTools last: 3/21/2019 12:22:49 PM
namespace IOST.Contract.Token
{
    /// <summary>
    /// Token contract is used for token creation, distribution, transfer and destruction, can freeze token for some time, and also with support for configuring the full name of tokens, decimal places, transfer attributes
    /// 
    /// Version: native
    /// Language: 1.0.0
    /// Reference: https://developers.iost.io/docs/en/6-reference/TokenContract.html
    /// </summary>
    public partial class Token : Contract
    {
        private const string Cid = "token.iost";

        /// <summary>
        /// Create token.
        /// </summary>
        /// <param name="tokenSym">Token identifier, unique within the contract</param>
        /// <param name="issuer">issuer with issuing token permission</param>
        /// <param name="totalSupply">Total supply, integer</param>
        /// <param name="config">configuration</param>
        public static void Create(Transaction tx, string tokenSym, string issuer, double totalSupply, object config)
        {
            tx.AddAction(Cid, "create", tokenSym, issuer, totalSupply, config);
        }

        /// <summary>
        /// Issue tokens.
        /// </summary>
        /// <param name="tokenSym">Token Identifier</param>
        /// <param name="to">Token receiving account</param>
        /// <param name="amount">amount</param>
        public static void Issue(Transaction tx, string tokenSym, string to, string amount)
        {
            tx.AddAction(Cid, "issue", tokenSym, to, amount);
        }

        /// <summary>
        /// Token transfer.
        /// </summary>
        /// <param name="tokenSym">Token Identifier</param>
        /// <param name="from">Token Transfer Account</param>
        /// <param name="to">Token receiving account</param>
        /// <param name="amount">amount</param>
        /// <param name="memo">Additional Information</param>
        public static void Transfer(Transaction tx, string tokenSym, string from, string to, string amount, string memo)
        {
            tx.AddAction(Cid, "transfer", tokenSym, from, to, amount, memo);
        }

        /// <summary>
        /// Transfer and freeze tokens.
        /// </summary>
        /// <param name="tokenSym">Token Identifier</param>
        /// <param name="from">Token transfer Account</param>
        /// <param name="to">Token receiving account</param>
        /// <param name="amount">amount</param>
        /// <param name="ftime">Unfreeze time, milliseconds of Unix timestamp</param>
        /// <param name="memo">Additional Information</param>
        public static void TransferFreeze(Transaction tx, string tokenSym, string from, string to, string amount, double ftime, string memo)
        {
            tx.AddAction(Cid, "transferFreeze", tokenSym, from, to, amount, ftime, memo);
        }

        /// <summary>
        /// Destroy tokens.
        /// </summary>
        /// <param name="tokenSym">Token Identifier</param>
        /// <param name="from">Token destroy account</param>
        /// <param name="amount">amount</param>
        public static void Destroy(Transaction tx, string tokenSym, string from, string amount)
        {
            tx.AddAction(Cid, "destroy", tokenSym, from, amount);
        }

        /// <summary>
        /// Get the token balance.
        /// </summary>
        /// <param name="tokenSym">Token Identifier</param>
        /// <param name="from">Token account</param>
        public static void BalanceOf(Transaction tx, string tokenSym, string from)
        {
            tx.AddAction(Cid, "balanceOf", tokenSym, from);
        }

        /// <summary>
        /// Get the token circulation, that is, the total amount of tokens that have been issued and have not been destroyed.
        /// </summary>
        /// <param name="tokenSym">Token Identifier</param>
        public static void Supply(Transaction tx, string tokenSym)
        {
            tx.AddAction(Cid, "supply", tokenSym);
        }

        /// <summary>
        /// Get the total circulation of tokens.
        /// </summary>
        /// <param name="tokenSym">Token Identifier</param>
        public static void TotalSupply(Transaction tx, string tokenSym)
        {
            tx.AddAction(Cid, "totalSupply", tokenSym);
        }
    }
}
