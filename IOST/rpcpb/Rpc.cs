// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rpc.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace IOST.Rpcpb {

  /// <summary>Holder for reflection information generated from rpc.proto</summary>
  public static partial class RpcReflection {

    #region Descriptor
    /// <summary>File descriptor for rpc.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RpcReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CglycGMucHJvdG8SBXJwY3BiGhxnb29nbGUvYXBpL2Fubm90YXRpb25zLnBy",
            "b3RvIg4KDEVtcHR5UmVxdWVzdCIkCghQZWVySW5mbxIKCgJpZBgBIAEoCRIM",
            "CgRhZGRyGAIgASgJIlEKC05ldHdvcmtJbmZvEgoKAmlkGAEgASgJEhIKCnBl",
            "ZXJfY291bnQYAiABKAUSIgoJcGVlcl9pbmZvGAMgAygLMg8ucnBjcGIuUGVl",
            "ckluZm8iawoQTm9kZUluZm9SZXNwb25zZRISCgpidWlsZF90aW1lGAEgASgJ",
            "EhAKCGdpdF9oYXNoGAIgASgJEgwKBG1vZGUYAyABKAkSIwoHbmV0d29yaxgE",
            "IAEoCzISLnJwY3BiLk5ldHdvcmtJbmZvIisKC0Ftb3VudExpbWl0Eg0KBXRv",
            "a2VuGAEgASgJEg0KBXZhbHVlGAIgASgBIj0KBkFjdGlvbhIQCghjb250cmFj",
            "dBgBIAEoCRITCgthY3Rpb25fbmFtZRgCIAEoCRIMCgRkYXRhGAMgASgJIvwD",
            "CglUeFJlY2VpcHQSDwoHdHhfaGFzaBgBIAEoCRIRCglnYXNfdXNhZ2UYAiAB",
            "KAESMQoJcmFtX3VzYWdlGAMgAygLMh4ucnBjcGIuVHhSZWNlaXB0LlJhbVVz",
            "YWdlRW50cnkSMAoLc3RhdHVzX2NvZGUYBCABKA4yGy5ycGNwYi5UeFJlY2Vp",
            "cHQuU3RhdHVzQ29kZRIPCgdtZXNzYWdlGAUgASgJEg8KB3JldHVybnMYBiAD",
            "KAkSKgoIcmVjZWlwdHMYByADKAsyGC5ycGNwYi5UeFJlY2VpcHQuUmVjZWlw",
            "dBovCg1SYW1Vc2FnZUVudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEo",
            "AzoCOAEaLQoHUmVjZWlwdBIRCglmdW5jX25hbWUYASABKAkSDwoHY29udGVu",
            "dBgCIAEoCSK3AQoKU3RhdHVzQ29kZRILCgdTVUNDRVNTEAASDwoLR0FTX1JV",
            "Tl9PVVQQARIWChJCQUxBTkNFX05PVF9FTk9VR0gQAhITCg9XUk9OR19QQVJB",
            "TUVURVIQAxIRCg1SVU5USU1FX0VSUk9SEAQSCwoHVElNRU9VVBAFEhMKD1dS",
            "T05HX1RYX0ZPUk1BVBAGEhYKEkRVUExJQ0FURV9TRVRfQ09ERRAHEhEKDVVO",
            "S05PV05fRVJST1IQCCKbAgoLVHJhbnNhY3Rpb24SDAoEaGFzaBgBIAEoCRIM",
            "CgR0aW1lGAIgASgDEhIKCmV4cGlyYXRpb24YAyABKAMSEQoJZ2FzX3JhdGlv",
            "GAQgASgBEhEKCWdhc19saW1pdBgFIAEoARINCgVkZWxheRgGIAEoAxIeCgdh",
            "Y3Rpb25zGAcgAygLMg0ucnBjcGIuQWN0aW9uEg8KB3NpZ25lcnMYCCADKAkS",
            "EQoJcHVibGlzaGVyGAkgASgJEhMKC3JlZmVycmVkX3R4GAogASgJEigKDGFt",
            "b3VudF9saW1pdBgLIAMoCzISLnJwY3BiLkFtb3VudExpbWl0EiQKCnR4X3Jl",
            "Y2VpcHQYDCABKAsyEC5ycGNwYi5UeFJlY2VpcHQipgEKE1RyYW5zYWN0aW9u",
            "UmVzcG9uc2USMQoGc3RhdHVzGAEgASgOMiEucnBjcGIuVHJhbnNhY3Rpb25S",
            "ZXNwb25zZS5TdGF0dXMSJwoLdHJhbnNhY3Rpb24YAiABKAsyEi5ycGNwYi5U",
            "cmFuc2FjdGlvbiIzCgZTdGF0dXMSCwoHUEVORElORBAAEgoKBlBBQ0tFRBAB",
            "EhAKDElSUkVWRVJTSUJMRRACIpcBCglTaWduYXR1cmUSLQoJYWxnb3JpdGht",
            "GAEgASgOMhoucnBjcGIuU2lnbmF0dXJlLkFsZ29yaXRobRIRCglzaWduYXR1",
            "cmUYAiABKAwSEgoKcHVibGljX2tleRgDIAEoDCI0CglBbGdvcml0aG0SCwoH",
            "VU5LTk9XThAAEg0KCVNFQ1AyNTZLMRABEgsKB0VEMjU1MTkQAiKpAgoSVHJh",
            "bnNhY3Rpb25SZXF1ZXN0EgwKBHRpbWUYASABKAMSEgoKZXhwaXJhdGlvbhgC",
            "IAEoAxIRCglnYXNfcmF0aW8YAyABKAESEQoJZ2FzX2xpbWl0GAQgASgBEg0K",
            "BWRlbGF5GAUgASgDEh4KB2FjdGlvbnMYBiADKAsyDS5ycGNwYi5BY3Rpb24S",
            "KAoMYW1vdW50X2xpbWl0GAcgAygLMhIucnBjcGIuQW1vdW50TGltaXQSDwoH",
            "c2lnbmVycxgIIAMoCRIkCgpzaWduYXR1cmVzGAkgAygLMhAucnBjcGIuU2ln",
            "bmF0dXJlEhEKCXB1Ymxpc2hlchgKIAEoCRIoCg5wdWJsaXNoZXJfc2lncxgL",
            "IAMoCzIQLnJwY3BiLlNpZ25hdHVyZSLNAgoFQmxvY2sSDAoEaGFzaBgBIAEo",
            "CRIPCgd2ZXJzaW9uGAIgASgDEhMKC3BhcmVudF9oYXNoGAMgASgJEhYKDnR4",
            "X21lcmtsZV9oYXNoGAQgASgJEh4KFnR4X3JlY2VpcHRfbWVya2xlX2hhc2gY",
            "BSABKAkSDgoGbnVtYmVyGAYgASgDEg8KB3dpdG5lc3MYByABKAkSDAoEdGlt",
            "ZRgIIAEoAxIRCglnYXNfdXNhZ2UYCSABKAESEAoIdHhfY291bnQYCiABKAMS",
            "HwoEaW5mbxgLIAEoCzIRLnJwY3BiLkJsb2NrLkluZm8SKAoMdHJhbnNhY3Rp",
            "b25zGAwgAygLMhIucnBjcGIuVHJhbnNhY3Rpb24aOQoESW5mbxIMCgRtb2Rl",
            "GAEgASgFEg4KBnRocmVhZBgCIAEoBRITCgtiYXRjaF9pbmRleBgDIAMoBSKC",
            "AQoNQmxvY2tSZXNwb25zZRIrCgZzdGF0dXMYASABKA4yGy5ycGNwYi5CbG9j",
            "a1Jlc3BvbnNlLlN0YXR1cxIbCgVibG9jaxgCIAEoCzIMLnJwY3BiLkJsb2Nr",
            "IicKBlN0YXR1cxILCgdQRU5ESU5EEAASEAoMSVJSRVZFUlNJQkxFEAEirQEK",
            "EUNoYWluSW5mb1Jlc3BvbnNlEhAKCG5ldF9uYW1lGAEgASgJEhgKEHByb3Rv",
            "Y29sX3ZlcnNpb24YAiABKAkSEgoKaGVhZF9ibG9jaxgDIAEoAxIXCg9oZWFk",
            "X2Jsb2NrX2hhc2gYBCABKAkSEQoJbGliX2Jsb2NrGAUgASgDEhYKDmxpYl9i",
            "bG9ja19oYXNoGAYgASgJEhQKDHdpdG5lc3NfbGlzdBgHIAMoCSIdCg1UeEhh",
            "c2hSZXF1ZXN0EgwKBGhhc2gYASABKAkiNwoVR2V0QmxvY2tCeUhhc2hSZXF1",
            "ZXN0EgwKBGhhc2gYASABKAkSEAoIY29tcGxldGUYAiABKAgiOwoXR2V0Qmxv",
            "Y2tCeU51bWJlclJlcXVlc3QSDgoGbnVtYmVyGAEgASgDEhAKCGNvbXBsZXRl",
            "GAIgASgIIi0KDUZyb3plbkJhbGFuY2USDgoGYW1vdW50GAEgASgBEgwKBHRp",
            "bWUYAiABKAMilwcKB0FjY291bnQSDAoEbmFtZRgBIAEoCRIPCgdiYWxhbmNl",
            "GAIgASgBEhMKC2NyZWF0ZV90aW1lGAMgASgDEigKCGdhc19pbmZvGAQgASgL",
            "MhYucnBjcGIuQWNjb3VudC5HYXNJbmZvEigKCHJhbV9pbmZvGAUgASgLMhYu",
            "cnBjcGIuQWNjb3VudC5SQU1JbmZvEjQKC3Blcm1pc3Npb25zGAYgAygLMh8u",
            "cnBjcGIuQWNjb3VudC5QZXJtaXNzaW9uc0VudHJ5EioKBmdyb3VwcxgHIAMo",
            "CzIaLnJwY3BiLkFjY291bnQuR3JvdXBzRW50cnkSLQoPZnJvemVuX2JhbGFu",
            "Y2VzGAggAygLMhQucnBjcGIuRnJvemVuQmFsYW5jZRotCgpQbGVkZ2VJbmZv",
            "Eg8KB3BsZWRnZXIYASABKAkSDgoGYW1vdW50GAIgASgBGqYBCgdHYXNJbmZv",
            "EhUKDWN1cnJlbnRfdG90YWwYASABKAESGAoQdHJhbnNmZXJhYmxlX2dhcxgC",
            "IAEoARISCgpwbGVkZ2VfZ2FzGAMgASgBEhYKDmluY3JlYXNlX3NwZWVkGAQg",
            "ASgBEg0KBWxpbWl0GAUgASgBEi8KDHBsZWRnZWRfaW5mbxgGIAMoCzIZLnJw",
            "Y3BiLkFjY291bnQuUGxlZGdlSW5mbxocCgdSQU1JbmZvEhEKCWF2YWlsYWJs",
            "ZRgBIAEoAxpLCgRJdGVtEgoKAmlkGAEgASgJEhMKC2lzX2tleV9wYWlyGAIg",
            "ASgIEg4KBndlaWdodBgDIAEoAxISCgpwZXJtaXNzaW9uGAQgASgJGjkKBUdy",
            "b3VwEgwKBG5hbWUYASABKAkSIgoFaXRlbXMYAiADKAsyEy5ycGNwYi5BY2Nv",
            "dW50Lkl0ZW0aYQoKUGVybWlzc2lvbhIMCgRuYW1lGAEgASgJEg4KBmdyb3Vw",
            "cxgCIAMoCRIiCgVpdGVtcxgDIAMoCzITLnJwY3BiLkFjY291bnQuSXRlbRIR",
            "Cgl0aHJlc2hvbGQYBCABKAMaTQoQUGVybWlzc2lvbnNFbnRyeRILCgNrZXkY",
            "ASABKAkSKAoFdmFsdWUYAiABKAsyGS5ycGNwYi5BY2NvdW50LlBlcm1pc3Np",
            "b246AjgBGkMKC0dyb3Vwc0VudHJ5EgsKA2tleRgBIAEoCRIjCgV2YWx1ZRgC",
            "IAEoCzIULnJwY3BiLkFjY291bnQuR3JvdXA6AjgBIjsKEUdldEFjY291bnRS",
            "ZXF1ZXN0EgwKBG5hbWUYASABKAkSGAoQYnlfbG9uZ2VzdF9jaGFpbhgCIAEo",
            "CCK3AQoIQ29udHJhY3QSCgoCaWQYASABKAkSDAoEY29kZRgCIAEoCRIQCghs",
            "YW5ndWFnZRgDIAEoCRIPCgd2ZXJzaW9uGAQgASgJEiEKBGFiaXMYBSADKAsy",
            "Ey5ycGNwYi5Db250cmFjdC5BQkkaSwoDQUJJEgwKBG5hbWUYASABKAkSDAoE",
            "YXJncxgCIAMoCRIoCgxhbW91bnRfbGltaXQYAyADKAsyEi5ycGNwYi5BbW91",
            "bnRMaW1pdCI6ChJHZXRDb250cmFjdFJlcXVlc3QSCgoCaWQYASABKAkSGAoQ",
            "YnlfbG9uZ2VzdF9jaGFpbhgCIAEoCCJdChlHZXRDb250cmFjdFN0b3JhZ2VS",
            "ZXF1ZXN0EgoKAmlkGAEgASgJEgsKA2tleRgCIAEoCRINCgVmaWVsZBgDIAEo",
            "CRIYChBieV9sb25nZXN0X2NoYWluGAQgASgIIioKGkdldENvbnRyYWN0U3Rv",
            "cmFnZVJlc3BvbnNlEgwKBGRhdGEYASABKAkiJwoXU2VuZFRyYW5zYWN0aW9u",
            "UmVzcG9uc2USDAoEaGFzaBgBIAEoCSJZChdHZXRUb2tlbkJhbGFuY2VSZXNw",
            "b25zZRIPCgdiYWxhbmNlGAEgASgBEi0KD2Zyb3plbl9iYWxhbmNlcxgCIAMo",
            "CzIULnJwY3BiLkZyb3plbkJhbGFuY2UiUgoWR2V0VG9rZW5CYWxhbmNlUmVx",
            "dWVzdBIPCgdhY2NvdW50GAEgASgJEg0KBXRva2VuGAIgASgJEhgKEGJ5X2xv",
            "bmdlc3RfY2hhaW4YAyABKAgy9gkKCkFwaVNlcnZpY2USUQoLR2V0Tm9kZUlu",
            "Zm8SEy5ycGNwYi5FbXB0eVJlcXVlc3QaFy5ycGNwYi5Ob2RlSW5mb1Jlc3Bv",
            "bnNlIhSC0+STAg4SDC9nZXROb2RlSW5mbxJUCgxHZXRDaGFpbkluZm8SEy5y",
            "cGNwYi5FbXB0eVJlcXVlc3QaGC5ycGNwYi5DaGFpbkluZm9SZXNwb25zZSIV",
            "gtPkkwIPEg0vZ2V0Q2hhaW5JbmZvElwKC0dldFR4QnlIYXNoEhQucnBjcGIu",
            "VHhIYXNoUmVxdWVzdBoaLnJwY3BiLlRyYW5zYWN0aW9uUmVzcG9uc2UiG4LT",
            "5JMCFRITL2dldFR4QnlIYXNoL3toYXNofRJkChRHZXRUeFJlY2VpcHRCeVR4",
            "SGFzaBIULnJwY3BiLlR4SGFzaFJlcXVlc3QaEC5ycGNwYi5UeFJlY2VpcHQi",
            "JILT5JMCHhIcL2dldFR4UmVjZWlwdEJ5VHhIYXNoL3toYXNofRJvCg5HZXRC",
            "bG9ja0J5SGFzaBIcLnJwY3BiLkdldEJsb2NrQnlIYXNoUmVxdWVzdBoULnJw",
            "Y3BiLkJsb2NrUmVzcG9uc2UiKYLT5JMCIxIhL2dldEJsb2NrQnlIYXNoL3to",
            "YXNofS97Y29tcGxldGV9EncKEEdldEJsb2NrQnlOdW1iZXISHi5ycGNwYi5H",
            "ZXRCbG9ja0J5TnVtYmVyUmVxdWVzdBoULnJwY3BiLkJsb2NrUmVzcG9uc2Ui",
            "LYLT5JMCJxIlL2dldEJsb2NrQnlOdW1iZXIve251bWJlcn0ve2NvbXBsZXRl",
            "fRJlCgpHZXRBY2NvdW50EhgucnBjcGIuR2V0QWNjb3VudFJlcXVlc3QaDi5y",
            "cGNwYi5BY2NvdW50Ii2C0+STAicSJS9nZXRBY2NvdW50L3tuYW1lfS97Ynlf",
            "bG9uZ2VzdF9jaGFpbn0SjwEKD0dldFRva2VuQmFsYW5jZRIdLnJwY3BiLkdl",
            "dFRva2VuQmFsYW5jZVJlcXVlc3QaHi5ycGNwYi5HZXRUb2tlbkJhbGFuY2VS",
            "ZXNwb25zZSI9gtPkkwI3EjUvZ2V0VG9rZW5CYWxhbmNlL3thY2NvdW50fS97",
            "dG9rZW59L3tieV9sb25nZXN0X2NoYWlufRJnCgtHZXRDb250cmFjdBIZLnJw",
            "Y3BiLkdldENvbnRyYWN0UmVxdWVzdBoPLnJwY3BiLkNvbnRyYWN0IiyC0+ST",
            "AiYSJC9nZXRDb250cmFjdC97aWR9L3tieV9sb25nZXN0X2NoYWlufRJ5ChJH",
            "ZXRDb250cmFjdFN0b3JhZ2USIC5ycGNwYi5HZXRDb250cmFjdFN0b3JhZ2VS",
            "ZXF1ZXN0GiEucnBjcGIuR2V0Q29udHJhY3RTdG9yYWdlUmVzcG9uc2UiHoLT",
            "5JMCGCITL2dldENvbnRyYWN0U3RvcmFnZToBKhJgCg9TZW5kVHJhbnNhY3Rp",
            "b24SGS5ycGNwYi5UcmFuc2FjdGlvblJlcXVlc3QaHi5ycGNwYi5TZW5kVHJh",
            "bnNhY3Rpb25SZXNwb25zZSISgtPkkwIMIgcvc2VuZFR4OgEqElIKD0V4ZWNU",
            "cmFuc2FjdGlvbhIZLnJwY3BiLlRyYW5zYWN0aW9uUmVxdWVzdBoQLnJwY3Bi",
            "LlR4UmVjZWlwdCISgtPkkwIMIgcvZXhlY1R4OgEqYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::IOST.Rpcpb.EmptyRequest), global::IOST.Rpcpb.EmptyRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOST.Rpcpb.PeerInfo), global::IOST.Rpcpb.PeerInfo.Parser, new[]{ "Id", "Addr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOST.Rpcpb.NetworkInfo), global::IOST.Rpcpb.NetworkInfo.Parser, new[]{ "Id", "PeerCount", "PeerInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOST.Rpcpb.NodeInfoResponse), global::IOST.Rpcpb.NodeInfoResponse.Parser, new[]{ "BuildTime", "GitHash", "Mode", "Network" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOST.Rpcpb.AmountLimit), global::IOST.Rpcpb.AmountLimit.Parser, new[]{ "Token", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOST.Rpcpb.Action), global::IOST.Rpcpb.Action.Parser, new[]{ "Contract", "ActionName", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOST.Rpcpb.TxReceipt), global::IOST.Rpcpb.TxReceipt.Parser, new[]{ "TxHash", "GasUsage", "RamUsage", "StatusCode", "Message", "Returns", "Receipts" }, null, new[]{ typeof(global::IOST.Rpcpb.TxReceipt.Types.StatusCode) }, new pbr::GeneratedClrTypeInfo[] { null, new pbr::GeneratedClrTypeInfo(typeof(global::IOST.Rpcpb.TxReceipt.Types.Receipt), global::IOST.Rpcpb.TxReceipt.Types.Receipt.Parser, new[]{ "FuncName", "Content" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOST.Rpcpb.Transaction), global::IOST.Rpcpb.Transaction.Parser, new[]{ "Hash", "Time", "Expiration", "GasRatio", "GasLimit", "Delay", "Actions", "Signers", "Publisher", "ReferredTx", "AmountLimit", "TxReceipt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOST.Rpcpb.TransactionResponse), global::IOST.Rpcpb.TransactionResponse.Parser, new[]{ "Status", "Transaction" }, null, new[]{ typeof(global::IOST.Rpcpb.TransactionResponse.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOST.Rpcpb.Signature), global::IOST.Rpcpb.Signature.Parser, new[]{ "Algorithm", "Signature_", "PublicKey" }, null, new[]{ typeof(global::IOST.Rpcpb.Signature.Types.Algorithm) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOST.Rpcpb.TransactionRequest), global::IOST.Rpcpb.TransactionRequest.Parser, new[]{ "Time", "Expiration", "GasRatio", "GasLimit", "Delay", "Actions", "AmountLimit", "Signers", "Signatures", "Publisher", "PublisherSigs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOST.Rpcpb.Block), global::IOST.Rpcpb.Block.Parser, new[]{ "Hash", "Version", "ParentHash", "TxMerkleHash", "TxReceiptMerkleHash", "Number", "Witness", "Time", "GasUsage", "TxCount", "Info", "Transactions" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::IOST.Rpcpb.Block.Types.Info), global::IOST.Rpcpb.Block.Types.Info.Parser, new[]{ "Mode", "Thread", "BatchIndex" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOST.Rpcpb.BlockResponse), global::IOST.Rpcpb.BlockResponse.Parser, new[]{ "Status", "Block" }, null, new[]{ typeof(global::IOST.Rpcpb.BlockResponse.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOST.Rpcpb.ChainInfoResponse), global::IOST.Rpcpb.ChainInfoResponse.Parser, new[]{ "NetName", "ProtocolVersion", "HeadBlock", "HeadBlockHash", "LibBlock", "LibBlockHash", "WitnessList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOST.Rpcpb.TxHashRequest), global::IOST.Rpcpb.TxHashRequest.Parser, new[]{ "Hash" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOST.Rpcpb.GetBlockByHashRequest), global::IOST.Rpcpb.GetBlockByHashRequest.Parser, new[]{ "Hash", "Complete" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOST.Rpcpb.GetBlockByNumberRequest), global::IOST.Rpcpb.GetBlockByNumberRequest.Parser, new[]{ "Number", "Complete" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOST.Rpcpb.FrozenBalance), global::IOST.Rpcpb.FrozenBalance.Parser, new[]{ "Amount", "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOST.Rpcpb.Account), global::IOST.Rpcpb.Account.Parser, new[]{ "Name", "Balance", "CreateTime", "GasInfo", "RamInfo", "Permissions", "Groups", "FrozenBalances" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::IOST.Rpcpb.Account.Types.PledgeInfo), global::IOST.Rpcpb.Account.Types.PledgeInfo.Parser, new[]{ "Pledger", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOST.Rpcpb.Account.Types.GasInfo), global::IOST.Rpcpb.Account.Types.GasInfo.Parser, new[]{ "CurrentTotal", "TransferableGas", "PledgeGas", "IncreaseSpeed", "Limit", "PledgedInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOST.Rpcpb.Account.Types.RAMInfo), global::IOST.Rpcpb.Account.Types.RAMInfo.Parser, new[]{ "Available" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOST.Rpcpb.Account.Types.Item), global::IOST.Rpcpb.Account.Types.Item.Parser, new[]{ "Id", "IsKeyPair", "Weight", "Permission" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOST.Rpcpb.Account.Types.Group), global::IOST.Rpcpb.Account.Types.Group.Parser, new[]{ "Name", "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOST.Rpcpb.Account.Types.Permission), global::IOST.Rpcpb.Account.Types.Permission.Parser, new[]{ "Name", "Groups", "Items", "Threshold" }, null, null, null),
            null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOST.Rpcpb.GetAccountRequest), global::IOST.Rpcpb.GetAccountRequest.Parser, new[]{ "Name", "ByLongestChain" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOST.Rpcpb.Contract), global::IOST.Rpcpb.Contract.Parser, new[]{ "Id", "Code", "Language", "Version", "Abis" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::IOST.Rpcpb.Contract.Types.ABI), global::IOST.Rpcpb.Contract.Types.ABI.Parser, new[]{ "Name", "Args", "AmountLimit" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOST.Rpcpb.GetContractRequest), global::IOST.Rpcpb.GetContractRequest.Parser, new[]{ "Id", "ByLongestChain" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOST.Rpcpb.GetContractStorageRequest), global::IOST.Rpcpb.GetContractStorageRequest.Parser, new[]{ "Id", "Key", "Field", "ByLongestChain" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOST.Rpcpb.GetContractStorageResponse), global::IOST.Rpcpb.GetContractStorageResponse.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOST.Rpcpb.SendTransactionResponse), global::IOST.Rpcpb.SendTransactionResponse.Parser, new[]{ "Hash" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOST.Rpcpb.GetTokenBalanceResponse), global::IOST.Rpcpb.GetTokenBalanceResponse.Parser, new[]{ "Balance", "FrozenBalances" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOST.Rpcpb.GetTokenBalanceRequest), global::IOST.Rpcpb.GetTokenBalanceRequest.Parser, new[]{ "Account", "Token", "ByLongestChain" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// The message defines an empty request.
  /// </summary>
  public sealed partial class EmptyRequest : pb::IMessage<EmptyRequest> {
    private static readonly pb::MessageParser<EmptyRequest> _parser = new pb::MessageParser<EmptyRequest>(() => new EmptyRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EmptyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOST.Rpcpb.RpcReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyRequest(EmptyRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyRequest Clone() {
      return new EmptyRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EmptyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EmptyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EmptyRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// The message defines peer information.
  /// </summary>
  public sealed partial class PeerInfo : pb::IMessage<PeerInfo> {
    private static readonly pb::MessageParser<PeerInfo> _parser = new pb::MessageParser<PeerInfo>(() => new PeerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PeerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOST.Rpcpb.RpcReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeerInfo(PeerInfo other) : this() {
      id_ = other.id_;
      addr_ = other.addr_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeerInfo Clone() {
      return new PeerInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// peer ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "addr" field.</summary>
    public const int AddrFieldNumber = 2;
    private string addr_ = "";
    /// <summary>
    /// peer addr
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Addr {
      get { return addr_; }
      set {
        addr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PeerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PeerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Addr != other.Addr) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Addr.Length != 0) hash ^= Addr.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Addr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Addr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Addr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Addr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PeerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Addr.Length != 0) {
        Addr = other.Addr;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Addr = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message defines network connection information.
  /// </summary>
  public sealed partial class NetworkInfo : pb::IMessage<NetworkInfo> {
    private static readonly pb::MessageParser<NetworkInfo> _parser = new pb::MessageParser<NetworkInfo>(() => new NetworkInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetworkInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOST.Rpcpb.RpcReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkInfo(NetworkInfo other) : this() {
      id_ = other.id_;
      peerCount_ = other.peerCount_;
      peerInfo_ = other.peerInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkInfo Clone() {
      return new NetworkInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// local network ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "peer_count" field.</summary>
    public const int PeerCountFieldNumber = 2;
    private int peerCount_;
    /// <summary>
    /// peer connection count
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PeerCount {
      get { return peerCount_; }
      set {
        peerCount_ = value;
      }
    }

    /// <summary>Field number for the "peer_info" field.</summary>
    public const int PeerInfoFieldNumber = 3;
    private static readonly pb::FieldCodec<global::IOST.Rpcpb.PeerInfo> _repeated_peerInfo_codec
        = pb::FieldCodec.ForMessage(26, global::IOST.Rpcpb.PeerInfo.Parser);
    private readonly pbc::RepeatedField<global::IOST.Rpcpb.PeerInfo> peerInfo_ = new pbc::RepeatedField<global::IOST.Rpcpb.PeerInfo>();
    /// <summary>
    /// peers' information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IOST.Rpcpb.PeerInfo> PeerInfo {
      get { return peerInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetworkInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetworkInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (PeerCount != other.PeerCount) return false;
      if(!peerInfo_.Equals(other.peerInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (PeerCount != 0) hash ^= PeerCount.GetHashCode();
      hash ^= peerInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (PeerCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PeerCount);
      }
      peerInfo_.WriteTo(output, _repeated_peerInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (PeerCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PeerCount);
      }
      size += peerInfo_.CalculateSize(_repeated_peerInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetworkInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.PeerCount != 0) {
        PeerCount = other.PeerCount;
      }
      peerInfo_.Add(other.peerInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            PeerCount = input.ReadInt32();
            break;
          }
          case 26: {
            peerInfo_.AddEntriesFrom(input, _repeated_peerInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message containing the node's information.
  /// </summary>
  public sealed partial class NodeInfoResponse : pb::IMessage<NodeInfoResponse> {
    private static readonly pb::MessageParser<NodeInfoResponse> _parser = new pb::MessageParser<NodeInfoResponse>(() => new NodeInfoResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeInfoResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOST.Rpcpb.RpcReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeInfoResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeInfoResponse(NodeInfoResponse other) : this() {
      buildTime_ = other.buildTime_;
      gitHash_ = other.gitHash_;
      mode_ = other.mode_;
      network_ = other.network_ != null ? other.network_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeInfoResponse Clone() {
      return new NodeInfoResponse(this);
    }

    /// <summary>Field number for the "build_time" field.</summary>
    public const int BuildTimeFieldNumber = 1;
    private string buildTime_ = "";
    /// <summary>
    /// build time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BuildTime {
      get { return buildTime_; }
      set {
        buildTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "git_hash" field.</summary>
    public const int GitHashFieldNumber = 2;
    private string gitHash_ = "";
    /// <summary>
    /// git hash
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GitHash {
      get { return gitHash_; }
      set {
        gitHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 3;
    private string mode_ = "";
    /// <summary>
    /// node mode
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mode {
      get { return mode_; }
      set {
        mode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "network" field.</summary>
    public const int NetworkFieldNumber = 4;
    private global::IOST.Rpcpb.NetworkInfo network_;
    /// <summary>
    /// network connection information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IOST.Rpcpb.NetworkInfo Network {
      get { return network_; }
      set {
        network_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeInfoResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeInfoResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BuildTime != other.BuildTime) return false;
      if (GitHash != other.GitHash) return false;
      if (Mode != other.Mode) return false;
      if (!object.Equals(Network, other.Network)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BuildTime.Length != 0) hash ^= BuildTime.GetHashCode();
      if (GitHash.Length != 0) hash ^= GitHash.GetHashCode();
      if (Mode.Length != 0) hash ^= Mode.GetHashCode();
      if (network_ != null) hash ^= Network.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BuildTime.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BuildTime);
      }
      if (GitHash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GitHash);
      }
      if (Mode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Mode);
      }
      if (network_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Network);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BuildTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BuildTime);
      }
      if (GitHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GitHash);
      }
      if (Mode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mode);
      }
      if (network_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Network);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeInfoResponse other) {
      if (other == null) {
        return;
      }
      if (other.BuildTime.Length != 0) {
        BuildTime = other.BuildTime;
      }
      if (other.GitHash.Length != 0) {
        GitHash = other.GitHash;
      }
      if (other.Mode.Length != 0) {
        Mode = other.Mode;
      }
      if (other.network_ != null) {
        if (network_ == null) {
          Network = new global::IOST.Rpcpb.NetworkInfo();
        }
        Network.MergeFrom(other.Network);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BuildTime = input.ReadString();
            break;
          }
          case 18: {
            GitHash = input.ReadString();
            break;
          }
          case 26: {
            Mode = input.ReadString();
            break;
          }
          case 34: {
            if (network_ == null) {
              Network = new global::IOST.Rpcpb.NetworkInfo();
            }
            input.ReadMessage(Network);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message defines transaction amount limit struct.
  /// </summary>
  public sealed partial class AmountLimit : pb::IMessage<AmountLimit> {
    private static readonly pb::MessageParser<AmountLimit> _parser = new pb::MessageParser<AmountLimit>(() => new AmountLimit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AmountLimit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOST.Rpcpb.RpcReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AmountLimit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AmountLimit(AmountLimit other) : this() {
      token_ = other.token_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AmountLimit Clone() {
      return new AmountLimit(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    /// <summary>
    /// token name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private double value_;
    /// <summary>
    /// limit value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AmountLimit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AmountLimit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Value, other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (Value != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Value);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (Value != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (Value != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AmountLimit other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.Value != 0D) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 17: {
            Value = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message defines transaction action struct.
  /// </summary>
  public sealed partial class Action : pb::IMessage<Action> {
    private static readonly pb::MessageParser<Action> _parser = new pb::MessageParser<Action>(() => new Action());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Action> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOST.Rpcpb.RpcReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action(Action other) : this() {
      contract_ = other.contract_;
      actionName_ = other.actionName_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action Clone() {
      return new Action(this);
    }

    /// <summary>Field number for the "contract" field.</summary>
    public const int ContractFieldNumber = 1;
    private string contract_ = "";
    /// <summary>
    /// contract name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Contract {
      get { return contract_; }
      set {
        contract_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "action_name" field.</summary>
    public const int ActionNameFieldNumber = 2;
    private string actionName_ = "";
    /// <summary>
    /// action name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActionName {
      get { return actionName_; }
      set {
        actionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private string data_ = "";
    /// <summary>
    /// data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Action);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Action other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Contract != other.Contract) return false;
      if (ActionName != other.ActionName) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Contract.Length != 0) hash ^= Contract.GetHashCode();
      if (ActionName.Length != 0) hash ^= ActionName.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Contract.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Contract);
      }
      if (ActionName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ActionName);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Contract.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Contract);
      }
      if (ActionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActionName);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Action other) {
      if (other == null) {
        return;
      }
      if (other.Contract.Length != 0) {
        Contract = other.Contract;
      }
      if (other.ActionName.Length != 0) {
        ActionName = other.ActionName;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Contract = input.ReadString();
            break;
          }
          case 18: {
            ActionName = input.ReadString();
            break;
          }
          case 26: {
            Data = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message defines the transaction receipt struct.
  /// </summary>
  public sealed partial class TxReceipt : pb::IMessage<TxReceipt> {
    private static readonly pb::MessageParser<TxReceipt> _parser = new pb::MessageParser<TxReceipt>(() => new TxReceipt());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TxReceipt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOST.Rpcpb.RpcReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TxReceipt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TxReceipt(TxReceipt other) : this() {
      txHash_ = other.txHash_;
      gasUsage_ = other.gasUsage_;
      ramUsage_ = other.ramUsage_.Clone();
      statusCode_ = other.statusCode_;
      message_ = other.message_;
      returns_ = other.returns_.Clone();
      receipts_ = other.receipts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TxReceipt Clone() {
      return new TxReceipt(this);
    }

    /// <summary>Field number for the "tx_hash" field.</summary>
    public const int TxHashFieldNumber = 1;
    private string txHash_ = "";
    /// <summary>
    /// transaction hash
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TxHash {
      get { return txHash_; }
      set {
        txHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gas_usage" field.</summary>
    public const int GasUsageFieldNumber = 2;
    private double gasUsage_;
    /// <summary>
    /// gas usage
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GasUsage {
      get { return gasUsage_; }
      set {
        gasUsage_ = value;
      }
    }

    /// <summary>Field number for the "ram_usage" field.</summary>
    public const int RamUsageFieldNumber = 3;
    private static readonly pbc::MapField<string, long>.Codec _map_ramUsage_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForInt64(16), 26);
    private readonly pbc::MapField<string, long> ramUsage_ = new pbc::MapField<string, long>();
    /// <summary>
    /// ram usage
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> RamUsage {
      get { return ramUsage_; }
    }

    /// <summary>Field number for the "status_code" field.</summary>
    public const int StatusCodeFieldNumber = 4;
    private global::IOST.Rpcpb.TxReceipt.Types.StatusCode statusCode_ = 0;
    /// <summary>
    /// status code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IOST.Rpcpb.TxReceipt.Types.StatusCode StatusCode {
      get { return statusCode_; }
      set {
        statusCode_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 5;
    private string message_ = "";
    /// <summary>
    /// message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "returns" field.</summary>
    public const int ReturnsFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_returns_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> returns_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// transaction returns
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Returns {
      get { return returns_; }
    }

    /// <summary>Field number for the "receipts" field.</summary>
    public const int ReceiptsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::IOST.Rpcpb.TxReceipt.Types.Receipt> _repeated_receipts_codec
        = pb::FieldCodec.ForMessage(58, global::IOST.Rpcpb.TxReceipt.Types.Receipt.Parser);
    private readonly pbc::RepeatedField<global::IOST.Rpcpb.TxReceipt.Types.Receipt> receipts_ = new pbc::RepeatedField<global::IOST.Rpcpb.TxReceipt.Types.Receipt>();
    /// <summary>
    /// transaction receipts
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IOST.Rpcpb.TxReceipt.Types.Receipt> Receipts {
      get { return receipts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TxReceipt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TxReceipt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TxHash != other.TxHash) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GasUsage, other.GasUsage)) return false;
      if (!RamUsage.Equals(other.RamUsage)) return false;
      if (StatusCode != other.StatusCode) return false;
      if (Message != other.Message) return false;
      if(!returns_.Equals(other.returns_)) return false;
      if(!receipts_.Equals(other.receipts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TxHash.Length != 0) hash ^= TxHash.GetHashCode();
      if (GasUsage != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GasUsage);
      hash ^= RamUsage.GetHashCode();
      if (StatusCode != 0) hash ^= StatusCode.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      hash ^= returns_.GetHashCode();
      hash ^= receipts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TxHash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TxHash);
      }
      if (GasUsage != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(GasUsage);
      }
      ramUsage_.WriteTo(output, _map_ramUsage_codec);
      if (StatusCode != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) StatusCode);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Message);
      }
      returns_.WriteTo(output, _repeated_returns_codec);
      receipts_.WriteTo(output, _repeated_receipts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TxHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TxHash);
      }
      if (GasUsage != 0D) {
        size += 1 + 8;
      }
      size += ramUsage_.CalculateSize(_map_ramUsage_codec);
      if (StatusCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StatusCode);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += returns_.CalculateSize(_repeated_returns_codec);
      size += receipts_.CalculateSize(_repeated_receipts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TxReceipt other) {
      if (other == null) {
        return;
      }
      if (other.TxHash.Length != 0) {
        TxHash = other.TxHash;
      }
      if (other.GasUsage != 0D) {
        GasUsage = other.GasUsage;
      }
      ramUsage_.Add(other.ramUsage_);
      if (other.StatusCode != 0) {
        StatusCode = other.StatusCode;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      returns_.Add(other.returns_);
      receipts_.Add(other.receipts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TxHash = input.ReadString();
            break;
          }
          case 17: {
            GasUsage = input.ReadDouble();
            break;
          }
          case 26: {
            ramUsage_.AddEntriesFrom(input, _map_ramUsage_codec);
            break;
          }
          case 32: {
            StatusCode = (global::IOST.Rpcpb.TxReceipt.Types.StatusCode) input.ReadEnum();
            break;
          }
          case 42: {
            Message = input.ReadString();
            break;
          }
          case 50: {
            returns_.AddEntriesFrom(input, _repeated_returns_codec);
            break;
          }
          case 58: {
            receipts_.AddEntriesFrom(input, _repeated_receipts_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TxReceipt message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The enumeration defines transaction receipt status code.
      /// </summary>
      public enum StatusCode {
        /// <summary>
        /// success
        /// </summary>
        [pbr::OriginalName("SUCCESS")] Success = 0,
        /// <summary>
        /// run out of gas
        /// </summary>
        [pbr::OriginalName("GAS_RUN_OUT")] GasRunOut = 1,
        /// <summary>
        /// balance not enough
        /// </summary>
        [pbr::OriginalName("BALANCE_NOT_ENOUGH")] BalanceNotEnough = 2,
        /// <summary>
        /// wrong parameter
        /// </summary>
        [pbr::OriginalName("WRONG_PARAMETER")] WrongParameter = 3,
        /// <summary>
        /// runtime error
        /// </summary>
        [pbr::OriginalName("RUNTIME_ERROR")] RuntimeError = 4,
        /// <summary>
        /// run out of time
        /// </summary>
        [pbr::OriginalName("TIMEOUT")] Timeout = 5,
        /// <summary>
        /// wrong transaction format
        /// </summary>
        [pbr::OriginalName("WRONG_TX_FORMAT")] WrongTxFormat = 6,
        /// <summary>
        /// more than one set code action in a transaction
        /// </summary>
        [pbr::OriginalName("DUPLICATE_SET_CODE")] DuplicateSetCode = 7,
        /// <summary>
        /// unknown error
        /// </summary>
        [pbr::OriginalName("UNKNOWN_ERROR")] UnknownError = 8,
      }

      /// <summary>
      /// The message defines transaction execution receipt.
      /// </summary>
      public sealed partial class Receipt : pb::IMessage<Receipt> {
        private static readonly pb::MessageParser<Receipt> _parser = new pb::MessageParser<Receipt>(() => new Receipt());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Receipt> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::IOST.Rpcpb.TxReceipt.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Receipt() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Receipt(Receipt other) : this() {
          funcName_ = other.funcName_;
          content_ = other.content_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Receipt Clone() {
          return new Receipt(this);
        }

        /// <summary>Field number for the "func_name" field.</summary>
        public const int FuncNameFieldNumber = 1;
        private string funcName_ = "";
        /// <summary>
        /// function name
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FuncName {
          get { return funcName_; }
          set {
            funcName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "content" field.</summary>
        public const int ContentFieldNumber = 2;
        private string content_ = "";
        /// <summary>
        /// content
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Content {
          get { return content_; }
          set {
            content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Receipt);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Receipt other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (FuncName != other.FuncName) return false;
          if (Content != other.Content) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (FuncName.Length != 0) hash ^= FuncName.GetHashCode();
          if (Content.Length != 0) hash ^= Content.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (FuncName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(FuncName);
          }
          if (Content.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Content);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (FuncName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FuncName);
          }
          if (Content.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Receipt other) {
          if (other == null) {
            return;
          }
          if (other.FuncName.Length != 0) {
            FuncName = other.FuncName;
          }
          if (other.Content.Length != 0) {
            Content = other.Content;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                FuncName = input.ReadString();
                break;
              }
              case 18: {
                Content = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// The message defines transaction struct.
  /// </summary>
  public sealed partial class Transaction : pb::IMessage<Transaction> {
    private static readonly pb::MessageParser<Transaction> _parser = new pb::MessageParser<Transaction>(() => new Transaction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Transaction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOST.Rpcpb.RpcReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction(Transaction other) : this() {
      hash_ = other.hash_;
      time_ = other.time_;
      expiration_ = other.expiration_;
      gasRatio_ = other.gasRatio_;
      gasLimit_ = other.gasLimit_;
      delay_ = other.delay_;
      actions_ = other.actions_.Clone();
      signers_ = other.signers_.Clone();
      publisher_ = other.publisher_;
      referredTx_ = other.referredTx_;
      amountLimit_ = other.amountLimit_.Clone();
      txReceipt_ = other.txReceipt_ != null ? other.txReceipt_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction Clone() {
      return new Transaction(this);
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 1;
    private string hash_ = "";
    /// <summary>
    /// transaction hash
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hash {
      get { return hash_; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private long time_;
    /// <summary>
    /// transaction timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "expiration" field.</summary>
    public const int ExpirationFieldNumber = 3;
    private long expiration_;
    /// <summary>
    /// expiration timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Expiration {
      get { return expiration_; }
      set {
        expiration_ = value;
      }
    }

    /// <summary>Field number for the "gas_ratio" field.</summary>
    public const int GasRatioFieldNumber = 4;
    private double gasRatio_;
    /// <summary>
    /// gas gas_ratio
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GasRatio {
      get { return gasRatio_; }
      set {
        gasRatio_ = value;
      }
    }

    /// <summary>Field number for the "gas_limit" field.</summary>
    public const int GasLimitFieldNumber = 5;
    private double gasLimit_;
    /// <summary>
    /// gas limit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GasLimit {
      get { return gasLimit_; }
      set {
        gasLimit_ = value;
      }
    }

    /// <summary>Field number for the "delay" field.</summary>
    public const int DelayFieldNumber = 6;
    private long delay_;
    /// <summary>
    /// delay nanoseconds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Delay {
      get { return delay_; }
      set {
        delay_ = value;
      }
    }

    /// <summary>Field number for the "actions" field.</summary>
    public const int ActionsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::IOST.Rpcpb.Action> _repeated_actions_codec
        = pb::FieldCodec.ForMessage(58, global::IOST.Rpcpb.Action.Parser);
    private readonly pbc::RepeatedField<global::IOST.Rpcpb.Action> actions_ = new pbc::RepeatedField<global::IOST.Rpcpb.Action>();
    /// <summary>
    /// action list
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IOST.Rpcpb.Action> Actions {
      get { return actions_; }
    }

    /// <summary>Field number for the "signers" field.</summary>
    public const int SignersFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_signers_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> signers_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// signer list
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Signers {
      get { return signers_; }
    }

    /// <summary>Field number for the "publisher" field.</summary>
    public const int PublisherFieldNumber = 9;
    private string publisher_ = "";
    /// <summary>
    /// publisher
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Publisher {
      get { return publisher_; }
      set {
        publisher_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "referred_tx" field.</summary>
    public const int ReferredTxFieldNumber = 10;
    private string referredTx_ = "";
    /// <summary>
    /// referred transaction hash
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReferredTx {
      get { return referredTx_; }
      set {
        referredTx_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount_limit" field.</summary>
    public const int AmountLimitFieldNumber = 11;
    private static readonly pb::FieldCodec<global::IOST.Rpcpb.AmountLimit> _repeated_amountLimit_codec
        = pb::FieldCodec.ForMessage(90, global::IOST.Rpcpb.AmountLimit.Parser);
    private readonly pbc::RepeatedField<global::IOST.Rpcpb.AmountLimit> amountLimit_ = new pbc::RepeatedField<global::IOST.Rpcpb.AmountLimit>();
    /// <summary>
    /// amount limit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IOST.Rpcpb.AmountLimit> AmountLimit {
      get { return amountLimit_; }
    }

    /// <summary>Field number for the "tx_receipt" field.</summary>
    public const int TxReceiptFieldNumber = 12;
    private global::IOST.Rpcpb.TxReceipt txReceipt_;
    /// <summary>
    /// transaction receipt
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IOST.Rpcpb.TxReceipt TxReceipt {
      get { return txReceipt_; }
      set {
        txReceipt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Transaction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Transaction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Hash != other.Hash) return false;
      if (Time != other.Time) return false;
      if (Expiration != other.Expiration) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GasRatio, other.GasRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GasLimit, other.GasLimit)) return false;
      if (Delay != other.Delay) return false;
      if(!actions_.Equals(other.actions_)) return false;
      if(!signers_.Equals(other.signers_)) return false;
      if (Publisher != other.Publisher) return false;
      if (ReferredTx != other.ReferredTx) return false;
      if(!amountLimit_.Equals(other.amountLimit_)) return false;
      if (!object.Equals(TxReceipt, other.TxReceipt)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (Expiration != 0L) hash ^= Expiration.GetHashCode();
      if (GasRatio != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GasRatio);
      if (GasLimit != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GasLimit);
      if (Delay != 0L) hash ^= Delay.GetHashCode();
      hash ^= actions_.GetHashCode();
      hash ^= signers_.GetHashCode();
      if (Publisher.Length != 0) hash ^= Publisher.GetHashCode();
      if (ReferredTx.Length != 0) hash ^= ReferredTx.GetHashCode();
      hash ^= amountLimit_.GetHashCode();
      if (txReceipt_ != null) hash ^= TxReceipt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Hash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Hash);
      }
      if (Time != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Time);
      }
      if (Expiration != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Expiration);
      }
      if (GasRatio != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(GasRatio);
      }
      if (GasLimit != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(GasLimit);
      }
      if (Delay != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Delay);
      }
      actions_.WriteTo(output, _repeated_actions_codec);
      signers_.WriteTo(output, _repeated_signers_codec);
      if (Publisher.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Publisher);
      }
      if (ReferredTx.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ReferredTx);
      }
      amountLimit_.WriteTo(output, _repeated_amountLimit_codec);
      if (txReceipt_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(TxReceipt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Hash);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (Expiration != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Expiration);
      }
      if (GasRatio != 0D) {
        size += 1 + 8;
      }
      if (GasLimit != 0D) {
        size += 1 + 8;
      }
      if (Delay != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Delay);
      }
      size += actions_.CalculateSize(_repeated_actions_codec);
      size += signers_.CalculateSize(_repeated_signers_codec);
      if (Publisher.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Publisher);
      }
      if (ReferredTx.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReferredTx);
      }
      size += amountLimit_.CalculateSize(_repeated_amountLimit_codec);
      if (txReceipt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TxReceipt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Transaction other) {
      if (other == null) {
        return;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      if (other.Expiration != 0L) {
        Expiration = other.Expiration;
      }
      if (other.GasRatio != 0D) {
        GasRatio = other.GasRatio;
      }
      if (other.GasLimit != 0D) {
        GasLimit = other.GasLimit;
      }
      if (other.Delay != 0L) {
        Delay = other.Delay;
      }
      actions_.Add(other.actions_);
      signers_.Add(other.signers_);
      if (other.Publisher.Length != 0) {
        Publisher = other.Publisher;
      }
      if (other.ReferredTx.Length != 0) {
        ReferredTx = other.ReferredTx;
      }
      amountLimit_.Add(other.amountLimit_);
      if (other.txReceipt_ != null) {
        if (txReceipt_ == null) {
          TxReceipt = new global::IOST.Rpcpb.TxReceipt();
        }
        TxReceipt.MergeFrom(other.TxReceipt);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Hash = input.ReadString();
            break;
          }
          case 16: {
            Time = input.ReadInt64();
            break;
          }
          case 24: {
            Expiration = input.ReadInt64();
            break;
          }
          case 33: {
            GasRatio = input.ReadDouble();
            break;
          }
          case 41: {
            GasLimit = input.ReadDouble();
            break;
          }
          case 48: {
            Delay = input.ReadInt64();
            break;
          }
          case 58: {
            actions_.AddEntriesFrom(input, _repeated_actions_codec);
            break;
          }
          case 66: {
            signers_.AddEntriesFrom(input, _repeated_signers_codec);
            break;
          }
          case 74: {
            Publisher = input.ReadString();
            break;
          }
          case 82: {
            ReferredTx = input.ReadString();
            break;
          }
          case 90: {
            amountLimit_.AddEntriesFrom(input, _repeated_amountLimit_codec);
            break;
          }
          case 98: {
            if (txReceipt_ == null) {
              TxReceipt = new global::IOST.Rpcpb.TxReceipt();
            }
            input.ReadMessage(TxReceipt);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message defines transaction response.
  /// </summary>
  public sealed partial class TransactionResponse : pb::IMessage<TransactionResponse> {
    private static readonly pb::MessageParser<TransactionResponse> _parser = new pb::MessageParser<TransactionResponse>(() => new TransactionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOST.Rpcpb.RpcReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionResponse(TransactionResponse other) : this() {
      status_ = other.status_;
      transaction_ = other.transaction_ != null ? other.transaction_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionResponse Clone() {
      return new TransactionResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::IOST.Rpcpb.TransactionResponse.Types.Status status_ = 0;
    /// <summary>
    /// transaction status
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IOST.Rpcpb.TransactionResponse.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "transaction" field.</summary>
    public const int TransactionFieldNumber = 2;
    private global::IOST.Rpcpb.Transaction transaction_;
    /// <summary>
    /// transaction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IOST.Rpcpb.Transaction Transaction {
      get { return transaction_; }
      set {
        transaction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(Transaction, other.Transaction)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (transaction_ != null) hash ^= Transaction.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (transaction_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Transaction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (transaction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transaction);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.transaction_ != null) {
        if (transaction_ == null) {
          Transaction = new global::IOST.Rpcpb.Transaction();
        }
        Transaction.MergeFrom(other.Transaction);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = (global::IOST.Rpcpb.TransactionResponse.Types.Status) input.ReadEnum();
            break;
          }
          case 18: {
            if (transaction_ == null) {
              Transaction = new global::IOST.Rpcpb.Transaction();
            }
            input.ReadMessage(Transaction);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TransactionResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The enumeration defines transaction status.
      /// </summary>
      public enum Status {
        /// <summary>
        /// pending in transaction pool
        /// </summary>
        [pbr::OriginalName("PENDIND")] Pendind = 0,
        /// <summary>
        /// packed in a block that has not been confirmed
        /// </summary>
        [pbr::OriginalName("PACKED")] Packed = 1,
        /// <summary>
        /// packed in a block that is irreversible
        /// </summary>
        [pbr::OriginalName("IRREVERSIBLE")] Irreversible = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// The message defines signature struct.
  /// </summary>
  public sealed partial class Signature : pb::IMessage<Signature> {
    private static readonly pb::MessageParser<Signature> _parser = new pb::MessageParser<Signature>(() => new Signature());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Signature> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOST.Rpcpb.RpcReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Signature() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Signature(Signature other) : this() {
      algorithm_ = other.algorithm_;
      signature_ = other.signature_;
      publicKey_ = other.publicKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Signature Clone() {
      return new Signature(this);
    }

    /// <summary>Field number for the "algorithm" field.</summary>
    public const int AlgorithmFieldNumber = 1;
    private global::IOST.Rpcpb.Signature.Types.Algorithm algorithm_ = 0;
    /// <summary>
    /// signature algorithm
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IOST.Rpcpb.Signature.Types.Algorithm Algorithm {
      get { return algorithm_; }
      set {
        algorithm_ = value;
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int Signature_FieldNumber = 2;
    private pb::ByteString signature_ = pb::ByteString.Empty;
    /// <summary>
    /// signature bytes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature_ {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "public_key" field.</summary>
    public const int PublicKeyFieldNumber = 3;
    private pb::ByteString publicKey_ = pb::ByteString.Empty;
    /// <summary>
    /// public key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Signature);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Signature other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Algorithm != other.Algorithm) return false;
      if (Signature_ != other.Signature_) return false;
      if (PublicKey != other.PublicKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Algorithm != 0) hash ^= Algorithm.GetHashCode();
      if (Signature_.Length != 0) hash ^= Signature_.GetHashCode();
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Algorithm != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Algorithm);
      }
      if (Signature_.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Signature_);
      }
      if (PublicKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(PublicKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Algorithm != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Algorithm);
      }
      if (Signature_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature_);
      }
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Signature other) {
      if (other == null) {
        return;
      }
      if (other.Algorithm != 0) {
        Algorithm = other.Algorithm;
      }
      if (other.Signature_.Length != 0) {
        Signature_ = other.Signature_;
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Algorithm = (global::IOST.Rpcpb.Signature.Types.Algorithm) input.ReadEnum();
            break;
          }
          case 18: {
            Signature_ = input.ReadBytes();
            break;
          }
          case 26: {
            PublicKey = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Signature message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The enumeration defines the signature algorithm.
      /// </summary>
      public enum Algorithm {
        /// <summary>
        /// unknown
        /// </summary>
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        /// <summary>
        /// secp256k1
        /// </summary>
        [pbr::OriginalName("SECP256K1")] Secp256K1 = 1,
        /// <summary>
        /// ed25519
        /// </summary>
        [pbr::OriginalName("ED25519")] Ed25519 = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// The message defines the transaction request.
  /// </summary>
  public sealed partial class TransactionRequest : pb::IMessage<TransactionRequest> {
    private static readonly pb::MessageParser<TransactionRequest> _parser = new pb::MessageParser<TransactionRequest>(() => new TransactionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOST.Rpcpb.RpcReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionRequest(TransactionRequest other) : this() {
      time_ = other.time_;
      expiration_ = other.expiration_;
      gasRatio_ = other.gasRatio_;
      gasLimit_ = other.gasLimit_;
      delay_ = other.delay_;
      actions_ = other.actions_.Clone();
      amountLimit_ = other.amountLimit_.Clone();
      signers_ = other.signers_.Clone();
      signatures_ = other.signatures_.Clone();
      publisher_ = other.publisher_;
      publisherSigs_ = other.publisherSigs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionRequest Clone() {
      return new TransactionRequest(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private long time_;
    /// <summary>
    /// transaction timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "expiration" field.</summary>
    public const int ExpirationFieldNumber = 2;
    private long expiration_;
    /// <summary>
    /// expiration timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Expiration {
      get { return expiration_; }
      set {
        expiration_ = value;
      }
    }

    /// <summary>Field number for the "gas_ratio" field.</summary>
    public const int GasRatioFieldNumber = 3;
    private double gasRatio_;
    /// <summary>
    /// gas price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GasRatio {
      get { return gasRatio_; }
      set {
        gasRatio_ = value;
      }
    }

    /// <summary>Field number for the "gas_limit" field.</summary>
    public const int GasLimitFieldNumber = 4;
    private double gasLimit_;
    /// <summary>
    /// gas limit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GasLimit {
      get { return gasLimit_; }
      set {
        gasLimit_ = value;
      }
    }

    /// <summary>Field number for the "delay" field.</summary>
    public const int DelayFieldNumber = 5;
    private long delay_;
    /// <summary>
    /// delay nanoseconds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Delay {
      get { return delay_; }
      set {
        delay_ = value;
      }
    }

    /// <summary>Field number for the "actions" field.</summary>
    public const int ActionsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::IOST.Rpcpb.Action> _repeated_actions_codec
        = pb::FieldCodec.ForMessage(50, global::IOST.Rpcpb.Action.Parser);
    private readonly pbc::RepeatedField<global::IOST.Rpcpb.Action> actions_ = new pbc::RepeatedField<global::IOST.Rpcpb.Action>();
    /// <summary>
    /// action list
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IOST.Rpcpb.Action> Actions {
      get { return actions_; }
    }

    /// <summary>Field number for the "amount_limit" field.</summary>
    public const int AmountLimitFieldNumber = 7;
    private static readonly pb::FieldCodec<global::IOST.Rpcpb.AmountLimit> _repeated_amountLimit_codec
        = pb::FieldCodec.ForMessage(58, global::IOST.Rpcpb.AmountLimit.Parser);
    private readonly pbc::RepeatedField<global::IOST.Rpcpb.AmountLimit> amountLimit_ = new pbc::RepeatedField<global::IOST.Rpcpb.AmountLimit>();
    /// <summary>
    /// amount limit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IOST.Rpcpb.AmountLimit> AmountLimit {
      get { return amountLimit_; }
    }

    /// <summary>Field number for the "signers" field.</summary>
    public const int SignersFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_signers_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> signers_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// signer list
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Signers {
      get { return signers_; }
    }

    /// <summary>Field number for the "signatures" field.</summary>
    public const int SignaturesFieldNumber = 9;
    private static readonly pb::FieldCodec<global::IOST.Rpcpb.Signature> _repeated_signatures_codec
        = pb::FieldCodec.ForMessage(74, global::IOST.Rpcpb.Signature.Parser);
    private readonly pbc::RepeatedField<global::IOST.Rpcpb.Signature> signatures_ = new pbc::RepeatedField<global::IOST.Rpcpb.Signature>();
    /// <summary>
    /// signatures of signers
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IOST.Rpcpb.Signature> Signatures {
      get { return signatures_; }
    }

    /// <summary>Field number for the "publisher" field.</summary>
    public const int PublisherFieldNumber = 10;
    private string publisher_ = "";
    /// <summary>
    /// publisher
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Publisher {
      get { return publisher_; }
      set {
        publisher_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "publisher_sigs" field.</summary>
    public const int PublisherSigsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::IOST.Rpcpb.Signature> _repeated_publisherSigs_codec
        = pb::FieldCodec.ForMessage(90, global::IOST.Rpcpb.Signature.Parser);
    private readonly pbc::RepeatedField<global::IOST.Rpcpb.Signature> publisherSigs_ = new pbc::RepeatedField<global::IOST.Rpcpb.Signature>();
    /// <summary>
    /// signatures of publisher
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IOST.Rpcpb.Signature> PublisherSigs {
      get { return publisherSigs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      if (Expiration != other.Expiration) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GasRatio, other.GasRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GasLimit, other.GasLimit)) return false;
      if (Delay != other.Delay) return false;
      if(!actions_.Equals(other.actions_)) return false;
      if(!amountLimit_.Equals(other.amountLimit_)) return false;
      if(!signers_.Equals(other.signers_)) return false;
      if(!signatures_.Equals(other.signatures_)) return false;
      if (Publisher != other.Publisher) return false;
      if(!publisherSigs_.Equals(other.publisherSigs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (Expiration != 0L) hash ^= Expiration.GetHashCode();
      if (GasRatio != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GasRatio);
      if (GasLimit != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GasLimit);
      if (Delay != 0L) hash ^= Delay.GetHashCode();
      hash ^= actions_.GetHashCode();
      hash ^= amountLimit_.GetHashCode();
      hash ^= signers_.GetHashCode();
      hash ^= signatures_.GetHashCode();
      if (Publisher.Length != 0) hash ^= Publisher.GetHashCode();
      hash ^= publisherSigs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Time);
      }
      if (Expiration != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Expiration);
      }
      if (GasRatio != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(GasRatio);
      }
      if (GasLimit != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(GasLimit);
      }
      if (Delay != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Delay);
      }
      actions_.WriteTo(output, _repeated_actions_codec);
      amountLimit_.WriteTo(output, _repeated_amountLimit_codec);
      signers_.WriteTo(output, _repeated_signers_codec);
      signatures_.WriteTo(output, _repeated_signatures_codec);
      if (Publisher.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Publisher);
      }
      publisherSigs_.WriteTo(output, _repeated_publisherSigs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (Expiration != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Expiration);
      }
      if (GasRatio != 0D) {
        size += 1 + 8;
      }
      if (GasLimit != 0D) {
        size += 1 + 8;
      }
      if (Delay != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Delay);
      }
      size += actions_.CalculateSize(_repeated_actions_codec);
      size += amountLimit_.CalculateSize(_repeated_amountLimit_codec);
      size += signers_.CalculateSize(_repeated_signers_codec);
      size += signatures_.CalculateSize(_repeated_signatures_codec);
      if (Publisher.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Publisher);
      }
      size += publisherSigs_.CalculateSize(_repeated_publisherSigs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionRequest other) {
      if (other == null) {
        return;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      if (other.Expiration != 0L) {
        Expiration = other.Expiration;
      }
      if (other.GasRatio != 0D) {
        GasRatio = other.GasRatio;
      }
      if (other.GasLimit != 0D) {
        GasLimit = other.GasLimit;
      }
      if (other.Delay != 0L) {
        Delay = other.Delay;
      }
      actions_.Add(other.actions_);
      amountLimit_.Add(other.amountLimit_);
      signers_.Add(other.signers_);
      signatures_.Add(other.signatures_);
      if (other.Publisher.Length != 0) {
        Publisher = other.Publisher;
      }
      publisherSigs_.Add(other.publisherSigs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Time = input.ReadInt64();
            break;
          }
          case 16: {
            Expiration = input.ReadInt64();
            break;
          }
          case 25: {
            GasRatio = input.ReadDouble();
            break;
          }
          case 33: {
            GasLimit = input.ReadDouble();
            break;
          }
          case 40: {
            Delay = input.ReadInt64();
            break;
          }
          case 50: {
            actions_.AddEntriesFrom(input, _repeated_actions_codec);
            break;
          }
          case 58: {
            amountLimit_.AddEntriesFrom(input, _repeated_amountLimit_codec);
            break;
          }
          case 66: {
            signers_.AddEntriesFrom(input, _repeated_signers_codec);
            break;
          }
          case 74: {
            signatures_.AddEntriesFrom(input, _repeated_signatures_codec);
            break;
          }
          case 82: {
            Publisher = input.ReadString();
            break;
          }
          case 90: {
            publisherSigs_.AddEntriesFrom(input, _repeated_publisherSigs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message defines the block struct.
  /// </summary>
  public sealed partial class Block : pb::IMessage<Block> {
    private static readonly pb::MessageParser<Block> _parser = new pb::MessageParser<Block>(() => new Block());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Block> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOST.Rpcpb.RpcReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block(Block other) : this() {
      hash_ = other.hash_;
      version_ = other.version_;
      parentHash_ = other.parentHash_;
      txMerkleHash_ = other.txMerkleHash_;
      txReceiptMerkleHash_ = other.txReceiptMerkleHash_;
      number_ = other.number_;
      witness_ = other.witness_;
      time_ = other.time_;
      gasUsage_ = other.gasUsage_;
      txCount_ = other.txCount_;
      info_ = other.info_ != null ? other.info_.Clone() : null;
      transactions_ = other.transactions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block Clone() {
      return new Block(this);
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 1;
    private string hash_ = "";
    /// <summary>
    /// block hash
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hash {
      get { return hash_; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private long version_;
    /// <summary>
    /// block version
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "parent_hash" field.</summary>
    public const int ParentHashFieldNumber = 3;
    private string parentHash_ = "";
    /// <summary>
    /// parent block hash
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParentHash {
      get { return parentHash_; }
      set {
        parentHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tx_merkle_hash" field.</summary>
    public const int TxMerkleHashFieldNumber = 4;
    private string txMerkleHash_ = "";
    /// <summary>
    /// transaction merkle tree root hash
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TxMerkleHash {
      get { return txMerkleHash_; }
      set {
        txMerkleHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tx_receipt_merkle_hash" field.</summary>
    public const int TxReceiptMerkleHashFieldNumber = 5;
    private string txReceiptMerkleHash_ = "";
    /// <summary>
    /// transaction receipt merkle tree root hash
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TxReceiptMerkleHash {
      get { return txReceiptMerkleHash_; }
      set {
        txReceiptMerkleHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 6;
    private long number_;
    /// <summary>
    /// block number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Number {
      get { return number_; }
      set {
        number_ = value;
      }
    }

    /// <summary>Field number for the "witness" field.</summary>
    public const int WitnessFieldNumber = 7;
    private string witness_ = "";
    /// <summary>
    /// block producer witness
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Witness {
      get { return witness_; }
      set {
        witness_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 8;
    private long time_;
    /// <summary>
    /// block timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "gas_usage" field.</summary>
    public const int GasUsageFieldNumber = 9;
    private double gasUsage_;
    /// <summary>
    /// block gas usage
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GasUsage {
      get { return gasUsage_; }
      set {
        gasUsage_ = value;
      }
    }

    /// <summary>Field number for the "tx_count" field.</summary>
    public const int TxCountFieldNumber = 10;
    private long txCount_;
    /// <summary>
    /// transaction count
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TxCount {
      get { return txCount_; }
      set {
        txCount_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 11;
    private global::IOST.Rpcpb.Block.Types.Info info_;
    /// <summary>
    /// extra information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IOST.Rpcpb.Block.Types.Info Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "transactions" field.</summary>
    public const int TransactionsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::IOST.Rpcpb.Transaction> _repeated_transactions_codec
        = pb::FieldCodec.ForMessage(98, global::IOST.Rpcpb.Transaction.Parser);
    private readonly pbc::RepeatedField<global::IOST.Rpcpb.Transaction> transactions_ = new pbc::RepeatedField<global::IOST.Rpcpb.Transaction>();
    /// <summary>
    /// block transactions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IOST.Rpcpb.Transaction> Transactions {
      get { return transactions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Block);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Block other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Hash != other.Hash) return false;
      if (Version != other.Version) return false;
      if (ParentHash != other.ParentHash) return false;
      if (TxMerkleHash != other.TxMerkleHash) return false;
      if (TxReceiptMerkleHash != other.TxReceiptMerkleHash) return false;
      if (Number != other.Number) return false;
      if (Witness != other.Witness) return false;
      if (Time != other.Time) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GasUsage, other.GasUsage)) return false;
      if (TxCount != other.TxCount) return false;
      if (!object.Equals(Info, other.Info)) return false;
      if(!transactions_.Equals(other.transactions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      if (Version != 0L) hash ^= Version.GetHashCode();
      if (ParentHash.Length != 0) hash ^= ParentHash.GetHashCode();
      if (TxMerkleHash.Length != 0) hash ^= TxMerkleHash.GetHashCode();
      if (TxReceiptMerkleHash.Length != 0) hash ^= TxReceiptMerkleHash.GetHashCode();
      if (Number != 0L) hash ^= Number.GetHashCode();
      if (Witness.Length != 0) hash ^= Witness.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (GasUsage != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GasUsage);
      if (TxCount != 0L) hash ^= TxCount.GetHashCode();
      if (info_ != null) hash ^= Info.GetHashCode();
      hash ^= transactions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Hash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Hash);
      }
      if (Version != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Version);
      }
      if (ParentHash.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ParentHash);
      }
      if (TxMerkleHash.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TxMerkleHash);
      }
      if (TxReceiptMerkleHash.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(TxReceiptMerkleHash);
      }
      if (Number != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Number);
      }
      if (Witness.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Witness);
      }
      if (Time != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Time);
      }
      if (GasUsage != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(GasUsage);
      }
      if (TxCount != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(TxCount);
      }
      if (info_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Info);
      }
      transactions_.WriteTo(output, _repeated_transactions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Hash);
      }
      if (Version != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Version);
      }
      if (ParentHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentHash);
      }
      if (TxMerkleHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TxMerkleHash);
      }
      if (TxReceiptMerkleHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TxReceiptMerkleHash);
      }
      if (Number != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Number);
      }
      if (Witness.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Witness);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (GasUsage != 0D) {
        size += 1 + 8;
      }
      if (TxCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TxCount);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      size += transactions_.CalculateSize(_repeated_transactions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Block other) {
      if (other == null) {
        return;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
      if (other.Version != 0L) {
        Version = other.Version;
      }
      if (other.ParentHash.Length != 0) {
        ParentHash = other.ParentHash;
      }
      if (other.TxMerkleHash.Length != 0) {
        TxMerkleHash = other.TxMerkleHash;
      }
      if (other.TxReceiptMerkleHash.Length != 0) {
        TxReceiptMerkleHash = other.TxReceiptMerkleHash;
      }
      if (other.Number != 0L) {
        Number = other.Number;
      }
      if (other.Witness.Length != 0) {
        Witness = other.Witness;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      if (other.GasUsage != 0D) {
        GasUsage = other.GasUsage;
      }
      if (other.TxCount != 0L) {
        TxCount = other.TxCount;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          Info = new global::IOST.Rpcpb.Block.Types.Info();
        }
        Info.MergeFrom(other.Info);
      }
      transactions_.Add(other.transactions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Hash = input.ReadString();
            break;
          }
          case 16: {
            Version = input.ReadInt64();
            break;
          }
          case 26: {
            ParentHash = input.ReadString();
            break;
          }
          case 34: {
            TxMerkleHash = input.ReadString();
            break;
          }
          case 42: {
            TxReceiptMerkleHash = input.ReadString();
            break;
          }
          case 48: {
            Number = input.ReadInt64();
            break;
          }
          case 58: {
            Witness = input.ReadString();
            break;
          }
          case 64: {
            Time = input.ReadInt64();
            break;
          }
          case 73: {
            GasUsage = input.ReadDouble();
            break;
          }
          case 80: {
            TxCount = input.ReadInt64();
            break;
          }
          case 90: {
            if (info_ == null) {
              Info = new global::IOST.Rpcpb.Block.Types.Info();
            }
            input.ReadMessage(Info);
            break;
          }
          case 98: {
            transactions_.AddEntriesFrom(input, _repeated_transactions_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Block message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The message defines block extra information
      /// </summary>
      public sealed partial class Info : pb::IMessage<Info> {
        private static readonly pb::MessageParser<Info> _parser = new pb::MessageParser<Info>(() => new Info());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Info> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::IOST.Rpcpb.Block.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info(Info other) : this() {
          mode_ = other.mode_;
          thread_ = other.thread_;
          batchIndex_ = other.batchIndex_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info Clone() {
          return new Info(this);
        }

        /// <summary>Field number for the "mode" field.</summary>
        public const int ModeFieldNumber = 1;
        private int mode_;
        /// <summary>
        /// pack mode
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Mode {
          get { return mode_; }
          set {
            mode_ = value;
          }
        }

        /// <summary>Field number for the "thread" field.</summary>
        public const int ThreadFieldNumber = 2;
        private int thread_;
        /// <summary>
        /// transaction execution thread number
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Thread {
          get { return thread_; }
          set {
            thread_ = value;
          }
        }

        /// <summary>Field number for the "batch_index" field.</summary>
        public const int BatchIndexFieldNumber = 3;
        private static readonly pb::FieldCodec<int> _repeated_batchIndex_codec
            = pb::FieldCodec.ForInt32(26);
        private readonly pbc::RepeatedField<int> batchIndex_ = new pbc::RepeatedField<int>();
        /// <summary>
        /// transaction index of every batch execution
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> BatchIndex {
          get { return batchIndex_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Info);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Info other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Mode != other.Mode) return false;
          if (Thread != other.Thread) return false;
          if(!batchIndex_.Equals(other.batchIndex_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Mode != 0) hash ^= Mode.GetHashCode();
          if (Thread != 0) hash ^= Thread.GetHashCode();
          hash ^= batchIndex_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Mode != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Mode);
          }
          if (Thread != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Thread);
          }
          batchIndex_.WriteTo(output, _repeated_batchIndex_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Mode != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mode);
          }
          if (Thread != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Thread);
          }
          size += batchIndex_.CalculateSize(_repeated_batchIndex_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Info other) {
          if (other == null) {
            return;
          }
          if (other.Mode != 0) {
            Mode = other.Mode;
          }
          if (other.Thread != 0) {
            Thread = other.Thread;
          }
          batchIndex_.Add(other.batchIndex_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Mode = input.ReadInt32();
                break;
              }
              case 16: {
                Thread = input.ReadInt32();
                break;
              }
              case 26:
              case 24: {
                batchIndex_.AddEntriesFrom(input, _repeated_batchIndex_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class BlockResponse : pb::IMessage<BlockResponse> {
    private static readonly pb::MessageParser<BlockResponse> _parser = new pb::MessageParser<BlockResponse>(() => new BlockResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOST.Rpcpb.RpcReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockResponse(BlockResponse other) : this() {
      status_ = other.status_;
      block_ = other.block_ != null ? other.block_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockResponse Clone() {
      return new BlockResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::IOST.Rpcpb.BlockResponse.Types.Status status_ = 0;
    /// <summary>
    /// transaction status
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IOST.Rpcpb.BlockResponse.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "block" field.</summary>
    public const int BlockFieldNumber = 2;
    private global::IOST.Rpcpb.Block block_;
    /// <summary>
    /// block
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IOST.Rpcpb.Block Block {
      get { return block_; }
      set {
        block_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(Block, other.Block)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (block_ != null) hash ^= Block.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (block_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Block);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (block_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Block);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.block_ != null) {
        if (block_ == null) {
          Block = new global::IOST.Rpcpb.Block();
        }
        Block.MergeFrom(other.Block);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = (global::IOST.Rpcpb.BlockResponse.Types.Status) input.ReadEnum();
            break;
          }
          case 18: {
            if (block_ == null) {
              Block = new global::IOST.Rpcpb.Block();
            }
            input.ReadMessage(Block);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BlockResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The enumeration defines block status.
      /// </summary>
      public enum Status {
        /// <summary>
        /// pending in block cache
        /// </summary>
        [pbr::OriginalName("PENDIND")] Pendind = 0,
        /// <summary>
        /// irreversible
        /// </summary>
        [pbr::OriginalName("IRREVERSIBLE")] Irreversible = 1,
      }

    }
    #endregion

  }

  /// <summary>
  /// The message defines chain information response.
  /// </summary>
  public sealed partial class ChainInfoResponse : pb::IMessage<ChainInfoResponse> {
    private static readonly pb::MessageParser<ChainInfoResponse> _parser = new pb::MessageParser<ChainInfoResponse>(() => new ChainInfoResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChainInfoResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOST.Rpcpb.RpcReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChainInfoResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChainInfoResponse(ChainInfoResponse other) : this() {
      netName_ = other.netName_;
      protocolVersion_ = other.protocolVersion_;
      headBlock_ = other.headBlock_;
      headBlockHash_ = other.headBlockHash_;
      libBlock_ = other.libBlock_;
      libBlockHash_ = other.libBlockHash_;
      witnessList_ = other.witnessList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChainInfoResponse Clone() {
      return new ChainInfoResponse(this);
    }

    /// <summary>Field number for the "net_name" field.</summary>
    public const int NetNameFieldNumber = 1;
    private string netName_ = "";
    /// <summary>
    /// the name of network, such mainnet or testnet
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NetName {
      get { return netName_; }
      set {
        netName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "protocol_version" field.</summary>
    public const int ProtocolVersionFieldNumber = 2;
    private string protocolVersion_ = "";
    /// <summary>
    /// the IOST.Rpcpb protocol version
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProtocolVersion {
      get { return protocolVersion_; }
      set {
        protocolVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "head_block" field.</summary>
    public const int HeadBlockFieldNumber = 3;
    private long headBlock_;
    /// <summary>
    /// head block height
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeadBlock {
      get { return headBlock_; }
      set {
        headBlock_ = value;
      }
    }

    /// <summary>Field number for the "head_block_hash" field.</summary>
    public const int HeadBlockHashFieldNumber = 4;
    private string headBlockHash_ = "";
    /// <summary>
    /// head block hash
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeadBlockHash {
      get { return headBlockHash_; }
      set {
        headBlockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lib_block" field.</summary>
    public const int LibBlockFieldNumber = 5;
    private long libBlock_;
    /// <summary>
    /// last irreversible block number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LibBlock {
      get { return libBlock_; }
      set {
        libBlock_ = value;
      }
    }

    /// <summary>Field number for the "lib_block_hash" field.</summary>
    public const int LibBlockHashFieldNumber = 6;
    private string libBlockHash_ = "";
    /// <summary>
    /// last irreversible block hash
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LibBlockHash {
      get { return libBlockHash_; }
      set {
        libBlockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "witness_list" field.</summary>
    public const int WitnessListFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_witnessList_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> witnessList_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// the current witness list
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> WitnessList {
      get { return witnessList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChainInfoResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChainInfoResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NetName != other.NetName) return false;
      if (ProtocolVersion != other.ProtocolVersion) return false;
      if (HeadBlock != other.HeadBlock) return false;
      if (HeadBlockHash != other.HeadBlockHash) return false;
      if (LibBlock != other.LibBlock) return false;
      if (LibBlockHash != other.LibBlockHash) return false;
      if(!witnessList_.Equals(other.witnessList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NetName.Length != 0) hash ^= NetName.GetHashCode();
      if (ProtocolVersion.Length != 0) hash ^= ProtocolVersion.GetHashCode();
      if (HeadBlock != 0L) hash ^= HeadBlock.GetHashCode();
      if (HeadBlockHash.Length != 0) hash ^= HeadBlockHash.GetHashCode();
      if (LibBlock != 0L) hash ^= LibBlock.GetHashCode();
      if (LibBlockHash.Length != 0) hash ^= LibBlockHash.GetHashCode();
      hash ^= witnessList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NetName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NetName);
      }
      if (ProtocolVersion.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProtocolVersion);
      }
      if (HeadBlock != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(HeadBlock);
      }
      if (HeadBlockHash.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(HeadBlockHash);
      }
      if (LibBlock != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(LibBlock);
      }
      if (LibBlockHash.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(LibBlockHash);
      }
      witnessList_.WriteTo(output, _repeated_witnessList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NetName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NetName);
      }
      if (ProtocolVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProtocolVersion);
      }
      if (HeadBlock != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeadBlock);
      }
      if (HeadBlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadBlockHash);
      }
      if (LibBlock != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LibBlock);
      }
      if (LibBlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LibBlockHash);
      }
      size += witnessList_.CalculateSize(_repeated_witnessList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChainInfoResponse other) {
      if (other == null) {
        return;
      }
      if (other.NetName.Length != 0) {
        NetName = other.NetName;
      }
      if (other.ProtocolVersion.Length != 0) {
        ProtocolVersion = other.ProtocolVersion;
      }
      if (other.HeadBlock != 0L) {
        HeadBlock = other.HeadBlock;
      }
      if (other.HeadBlockHash.Length != 0) {
        HeadBlockHash = other.HeadBlockHash;
      }
      if (other.LibBlock != 0L) {
        LibBlock = other.LibBlock;
      }
      if (other.LibBlockHash.Length != 0) {
        LibBlockHash = other.LibBlockHash;
      }
      witnessList_.Add(other.witnessList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NetName = input.ReadString();
            break;
          }
          case 18: {
            ProtocolVersion = input.ReadString();
            break;
          }
          case 24: {
            HeadBlock = input.ReadInt64();
            break;
          }
          case 34: {
            HeadBlockHash = input.ReadString();
            break;
          }
          case 40: {
            LibBlock = input.ReadInt64();
            break;
          }
          case 50: {
            LibBlockHash = input.ReadString();
            break;
          }
          case 58: {
            witnessList_.AddEntriesFrom(input, _repeated_witnessList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The request message containing the tx's hash.
  /// </summary>
  public sealed partial class TxHashRequest : pb::IMessage<TxHashRequest> {
    private static readonly pb::MessageParser<TxHashRequest> _parser = new pb::MessageParser<TxHashRequest>(() => new TxHashRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TxHashRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOST.Rpcpb.RpcReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TxHashRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TxHashRequest(TxHashRequest other) : this() {
      hash_ = other.hash_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TxHashRequest Clone() {
      return new TxHashRequest(this);
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 1;
    private string hash_ = "";
    /// <summary>
    /// tx hash
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hash {
      get { return hash_; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TxHashRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TxHashRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Hash != other.Hash) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Hash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Hash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Hash);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TxHashRequest other) {
      if (other == null) {
        return;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Hash = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The request message containing the block's hash.
  /// </summary>
  public sealed partial class GetBlockByHashRequest : pb::IMessage<GetBlockByHashRequest> {
    private static readonly pb::MessageParser<GetBlockByHashRequest> _parser = new pb::MessageParser<GetBlockByHashRequest>(() => new GetBlockByHashRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBlockByHashRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOST.Rpcpb.RpcReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBlockByHashRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBlockByHashRequest(GetBlockByHashRequest other) : this() {
      hash_ = other.hash_;
      complete_ = other.complete_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBlockByHashRequest Clone() {
      return new GetBlockByHashRequest(this);
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 1;
    private string hash_ = "";
    /// <summary>
    /// block hash
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hash {
      get { return hash_; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "complete" field.</summary>
    public const int CompleteFieldNumber = 2;
    private bool complete_;
    /// <summary>
    /// complete means whether including the full transactions and transaction receipts
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Complete {
      get { return complete_; }
      set {
        complete_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBlockByHashRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBlockByHashRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Hash != other.Hash) return false;
      if (Complete != other.Complete) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      if (Complete != false) hash ^= Complete.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Hash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Hash);
      }
      if (Complete != false) {
        output.WriteRawTag(16);
        output.WriteBool(Complete);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Hash);
      }
      if (Complete != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBlockByHashRequest other) {
      if (other == null) {
        return;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
      if (other.Complete != false) {
        Complete = other.Complete;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Hash = input.ReadString();
            break;
          }
          case 16: {
            Complete = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The request message containing the block's number.
  /// </summary>
  public sealed partial class GetBlockByNumberRequest : pb::IMessage<GetBlockByNumberRequest> {
    private static readonly pb::MessageParser<GetBlockByNumberRequest> _parser = new pb::MessageParser<GetBlockByNumberRequest>(() => new GetBlockByNumberRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBlockByNumberRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOST.Rpcpb.RpcReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBlockByNumberRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBlockByNumberRequest(GetBlockByNumberRequest other) : this() {
      number_ = other.number_;
      complete_ = other.complete_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBlockByNumberRequest Clone() {
      return new GetBlockByNumberRequest(this);
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 1;
    private long number_;
    /// <summary>
    /// block number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Number {
      get { return number_; }
      set {
        number_ = value;
      }
    }

    /// <summary>Field number for the "complete" field.</summary>
    public const int CompleteFieldNumber = 2;
    private bool complete_;
    /// <summary>
    /// complete means whether including the full transactions and transaction receipts
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Complete {
      get { return complete_; }
      set {
        complete_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBlockByNumberRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBlockByNumberRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Number != other.Number) return false;
      if (Complete != other.Complete) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Number != 0L) hash ^= Number.GetHashCode();
      if (Complete != false) hash ^= Complete.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Number != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Number);
      }
      if (Complete != false) {
        output.WriteRawTag(16);
        output.WriteBool(Complete);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Number != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Number);
      }
      if (Complete != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBlockByNumberRequest other) {
      if (other == null) {
        return;
      }
      if (other.Number != 0L) {
        Number = other.Number;
      }
      if (other.Complete != false) {
        Complete = other.Complete;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Number = input.ReadInt64();
            break;
          }
          case 16: {
            Complete = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message defines the account's frozen balance.
  /// </summary>
  public sealed partial class FrozenBalance : pb::IMessage<FrozenBalance> {
    private static readonly pb::MessageParser<FrozenBalance> _parser = new pb::MessageParser<FrozenBalance>(() => new FrozenBalance());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FrozenBalance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOST.Rpcpb.RpcReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrozenBalance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrozenBalance(FrozenBalance other) : this() {
      amount_ = other.amount_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrozenBalance Clone() {
      return new FrozenBalance(this);
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 1;
    private double amount_;
    /// <summary>
    /// balance amount
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private long time_;
    /// <summary>
    /// free time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FrozenBalance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FrozenBalance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Amount, other.Amount)) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Amount != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Amount);
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Amount != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Amount);
      }
      if (Time != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Amount != 0D) {
        size += 1 + 8;
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FrozenBalance other) {
      if (other == null) {
        return;
      }
      if (other.Amount != 0D) {
        Amount = other.Amount;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Amount = input.ReadDouble();
            break;
          }
          case 16: {
            Time = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message defines account struct.
  /// </summary>
  public sealed partial class Account : pb::IMessage<Account> {
    private static readonly pb::MessageParser<Account> _parser = new pb::MessageParser<Account>(() => new Account());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Account> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOST.Rpcpb.RpcReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account(Account other) : this() {
      name_ = other.name_;
      balance_ = other.balance_;
      createTime_ = other.createTime_;
      gasInfo_ = other.gasInfo_ != null ? other.gasInfo_.Clone() : null;
      ramInfo_ = other.ramInfo_ != null ? other.ramInfo_.Clone() : null;
      permissions_ = other.permissions_.Clone();
      groups_ = other.groups_.Clone();
      frozenBalances_ = other.frozenBalances_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account Clone() {
      return new Account(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// account name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "balance" field.</summary>
    public const int BalanceFieldNumber = 2;
    private double balance_;
    /// <summary>
    /// account balance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Balance {
      get { return balance_; }
      set {
        balance_ = value;
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 3;
    private long createTime_;
    /// <summary>
    /// account create timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "gas_info" field.</summary>
    public const int GasInfoFieldNumber = 4;
    private global::IOST.Rpcpb.Account.Types.GasInfo gasInfo_;
    /// <summary>
    /// gas information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IOST.Rpcpb.Account.Types.GasInfo GasInfo {
      get { return gasInfo_; }
      set {
        gasInfo_ = value;
      }
    }

    /// <summary>Field number for the "ram_info" field.</summary>
    public const int RamInfoFieldNumber = 5;
    private global::IOST.Rpcpb.Account.Types.RAMInfo ramInfo_;
    /// <summary>
    /// ram information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IOST.Rpcpb.Account.Types.RAMInfo RamInfo {
      get { return ramInfo_; }
      set {
        ramInfo_ = value;
      }
    }

    /// <summary>Field number for the "permissions" field.</summary>
    public const int PermissionsFieldNumber = 6;
    private static readonly pbc::MapField<string, global::IOST.Rpcpb.Account.Types.Permission>.Codec _map_permissions_codec
        = new pbc::MapField<string, global::IOST.Rpcpb.Account.Types.Permission>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::IOST.Rpcpb.Account.Types.Permission.Parser), 50);
    private readonly pbc::MapField<string, global::IOST.Rpcpb.Account.Types.Permission> permissions_ = new pbc::MapField<string, global::IOST.Rpcpb.Account.Types.Permission>();
    /// <summary>
    /// account permission
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::IOST.Rpcpb.Account.Types.Permission> Permissions {
      get { return permissions_; }
    }

    /// <summary>Field number for the "groups" field.</summary>
    public const int GroupsFieldNumber = 7;
    private static readonly pbc::MapField<string, global::IOST.Rpcpb.Account.Types.Group>.Codec _map_groups_codec
        = new pbc::MapField<string, global::IOST.Rpcpb.Account.Types.Group>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::IOST.Rpcpb.Account.Types.Group.Parser), 58);
    private readonly pbc::MapField<string, global::IOST.Rpcpb.Account.Types.Group> groups_ = new pbc::MapField<string, global::IOST.Rpcpb.Account.Types.Group>();
    /// <summary>
    /// account groups
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::IOST.Rpcpb.Account.Types.Group> Groups {
      get { return groups_; }
    }

    /// <summary>Field number for the "frozen_balances" field.</summary>
    public const int FrozenBalancesFieldNumber = 8;
    private static readonly pb::FieldCodec<global::IOST.Rpcpb.FrozenBalance> _repeated_frozenBalances_codec
        = pb::FieldCodec.ForMessage(66, global::IOST.Rpcpb.FrozenBalance.Parser);
    private readonly pbc::RepeatedField<global::IOST.Rpcpb.FrozenBalance> frozenBalances_ = new pbc::RepeatedField<global::IOST.Rpcpb.FrozenBalance>();
    /// <summary>
    /// frozen balance information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IOST.Rpcpb.FrozenBalance> FrozenBalances {
      get { return frozenBalances_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Account);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Account other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Balance, other.Balance)) return false;
      if (CreateTime != other.CreateTime) return false;
      if (!object.Equals(GasInfo, other.GasInfo)) return false;
      if (!object.Equals(RamInfo, other.RamInfo)) return false;
      if (!Permissions.Equals(other.Permissions)) return false;
      if (!Groups.Equals(other.Groups)) return false;
      if(!frozenBalances_.Equals(other.frozenBalances_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Balance != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Balance);
      if (CreateTime != 0L) hash ^= CreateTime.GetHashCode();
      if (gasInfo_ != null) hash ^= GasInfo.GetHashCode();
      if (ramInfo_ != null) hash ^= RamInfo.GetHashCode();
      hash ^= Permissions.GetHashCode();
      hash ^= Groups.GetHashCode();
      hash ^= frozenBalances_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Balance != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Balance);
      }
      if (CreateTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CreateTime);
      }
      if (gasInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(GasInfo);
      }
      if (ramInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(RamInfo);
      }
      permissions_.WriteTo(output, _map_permissions_codec);
      groups_.WriteTo(output, _map_groups_codec);
      frozenBalances_.WriteTo(output, _repeated_frozenBalances_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Balance != 0D) {
        size += 1 + 8;
      }
      if (CreateTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreateTime);
      }
      if (gasInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GasInfo);
      }
      if (ramInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RamInfo);
      }
      size += permissions_.CalculateSize(_map_permissions_codec);
      size += groups_.CalculateSize(_map_groups_codec);
      size += frozenBalances_.CalculateSize(_repeated_frozenBalances_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Account other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Balance != 0D) {
        Balance = other.Balance;
      }
      if (other.CreateTime != 0L) {
        CreateTime = other.CreateTime;
      }
      if (other.gasInfo_ != null) {
        if (gasInfo_ == null) {
          GasInfo = new global::IOST.Rpcpb.Account.Types.GasInfo();
        }
        GasInfo.MergeFrom(other.GasInfo);
      }
      if (other.ramInfo_ != null) {
        if (ramInfo_ == null) {
          RamInfo = new global::IOST.Rpcpb.Account.Types.RAMInfo();
        }
        RamInfo.MergeFrom(other.RamInfo);
      }
      permissions_.Add(other.permissions_);
      groups_.Add(other.groups_);
      frozenBalances_.Add(other.frozenBalances_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 17: {
            Balance = input.ReadDouble();
            break;
          }
          case 24: {
            CreateTime = input.ReadInt64();
            break;
          }
          case 34: {
            if (gasInfo_ == null) {
              GasInfo = new global::IOST.Rpcpb.Account.Types.GasInfo();
            }
            input.ReadMessage(GasInfo);
            break;
          }
          case 42: {
            if (ramInfo_ == null) {
              RamInfo = new global::IOST.Rpcpb.Account.Types.RAMInfo();
            }
            input.ReadMessage(RamInfo);
            break;
          }
          case 50: {
            permissions_.AddEntriesFrom(input, _map_permissions_codec);
            break;
          }
          case 58: {
            groups_.AddEntriesFrom(input, _map_groups_codec);
            break;
          }
          case 66: {
            frozenBalances_.AddEntriesFrom(input, _repeated_frozenBalances_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Account message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The message defines account pledged coin information.
      /// </summary>
      public sealed partial class PledgeInfo : pb::IMessage<PledgeInfo> {
        private static readonly pb::MessageParser<PledgeInfo> _parser = new pb::MessageParser<PledgeInfo>(() => new PledgeInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PledgeInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::IOST.Rpcpb.Account.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PledgeInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PledgeInfo(PledgeInfo other) : this() {
          pledger_ = other.pledger_;
          amount_ = other.amount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PledgeInfo Clone() {
          return new PledgeInfo(this);
        }

        /// <summary>Field number for the "pledger" field.</summary>
        public const int PledgerFieldNumber = 1;
        private string pledger_ = "";
        /// <summary>
        /// the account who pledges
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Pledger {
          get { return pledger_; }
          set {
            pledger_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "amount" field.</summary>
        public const int AmountFieldNumber = 2;
        private double amount_;
        /// <summary>
        /// pledged amount
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PledgeInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PledgeInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Pledger != other.Pledger) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Amount, other.Amount)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Pledger.Length != 0) hash ^= Pledger.GetHashCode();
          if (Amount != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Amount);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Pledger.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Pledger);
          }
          if (Amount != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(Amount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Pledger.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Pledger);
          }
          if (Amount != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PledgeInfo other) {
          if (other == null) {
            return;
          }
          if (other.Pledger.Length != 0) {
            Pledger = other.Pledger;
          }
          if (other.Amount != 0D) {
            Amount = other.Amount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Pledger = input.ReadString();
                break;
              }
              case 17: {
                Amount = input.ReadDouble();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// The message defines account gas information.
      /// </summary>
      public sealed partial class GasInfo : pb::IMessage<GasInfo> {
        private static readonly pb::MessageParser<GasInfo> _parser = new pb::MessageParser<GasInfo>(() => new GasInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GasInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::IOST.Rpcpb.Account.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GasInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GasInfo(GasInfo other) : this() {
          currentTotal_ = other.currentTotal_;
          transferableGas_ = other.transferableGas_;
          pledgeGas_ = other.pledgeGas_;
          increaseSpeed_ = other.increaseSpeed_;
          limit_ = other.limit_;
          pledgedInfo_ = other.pledgedInfo_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GasInfo Clone() {
          return new GasInfo(this);
        }

        /// <summary>Field number for the "current_total" field.</summary>
        public const int CurrentTotalFieldNumber = 1;
        private double currentTotal_;
        /// <summary>
        /// current total gas amount
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double CurrentTotal {
          get { return currentTotal_; }
          set {
            currentTotal_ = value;
          }
        }

        /// <summary>Field number for the "transferable_gas" field.</summary>
        public const int TransferableGasFieldNumber = 2;
        private double transferableGas_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double TransferableGas {
          get { return transferableGas_; }
          set {
            transferableGas_ = value;
          }
        }

        /// <summary>Field number for the "pledge_gas" field.</summary>
        public const int PledgeGasFieldNumber = 3;
        private double pledgeGas_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double PledgeGas {
          get { return pledgeGas_; }
          set {
            pledgeGas_ = value;
          }
        }

        /// <summary>Field number for the "increase_speed" field.</summary>
        public const int IncreaseSpeedFieldNumber = 4;
        private double increaseSpeed_;
        /// <summary>
        /// gas increase speed
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double IncreaseSpeed {
          get { return increaseSpeed_; }
          set {
            increaseSpeed_ = value;
          }
        }

        /// <summary>Field number for the "limit" field.</summary>
        public const int LimitFieldNumber = 5;
        private double limit_;
        /// <summary>
        /// gas limit
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Limit {
          get { return limit_; }
          set {
            limit_ = value;
          }
        }

        /// <summary>Field number for the "pledged_info" field.</summary>
        public const int PledgedInfoFieldNumber = 6;
        private static readonly pb::FieldCodec<global::IOST.Rpcpb.Account.Types.PledgeInfo> _repeated_pledgedInfo_codec
            = pb::FieldCodec.ForMessage(50, global::IOST.Rpcpb.Account.Types.PledgeInfo.Parser);
        private readonly pbc::RepeatedField<global::IOST.Rpcpb.Account.Types.PledgeInfo> pledgedInfo_ = new pbc::RepeatedField<global::IOST.Rpcpb.Account.Types.PledgeInfo>();
        /// <summary>
        /// pledge information
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::IOST.Rpcpb.Account.Types.PledgeInfo> PledgedInfo {
          get { return pledgedInfo_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GasInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GasInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CurrentTotal, other.CurrentTotal)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TransferableGas, other.TransferableGas)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PledgeGas, other.PledgeGas)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(IncreaseSpeed, other.IncreaseSpeed)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Limit, other.Limit)) return false;
          if(!pledgedInfo_.Equals(other.pledgedInfo_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CurrentTotal != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CurrentTotal);
          if (TransferableGas != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TransferableGas);
          if (PledgeGas != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PledgeGas);
          if (IncreaseSpeed != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(IncreaseSpeed);
          if (Limit != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Limit);
          hash ^= pledgedInfo_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CurrentTotal != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(CurrentTotal);
          }
          if (TransferableGas != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(TransferableGas);
          }
          if (PledgeGas != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(PledgeGas);
          }
          if (IncreaseSpeed != 0D) {
            output.WriteRawTag(33);
            output.WriteDouble(IncreaseSpeed);
          }
          if (Limit != 0D) {
            output.WriteRawTag(41);
            output.WriteDouble(Limit);
          }
          pledgedInfo_.WriteTo(output, _repeated_pledgedInfo_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CurrentTotal != 0D) {
            size += 1 + 8;
          }
          if (TransferableGas != 0D) {
            size += 1 + 8;
          }
          if (PledgeGas != 0D) {
            size += 1 + 8;
          }
          if (IncreaseSpeed != 0D) {
            size += 1 + 8;
          }
          if (Limit != 0D) {
            size += 1 + 8;
          }
          size += pledgedInfo_.CalculateSize(_repeated_pledgedInfo_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GasInfo other) {
          if (other == null) {
            return;
          }
          if (other.CurrentTotal != 0D) {
            CurrentTotal = other.CurrentTotal;
          }
          if (other.TransferableGas != 0D) {
            TransferableGas = other.TransferableGas;
          }
          if (other.PledgeGas != 0D) {
            PledgeGas = other.PledgeGas;
          }
          if (other.IncreaseSpeed != 0D) {
            IncreaseSpeed = other.IncreaseSpeed;
          }
          if (other.Limit != 0D) {
            Limit = other.Limit;
          }
          pledgedInfo_.Add(other.pledgedInfo_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                CurrentTotal = input.ReadDouble();
                break;
              }
              case 17: {
                TransferableGas = input.ReadDouble();
                break;
              }
              case 25: {
                PledgeGas = input.ReadDouble();
                break;
              }
              case 33: {
                IncreaseSpeed = input.ReadDouble();
                break;
              }
              case 41: {
                Limit = input.ReadDouble();
                break;
              }
              case 50: {
                pledgedInfo_.AddEntriesFrom(input, _repeated_pledgedInfo_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// The message defines account ram information.
      /// </summary>
      public sealed partial class RAMInfo : pb::IMessage<RAMInfo> {
        private static readonly pb::MessageParser<RAMInfo> _parser = new pb::MessageParser<RAMInfo>(() => new RAMInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RAMInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::IOST.Rpcpb.Account.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RAMInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RAMInfo(RAMInfo other) : this() {
          available_ = other.available_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RAMInfo Clone() {
          return new RAMInfo(this);
        }

        /// <summary>Field number for the "available" field.</summary>
        public const int AvailableFieldNumber = 1;
        private long available_;
        /// <summary>
        /// available ram bytes
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Available {
          get { return available_; }
          set {
            available_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RAMInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RAMInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Available != other.Available) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Available != 0L) hash ^= Available.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Available != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(Available);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Available != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Available);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RAMInfo other) {
          if (other == null) {
            return;
          }
          if (other.Available != 0L) {
            Available = other.Available;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Available = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// The message defines permission item.
      /// </summary>
      public sealed partial class Item : pb::IMessage<Item> {
        private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Item> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::IOST.Rpcpb.Account.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Item() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Item(Item other) : this() {
          id_ = other.id_;
          isKeyPair_ = other.isKeyPair_;
          weight_ = other.weight_;
          permission_ = other.permission_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Item Clone() {
          return new Item(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        /// <summary>
        /// permission name or key pair id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "is_key_pair" field.</summary>
        public const int IsKeyPairFieldNumber = 2;
        private bool isKeyPair_;
        /// <summary>
        /// whether it's a key pair
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsKeyPair {
          get { return isKeyPair_; }
          set {
            isKeyPair_ = value;
          }
        }

        /// <summary>Field number for the "weight" field.</summary>
        public const int WeightFieldNumber = 3;
        private long weight_;
        /// <summary>
        /// permission weight
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Weight {
          get { return weight_; }
          set {
            weight_ = value;
          }
        }

        /// <summary>Field number for the "permission" field.</summary>
        public const int PermissionFieldNumber = 4;
        private string permission_ = "";
        /// <summary>
        /// permission
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Permission {
          get { return permission_; }
          set {
            permission_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Item);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Item other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (IsKeyPair != other.IsKeyPair) return false;
          if (Weight != other.Weight) return false;
          if (Permission != other.Permission) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (IsKeyPair != false) hash ^= IsKeyPair.GetHashCode();
          if (Weight != 0L) hash ^= Weight.GetHashCode();
          if (Permission.Length != 0) hash ^= Permission.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (IsKeyPair != false) {
            output.WriteRawTag(16);
            output.WriteBool(IsKeyPair);
          }
          if (Weight != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(Weight);
          }
          if (Permission.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(Permission);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (IsKeyPair != false) {
            size += 1 + 1;
          }
          if (Weight != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Weight);
          }
          if (Permission.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Permission);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Item other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.IsKeyPair != false) {
            IsKeyPair = other.IsKeyPair;
          }
          if (other.Weight != 0L) {
            Weight = other.Weight;
          }
          if (other.Permission.Length != 0) {
            Permission = other.Permission;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 16: {
                IsKeyPair = input.ReadBool();
                break;
              }
              case 24: {
                Weight = input.ReadInt64();
                break;
              }
              case 34: {
                Permission = input.ReadString();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// The message defines a permission group.
      /// </summary>
      public sealed partial class Group : pb::IMessage<Group> {
        private static readonly pb::MessageParser<Group> _parser = new pb::MessageParser<Group>(() => new Group());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Group> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::IOST.Rpcpb.Account.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Group() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Group(Group other) : this() {
          name_ = other.name_;
          items_ = other.items_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Group Clone() {
          return new Group(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        /// <summary>
        /// group name
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "items" field.</summary>
        public const int ItemsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::IOST.Rpcpb.Account.Types.Item> _repeated_items_codec
            = pb::FieldCodec.ForMessage(18, global::IOST.Rpcpb.Account.Types.Item.Parser);
        private readonly pbc::RepeatedField<global::IOST.Rpcpb.Account.Types.Item> items_ = new pbc::RepeatedField<global::IOST.Rpcpb.Account.Types.Item>();
        /// <summary>
        /// permission items
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::IOST.Rpcpb.Account.Types.Item> Items {
          get { return items_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Group);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Group other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if(!items_.Equals(other.items_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          hash ^= items_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          items_.WriteTo(output, _repeated_items_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          size += items_.CalculateSize(_repeated_items_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Group other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          items_.Add(other.items_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// The message defines the permission struct.
      /// </summary>
      public sealed partial class Permission : pb::IMessage<Permission> {
        private static readonly pb::MessageParser<Permission> _parser = new pb::MessageParser<Permission>(() => new Permission());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Permission> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::IOST.Rpcpb.Account.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Permission() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Permission(Permission other) : this() {
          name_ = other.name_;
          groups_ = other.groups_.Clone();
          items_ = other.items_.Clone();
          threshold_ = other.threshold_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Permission Clone() {
          return new Permission(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        /// <summary>
        /// permission name
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "groups" field.</summary>
        public const int GroupsFieldNumber = 2;
        private static readonly pb::FieldCodec<string> _repeated_groups_codec
            = pb::FieldCodec.ForString(18);
        private readonly pbc::RepeatedField<string> groups_ = new pbc::RepeatedField<string>();
        /// <summary>
        /// permission groups
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Groups {
          get { return groups_; }
        }

        /// <summary>Field number for the "items" field.</summary>
        public const int ItemsFieldNumber = 3;
        private static readonly pb::FieldCodec<global::IOST.Rpcpb.Account.Types.Item> _repeated_items_codec
            = pb::FieldCodec.ForMessage(26, global::IOST.Rpcpb.Account.Types.Item.Parser);
        private readonly pbc::RepeatedField<global::IOST.Rpcpb.Account.Types.Item> items_ = new pbc::RepeatedField<global::IOST.Rpcpb.Account.Types.Item>();
        /// <summary>
        /// permission items
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::IOST.Rpcpb.Account.Types.Item> Items {
          get { return items_; }
        }

        /// <summary>Field number for the "threshold" field.</summary>
        public const int ThresholdFieldNumber = 4;
        private long threshold_;
        /// <summary>
        /// permission threshold
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Threshold {
          get { return threshold_; }
          set {
            threshold_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Permission);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Permission other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if(!groups_.Equals(other.groups_)) return false;
          if(!items_.Equals(other.items_)) return false;
          if (Threshold != other.Threshold) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          hash ^= groups_.GetHashCode();
          hash ^= items_.GetHashCode();
          if (Threshold != 0L) hash ^= Threshold.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          groups_.WriteTo(output, _repeated_groups_codec);
          items_.WriteTo(output, _repeated_items_codec);
          if (Threshold != 0L) {
            output.WriteRawTag(32);
            output.WriteInt64(Threshold);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          size += groups_.CalculateSize(_repeated_groups_codec);
          size += items_.CalculateSize(_repeated_items_codec);
          if (Threshold != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Threshold);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Permission other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          groups_.Add(other.groups_);
          items_.Add(other.items_);
          if (other.Threshold != 0L) {
            Threshold = other.Threshold;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                groups_.AddEntriesFrom(input, _repeated_groups_codec);
                break;
              }
              case 26: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
              case 32: {
                Threshold = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// The message defines the get account request.
  /// </summary>
  public sealed partial class GetAccountRequest : pb::IMessage<GetAccountRequest> {
    private static readonly pb::MessageParser<GetAccountRequest> _parser = new pb::MessageParser<GetAccountRequest>(() => new GetAccountRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAccountRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOST.Rpcpb.RpcReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccountRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccountRequest(GetAccountRequest other) : this() {
      name_ = other.name_;
      byLongestChain_ = other.byLongestChain_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccountRequest Clone() {
      return new GetAccountRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// account name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "by_longest_chain" field.</summary>
    public const int ByLongestChainFieldNumber = 2;
    private bool byLongestChain_;
    /// <summary>
    /// get account by longest chain's head block or last irreversible block
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ByLongestChain {
      get { return byLongestChain_; }
      set {
        byLongestChain_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAccountRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAccountRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (ByLongestChain != other.ByLongestChain) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ByLongestChain != false) hash ^= ByLongestChain.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (ByLongestChain != false) {
        output.WriteRawTag(16);
        output.WriteBool(ByLongestChain);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ByLongestChain != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAccountRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ByLongestChain != false) {
        ByLongestChain = other.ByLongestChain;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            ByLongestChain = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message defines the contract struct.
  /// </summary>
  public sealed partial class Contract : pb::IMessage<Contract> {
    private static readonly pb::MessageParser<Contract> _parser = new pb::MessageParser<Contract>(() => new Contract());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Contract> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOST.Rpcpb.RpcReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Contract() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Contract(Contract other) : this() {
      id_ = other.id_;
      code_ = other.code_;
      language_ = other.language_;
      version_ = other.version_;
      abis_ = other.abis_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Contract Clone() {
      return new Contract(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// contract id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 2;
    private string code_ = "";
    /// <summary>
    /// contract code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 3;
    private string language_ = "";
    /// <summary>
    /// contract language
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Language {
      get { return language_; }
      set {
        language_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 4;
    private string version_ = "";
    /// <summary>
    /// contract version
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "abis" field.</summary>
    public const int AbisFieldNumber = 5;
    private static readonly pb::FieldCodec<global::IOST.Rpcpb.Contract.Types.ABI> _repeated_abis_codec
        = pb::FieldCodec.ForMessage(42, global::IOST.Rpcpb.Contract.Types.ABI.Parser);
    private readonly pbc::RepeatedField<global::IOST.Rpcpb.Contract.Types.ABI> abis_ = new pbc::RepeatedField<global::IOST.Rpcpb.Contract.Types.ABI>();
    /// <summary>
    /// contract abis
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IOST.Rpcpb.Contract.Types.ABI> Abis {
      get { return abis_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Contract);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Contract other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Code != other.Code) return false;
      if (Language != other.Language) return false;
      if (Version != other.Version) return false;
      if(!abis_.Equals(other.abis_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      if (Language.Length != 0) hash ^= Language.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      hash ^= abis_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Code.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Code);
      }
      if (Language.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Language);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Version);
      }
      abis_.WriteTo(output, _repeated_abis_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
      }
      if (Language.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Language);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      size += abis_.CalculateSize(_repeated_abis_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Contract other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
      if (other.Language.Length != 0) {
        Language = other.Language;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      abis_.Add(other.abis_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Code = input.ReadString();
            break;
          }
          case 26: {
            Language = input.ReadString();
            break;
          }
          case 34: {
            Version = input.ReadString();
            break;
          }
          case 42: {
            abis_.AddEntriesFrom(input, _repeated_abis_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Contract message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The message defines the ABI struct.
      /// </summary>
      public sealed partial class ABI : pb::IMessage<ABI> {
        private static readonly pb::MessageParser<ABI> _parser = new pb::MessageParser<ABI>(() => new ABI());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ABI> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::IOST.Rpcpb.Contract.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ABI() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ABI(ABI other) : this() {
          name_ = other.name_;
          args_ = other.args_.Clone();
          amountLimit_ = other.amountLimit_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ABI Clone() {
          return new ABI(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        /// <summary>
        /// abi name
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "args" field.</summary>
        public const int ArgsFieldNumber = 2;
        private static readonly pb::FieldCodec<string> _repeated_args_codec
            = pb::FieldCodec.ForString(18);
        private readonly pbc::RepeatedField<string> args_ = new pbc::RepeatedField<string>();
        /// <summary>
        /// abi arguments
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Args {
          get { return args_; }
        }

        /// <summary>Field number for the "amount_limit" field.</summary>
        public const int AmountLimitFieldNumber = 3;
        private static readonly pb::FieldCodec<global::IOST.Rpcpb.AmountLimit> _repeated_amountLimit_codec
            = pb::FieldCodec.ForMessage(26, global::IOST.Rpcpb.AmountLimit.Parser);
        private readonly pbc::RepeatedField<global::IOST.Rpcpb.AmountLimit> amountLimit_ = new pbc::RepeatedField<global::IOST.Rpcpb.AmountLimit>();
        /// <summary>
        /// abi amount limt
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::IOST.Rpcpb.AmountLimit> AmountLimit {
          get { return amountLimit_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ABI);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ABI other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if(!args_.Equals(other.args_)) return false;
          if(!amountLimit_.Equals(other.amountLimit_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          hash ^= args_.GetHashCode();
          hash ^= amountLimit_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          args_.WriteTo(output, _repeated_args_codec);
          amountLimit_.WriteTo(output, _repeated_amountLimit_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          size += args_.CalculateSize(_repeated_args_codec);
          size += amountLimit_.CalculateSize(_repeated_amountLimit_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ABI other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          args_.Add(other.args_);
          amountLimit_.Add(other.amountLimit_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                args_.AddEntriesFrom(input, _repeated_args_codec);
                break;
              }
              case 26: {
                amountLimit_.AddEntriesFrom(input, _repeated_amountLimit_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// The message defines get contract request.
  /// </summary>
  public sealed partial class GetContractRequest : pb::IMessage<GetContractRequest> {
    private static readonly pb::MessageParser<GetContractRequest> _parser = new pb::MessageParser<GetContractRequest>(() => new GetContractRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetContractRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOST.Rpcpb.RpcReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetContractRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetContractRequest(GetContractRequest other) : this() {
      id_ = other.id_;
      byLongestChain_ = other.byLongestChain_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetContractRequest Clone() {
      return new GetContractRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// contract id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "by_longest_chain" field.</summary>
    public const int ByLongestChainFieldNumber = 2;
    private bool byLongestChain_;
    /// <summary>
    /// get data by longest chain's head block or last irreversible block
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ByLongestChain {
      get { return byLongestChain_; }
      set {
        byLongestChain_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetContractRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetContractRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ByLongestChain != other.ByLongestChain) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (ByLongestChain != false) hash ^= ByLongestChain.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (ByLongestChain != false) {
        output.WriteRawTag(16);
        output.WriteBool(ByLongestChain);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (ByLongestChain != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetContractRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.ByLongestChain != false) {
        ByLongestChain = other.ByLongestChain;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            ByLongestChain = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message defines get contract storage request.
  /// </summary>
  public sealed partial class GetContractStorageRequest : pb::IMessage<GetContractStorageRequest> {
    private static readonly pb::MessageParser<GetContractStorageRequest> _parser = new pb::MessageParser<GetContractStorageRequest>(() => new GetContractStorageRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetContractStorageRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOST.Rpcpb.RpcReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetContractStorageRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetContractStorageRequest(GetContractStorageRequest other) : this() {
      id_ = other.id_;
      key_ = other.key_;
      field_ = other.field_;
      byLongestChain_ = other.byLongestChain_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetContractStorageRequest Clone() {
      return new GetContractStorageRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// contract id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private string key_ = "";
    /// <summary>
    /// the key in the StateDB
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "field" field.</summary>
    public const int FieldFieldNumber = 3;
    private string field_ = "";
    /// <summary>
    /// get the value from StateDB, field is needed if StateDB[key] is a map.(we get StateDB[key][field] in this case)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Field {
      get { return field_; }
      set {
        field_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "by_longest_chain" field.</summary>
    public const int ByLongestChainFieldNumber = 4;
    private bool byLongestChain_;
    /// <summary>
    /// get data by longest chain's head block or last irreversible block
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ByLongestChain {
      get { return byLongestChain_; }
      set {
        byLongestChain_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetContractStorageRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetContractStorageRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Key != other.Key) return false;
      if (Field != other.Field) return false;
      if (ByLongestChain != other.ByLongestChain) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Field.Length != 0) hash ^= Field.GetHashCode();
      if (ByLongestChain != false) hash ^= ByLongestChain.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (Field.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Field);
      }
      if (ByLongestChain != false) {
        output.WriteRawTag(32);
        output.WriteBool(ByLongestChain);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Field.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Field);
      }
      if (ByLongestChain != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetContractStorageRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Field.Length != 0) {
        Field = other.Field;
      }
      if (other.ByLongestChain != false) {
        ByLongestChain = other.ByLongestChain;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
          case 26: {
            Field = input.ReadString();
            break;
          }
          case 32: {
            ByLongestChain = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message defines get contract storage response.
  /// </summary>
  public sealed partial class GetContractStorageResponse : pb::IMessage<GetContractStorageResponse> {
    private static readonly pb::MessageParser<GetContractStorageResponse> _parser = new pb::MessageParser<GetContractStorageResponse>(() => new GetContractStorageResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetContractStorageResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOST.Rpcpb.RpcReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetContractStorageResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetContractStorageResponse(GetContractStorageResponse other) : this() {
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetContractStorageResponse Clone() {
      return new GetContractStorageResponse(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private string data_ = "";
    /// <summary>
    /// the json string data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetContractStorageResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetContractStorageResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetContractStorageResponse other) {
      if (other == null) {
        return;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Data = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message defines send transaction response.
  /// </summary>
  public sealed partial class SendTransactionResponse : pb::IMessage<SendTransactionResponse> {
    private static readonly pb::MessageParser<SendTransactionResponse> _parser = new pb::MessageParser<SendTransactionResponse>(() => new SendTransactionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendTransactionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOST.Rpcpb.RpcReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendTransactionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendTransactionResponse(SendTransactionResponse other) : this() {
      hash_ = other.hash_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendTransactionResponse Clone() {
      return new SendTransactionResponse(this);
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 1;
    private string hash_ = "";
    /// <summary>
    /// the final transaction hash
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hash {
      get { return hash_; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendTransactionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendTransactionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Hash != other.Hash) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Hash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Hash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Hash);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendTransactionResponse other) {
      if (other == null) {
        return;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Hash = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message defines get token balance response.
  /// </summary>
  public sealed partial class GetTokenBalanceResponse : pb::IMessage<GetTokenBalanceResponse> {
    private static readonly pb::MessageParser<GetTokenBalanceResponse> _parser = new pb::MessageParser<GetTokenBalanceResponse>(() => new GetTokenBalanceResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTokenBalanceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOST.Rpcpb.RpcReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTokenBalanceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTokenBalanceResponse(GetTokenBalanceResponse other) : this() {
      balance_ = other.balance_;
      frozenBalances_ = other.frozenBalances_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTokenBalanceResponse Clone() {
      return new GetTokenBalanceResponse(this);
    }

    /// <summary>Field number for the "balance" field.</summary>
    public const int BalanceFieldNumber = 1;
    private double balance_;
    /// <summary>
    /// token balance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Balance {
      get { return balance_; }
      set {
        balance_ = value;
      }
    }

    /// <summary>Field number for the "frozen_balances" field.</summary>
    public const int FrozenBalancesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::IOST.Rpcpb.FrozenBalance> _repeated_frozenBalances_codec
        = pb::FieldCodec.ForMessage(18, global::IOST.Rpcpb.FrozenBalance.Parser);
    private readonly pbc::RepeatedField<global::IOST.Rpcpb.FrozenBalance> frozenBalances_ = new pbc::RepeatedField<global::IOST.Rpcpb.FrozenBalance>();
    /// <summary>
    /// frozen balance information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IOST.Rpcpb.FrozenBalance> FrozenBalances {
      get { return frozenBalances_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTokenBalanceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTokenBalanceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Balance, other.Balance)) return false;
      if(!frozenBalances_.Equals(other.frozenBalances_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Balance != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Balance);
      hash ^= frozenBalances_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Balance != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Balance);
      }
      frozenBalances_.WriteTo(output, _repeated_frozenBalances_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Balance != 0D) {
        size += 1 + 8;
      }
      size += frozenBalances_.CalculateSize(_repeated_frozenBalances_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTokenBalanceResponse other) {
      if (other == null) {
        return;
      }
      if (other.Balance != 0D) {
        Balance = other.Balance;
      }
      frozenBalances_.Add(other.frozenBalances_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Balance = input.ReadDouble();
            break;
          }
          case 18: {
            frozenBalances_.AddEntriesFrom(input, _repeated_frozenBalances_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message defines get token balance request.
  /// </summary>
  public sealed partial class GetTokenBalanceRequest : pb::IMessage<GetTokenBalanceRequest> {
    private static readonly pb::MessageParser<GetTokenBalanceRequest> _parser = new pb::MessageParser<GetTokenBalanceRequest>(() => new GetTokenBalanceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTokenBalanceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOST.Rpcpb.RpcReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTokenBalanceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTokenBalanceRequest(GetTokenBalanceRequest other) : this() {
      account_ = other.account_;
      token_ = other.token_;
      byLongestChain_ = other.byLongestChain_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTokenBalanceRequest Clone() {
      return new GetTokenBalanceRequest(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    /// <summary>
    /// account name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 2;
    private string token_ = "";
    /// <summary>
    /// the token name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "by_longest_chain" field.</summary>
    public const int ByLongestChainFieldNumber = 3;
    private bool byLongestChain_;
    /// <summary>
    /// get data by longest chain's head block or last irreversible block
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ByLongestChain {
      get { return byLongestChain_; }
      set {
        byLongestChain_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTokenBalanceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTokenBalanceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (Token != other.Token) return false;
      if (ByLongestChain != other.ByLongestChain) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (ByLongestChain != false) hash ^= ByLongestChain.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      if (ByLongestChain != false) {
        output.WriteRawTag(24);
        output.WriteBool(ByLongestChain);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (ByLongestChain != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTokenBalanceRequest other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.ByLongestChain != false) {
        ByLongestChain = other.ByLongestChain;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
          case 24: {
            ByLongestChain = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
