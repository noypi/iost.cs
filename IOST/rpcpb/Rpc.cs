// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rpc.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace IOSTSdk.Rpcpb {

  /// <summary>Holder for reflection information generated from rpc.proto</summary>
  public static partial class RpcReflection {

    #region Descriptor
    /// <summary>File descriptor for rpc.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RpcReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CglycGMucHJvdG8SBXJwY3BiGhxnb29nbGUvYXBpL2Fubm90YXRpb25zLnBy",
            "b3RvIg4KDEVtcHR5UmVxdWVzdCItCgtOZXR3b3JrSW5mbxIKCgJpZBgBIAEo",
            "CRISCgpwZWVyX2NvdW50GAIgASgFInQKD1JBTUluZm9SZXNwb25zZRIQCgh1",
            "c2VkX3JhbRgBIAEoAxIVCg1hdmFpbGFibGVfcmFtGAIgASgDEhEKCXRvdGFs",
            "X3JhbRgDIAEoAxISCgpzZWxsX3ByaWNlGAQgASgBEhEKCWJ1eV9wcmljZRgF",
            "IAEoASKWAQoQTm9kZUluZm9SZXNwb25zZRISCgpidWlsZF90aW1lGAEgASgJ",
            "EhAKCGdpdF9oYXNoGAIgASgJEgwKBG1vZGUYAyABKAkSIwoHbmV0d29yaxgE",
            "IAEoCzISLnJwY3BiLk5ldHdvcmtJbmZvEhQKDGNvZGVfdmVyc2lvbhgFIAEo",
            "CRITCgtzZXJ2ZXJfdGltZRgGIAEoAyIrCgtBbW91bnRMaW1pdBINCgV0b2tl",
            "bhgBIAEoCRINCgV2YWx1ZRgCIAEoCSI9CgZBY3Rpb24SEAoIY29udHJhY3QY",
            "ASABKAkSEwoLYWN0aW9uX25hbWUYAiABKAkSDAoEZGF0YRgDIAEoCSL8AwoJ",
            "VHhSZWNlaXB0Eg8KB3R4X2hhc2gYASABKAkSEQoJZ2FzX3VzYWdlGAIgASgB",
            "EjEKCXJhbV91c2FnZRgDIAMoCzIeLnJwY3BiLlR4UmVjZWlwdC5SYW1Vc2Fn",
            "ZUVudHJ5EjAKC3N0YXR1c19jb2RlGAQgASgOMhsucnBjcGIuVHhSZWNlaXB0",
            "LlN0YXR1c0NvZGUSDwoHbWVzc2FnZRgFIAEoCRIPCgdyZXR1cm5zGAYgAygJ",
            "EioKCHJlY2VpcHRzGAcgAygLMhgucnBjcGIuVHhSZWNlaXB0LlJlY2VpcHQa",
            "LwoNUmFtVXNhZ2VFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAM6",
            "AjgBGi0KB1JlY2VpcHQSEQoJZnVuY19uYW1lGAEgASgJEg8KB2NvbnRlbnQY",
            "AiABKAkitwEKClN0YXR1c0NvZGUSCwoHU1VDQ0VTUxAAEg8KC0dBU19SVU5f",
            "T1VUEAESFgoSQkFMQU5DRV9OT1RfRU5PVUdIEAISEwoPV1JPTkdfUEFSQU1F",
            "VEVSEAMSEQoNUlVOVElNRV9FUlJPUhAEEgsKB1RJTUVPVVQQBRITCg9XUk9O",
            "R19UWF9GT1JNQVQQBhIWChJEVVBMSUNBVEVfU0VUX0NPREUQBxIRCg1VTktO",
            "T1dOX0VSUk9SEAgirQIKC1RyYW5zYWN0aW9uEgwKBGhhc2gYASABKAkSDAoE",
            "dGltZRgCIAEoAxISCgpleHBpcmF0aW9uGAMgASgDEhEKCWdhc19yYXRpbxgE",
            "IAEoARIRCglnYXNfbGltaXQYBSABKAESDQoFZGVsYXkYBiABKAMSEAoIY2hh",
            "aW5faWQYByABKA0SHgoHYWN0aW9ucxgIIAMoCzINLnJwY3BiLkFjdGlvbhIP",
            "CgdzaWduZXJzGAkgAygJEhEKCXB1Ymxpc2hlchgKIAEoCRITCgtyZWZlcnJl",
            "ZF90eBgLIAEoCRIoCgxhbW91bnRfbGltaXQYDCADKAsyEi5ycGNwYi5BbW91",
            "bnRMaW1pdBIkCgp0eF9yZWNlaXB0GA0gASgLMhAucnBjcGIuVHhSZWNlaXB0",
            "IrwBChNUcmFuc2FjdGlvblJlc3BvbnNlEjEKBnN0YXR1cxgBIAEoDjIhLnJw",
            "Y3BiLlRyYW5zYWN0aW9uUmVzcG9uc2UuU3RhdHVzEicKC3RyYW5zYWN0aW9u",
            "GAIgASgLMhIucnBjcGIuVHJhbnNhY3Rpb24SFAoMYmxvY2tfbnVtYmVyGAMg",
            "ASgDIjMKBlN0YXR1cxILCgdQRU5ESU5HEAASCgoGUEFDS0VEEAESEAoMSVJS",
            "RVZFUlNJQkxFEAIilwEKCVNpZ25hdHVyZRItCglhbGdvcml0aG0YASABKA4y",
            "Gi5ycGNwYi5TaWduYXR1cmUuQWxnb3JpdGhtEhEKCXNpZ25hdHVyZRgCIAEo",
            "DBISCgpwdWJsaWNfa2V5GAMgASgMIjQKCUFsZ29yaXRobRILCgdVTktOT1dO",
            "EAASDQoJU0VDUDI1NksxEAESCwoHRUQyNTUxORACIrsCChJUcmFuc2FjdGlv",
            "blJlcXVlc3QSDAoEdGltZRgBIAEoAxISCgpleHBpcmF0aW9uGAIgASgDEhEK",
            "CWdhc19yYXRpbxgDIAEoARIRCglnYXNfbGltaXQYBCABKAESDQoFZGVsYXkY",
            "BSABKAMSEAoIY2hhaW5faWQYBiABKA0SHgoHYWN0aW9ucxgHIAMoCzINLnJw",
            "Y3BiLkFjdGlvbhIoCgxhbW91bnRfbGltaXQYCCADKAsyEi5ycGNwYi5BbW91",
            "bnRMaW1pdBIPCgdzaWduZXJzGAkgAygJEiQKCnNpZ25hdHVyZXMYCiADKAsy",
            "EC5ycGNwYi5TaWduYXR1cmUSEQoJcHVibGlzaGVyGAsgASgJEigKDnB1Ymxp",
            "c2hlcl9zaWdzGAwgAygLMhAucnBjcGIuU2lnbmF0dXJlIs0CCgVCbG9jaxIM",
            "CgRoYXNoGAEgASgJEg8KB3ZlcnNpb24YAiABKAMSEwoLcGFyZW50X2hhc2gY",
            "AyABKAkSFgoOdHhfbWVya2xlX2hhc2gYBCABKAkSHgoWdHhfcmVjZWlwdF9t",
            "ZXJrbGVfaGFzaBgFIAEoCRIOCgZudW1iZXIYBiABKAMSDwoHd2l0bmVzcxgH",
            "IAEoCRIMCgR0aW1lGAggASgDEhEKCWdhc191c2FnZRgJIAEoARIQCgh0eF9j",
            "b3VudBgKIAEoAxIfCgRpbmZvGAsgASgLMhEucnBjcGIuQmxvY2suSW5mbxIo",
            "Cgx0cmFuc2FjdGlvbnMYDCADKAsyEi5ycGNwYi5UcmFuc2FjdGlvbho5CgRJ",
            "bmZvEgwKBG1vZGUYASABKAUSDgoGdGhyZWFkGAIgASgFEhMKC2JhdGNoX2lu",
            "ZGV4GAMgAygFIoIBCg1CbG9ja1Jlc3BvbnNlEisKBnN0YXR1cxgBIAEoDjIb",
            "LnJwY3BiLkJsb2NrUmVzcG9uc2UuU3RhdHVzEhsKBWJsb2NrGAIgASgLMgwu",
            "cnBjcGIuQmxvY2siJwoGU3RhdHVzEgsKB1BFTkRJTkcQABIQCgxJUlJFVkVS",
            "U0lCTEUQASKoAgoRQ2hhaW5JbmZvUmVzcG9uc2USEAoIbmV0X25hbWUYASAB",
            "KAkSGAoQcHJvdG9jb2xfdmVyc2lvbhgCIAEoCRIQCghjaGFpbl9pZBgDIAEo",
            "DRISCgpoZWFkX2Jsb2NrGAQgASgDEhcKD2hlYWRfYmxvY2tfaGFzaBgFIAEo",
            "CRIRCglsaWJfYmxvY2sYBiABKAMSFgoObGliX2Jsb2NrX2hhc2gYByABKAkS",
            "FAoMd2l0bmVzc19saXN0GAggAygJEhgKEGxpYl93aXRuZXNzX2xpc3QYCSAD",
            "KAkSHAoUcGVuZGluZ193aXRuZXNzX2xpc3QYCiADKAkSFwoPaGVhZF9ibG9j",
            "a190aW1lGAsgASgDEhYKDmxpYl9ibG9ja190aW1lGAwgASgDIh0KDVR4SGFz",
            "aFJlcXVlc3QSDAoEaGFzaBgBIAEoCSI3ChVHZXRCbG9ja0J5SGFzaFJlcXVl",
            "c3QSDAoEaGFzaBgBIAEoCRIQCghjb21wbGV0ZRgCIAEoCCI7ChdHZXRCbG9j",
            "a0J5TnVtYmVyUmVxdWVzdBIOCgZudW1iZXIYASABKAMSEAoIY29tcGxldGUY",
            "AiABKAgiLQoNRnJvemVuQmFsYW5jZRIOCgZhbW91bnQYASABKAESDAoEdGlt",
            "ZRgCIAEoAyJACghWb3RlSW5mbxIOCgZvcHRpb24YASABKAkSDQoFdm90ZXMY",
            "AiABKAESFQoNY2xlYXJlZF92b3RlcxgDIAEoASJHChpHZXRQcm9kdWNlclZv",
            "dGVJbmZvUmVxdWVzdBIPCgdhY2NvdW50GAEgASgJEhgKEGJ5X2xvbmdlc3Rf",
            "Y2hhaW4YAiABKAgimwEKG0dldFByb2R1Y2VyVm90ZUluZm9SZXNwb25zZRIO",
            "CgZwdWJrZXkYASABKAkSCwoDbG9jGAIgASgJEgsKA3VybBgDIAEoCRIOCgZu",
            "ZXRfaWQYBCABKAkSEwoLaXNfcHJvZHVjZXIYBSABKAgSDgoGc3RhdHVzGAYg",
            "ASgJEg4KBm9ubGluZRgHIAEoCBINCgV2b3RlcxgIIAEoASJGChBHYXNSYXRp",
            "b1Jlc3BvbnNlEhgKEGxvd2VzdF9nYXNfcmF0aW8YASABKAESGAoQbWVkaWFu",
            "X2dhc19yYXRpbxgCIAEoASLJBwoHQWNjb3VudBIMCgRuYW1lGAEgASgJEg8K",
            "B2JhbGFuY2UYAiABKAESKAoIZ2FzX2luZm8YAyABKAsyFi5ycGNwYi5BY2Nv",
            "dW50Lkdhc0luZm8SKAoIcmFtX2luZm8YBCABKAsyFi5ycGNwYi5BY2NvdW50",
            "LlJBTUluZm8SNAoLcGVybWlzc2lvbnMYBSADKAsyHy5ycGNwYi5BY2NvdW50",
            "LlBlcm1pc3Npb25zRW50cnkSKgoGZ3JvdXBzGAYgAygLMhoucnBjcGIuQWNj",
            "b3VudC5Hcm91cHNFbnRyeRItCg9mcm96ZW5fYmFsYW5jZXMYByADKAsyFC5y",
            "cGNwYi5Gcm96ZW5CYWxhbmNlEiMKCnZvdGVfaW5mb3MYCCADKAsyDy5ycGNw",
            "Yi5Wb3RlSW5mbxotCgpQbGVkZ2VJbmZvEg8KB3BsZWRnZXIYASABKAkSDgoG",
            "YW1vdW50GAIgASgBGqYBCgdHYXNJbmZvEhUKDWN1cnJlbnRfdG90YWwYASAB",
            "KAESGAoQdHJhbnNmZXJhYmxlX2dhcxgCIAEoARISCgpwbGVkZ2VfZ2FzGAMg",
            "ASgBEhYKDmluY3JlYXNlX3NwZWVkGAQgASgBEg0KBWxpbWl0GAUgASgBEi8K",
            "DHBsZWRnZWRfaW5mbxgGIAMoCzIZLnJwY3BiLkFjY291bnQuUGxlZGdlSW5m",
            "bxo5CgdSQU1JbmZvEhEKCWF2YWlsYWJsZRgBIAEoAxIMCgR1c2VkGAIgASgD",
            "Eg0KBXRvdGFsGAMgASgDGksKBEl0ZW0SCgoCaWQYASABKAkSEwoLaXNfa2V5",
            "X3BhaXIYAiABKAgSDgoGd2VpZ2h0GAMgASgDEhIKCnBlcm1pc3Npb24YBCAB",
            "KAkaOQoFR3JvdXASDAoEbmFtZRgBIAEoCRIiCgVpdGVtcxgCIAMoCzITLnJw",
            "Y3BiLkFjY291bnQuSXRlbRpmCgpQZXJtaXNzaW9uEgwKBG5hbWUYASABKAkS",
            "EwoLZ3JvdXBfbmFtZXMYAiADKAkSIgoFaXRlbXMYAyADKAsyEy5ycGNwYi5B",
            "Y2NvdW50Lkl0ZW0SEQoJdGhyZXNob2xkGAQgASgDGk0KEFBlcm1pc3Npb25z",
            "RW50cnkSCwoDa2V5GAEgASgJEigKBXZhbHVlGAIgASgLMhkucnBjcGIuQWNj",
            "b3VudC5QZXJtaXNzaW9uOgI4ARpDCgtHcm91cHNFbnRyeRILCgNrZXkYASAB",
            "KAkSIwoFdmFsdWUYAiABKAsyFC5ycGNwYi5BY2NvdW50Lkdyb3VwOgI4ASI7",
            "ChFHZXRBY2NvdW50UmVxdWVzdBIMCgRuYW1lGAEgASgJEhgKEGJ5X2xvbmdl",
            "c3RfY2hhaW4YAiABKAgitwEKCENvbnRyYWN0EgoKAmlkGAEgASgJEgwKBGNv",
            "ZGUYAiABKAkSEAoIbGFuZ3VhZ2UYAyABKAkSDwoHdmVyc2lvbhgEIAEoCRIh",
            "CgRhYmlzGAUgAygLMhMucnBjcGIuQ29udHJhY3QuQUJJGksKA0FCSRIMCgRu",
            "YW1lGAEgASgJEgwKBGFyZ3MYAiADKAkSKAoMYW1vdW50X2xpbWl0GAMgAygL",
            "MhIucnBjcGIuQW1vdW50TGltaXQiOgoSR2V0Q29udHJhY3RSZXF1ZXN0EgoK",
            "AmlkGAEgASgJEhgKEGJ5X2xvbmdlc3RfY2hhaW4YAiABKAgiXQoZR2V0Q29u",
            "dHJhY3RTdG9yYWdlUmVxdWVzdBIKCgJpZBgBIAEoCRILCgNrZXkYAiABKAkS",
            "DQoFZmllbGQYAyABKAkSGAoQYnlfbG9uZ2VzdF9jaGFpbhgEIAEoCCJUChpH",
            "ZXRDb250cmFjdFN0b3JhZ2VSZXNwb25zZRIMCgRkYXRhGAEgASgJEhIKCmJs",
            "b2NrX2hhc2gYAiABKAkSFAoMYmxvY2tfbnVtYmVyGAMgASgDIrIBCh5HZXRC",
            "YXRjaENvbnRyYWN0U3RvcmFnZVJlcXVlc3QSCgoCaWQYASABKAkSQgoKa2V5",
            "X2ZpZWxkcxgCIAMoCzIuLnJwY3BiLkdldEJhdGNoQ29udHJhY3RTdG9yYWdl",
            "UmVxdWVzdC5LZXlGaWVsZBIYChBieV9sb25nZXN0X2NoYWluGAMgASgIGiYK",
            "CEtleUZpZWxkEgsKA2tleRgBIAEoCRINCgVmaWVsZBgCIAEoCSJaCh9HZXRC",
            "YXRjaENvbnRyYWN0U3RvcmFnZVJlc3BvbnNlEg0KBWRhdGFzGAEgAygJEhIK",
            "CmJsb2NrX2hhc2gYAiABKAkSFAoMYmxvY2tfbnVtYmVyGAMgASgDIlQKH0dl",
            "dENvbnRyYWN0U3RvcmFnZUZpZWxkc1JlcXVlc3QSCgoCaWQYASABKAkSCwoD",
            "a2V5GAIgASgJEhgKEGJ5X2xvbmdlc3RfY2hhaW4YAyABKAgiXAogR2V0Q29u",
            "dHJhY3RTdG9yYWdlRmllbGRzUmVzcG9uc2USDgoGZmllbGRzGAEgAygJEhIK",
            "CmJsb2NrX2hhc2gYAiABKAkSFAoMYmxvY2tfbnVtYmVyGAMgASgDIlEKF1Nl",
            "bmRUcmFuc2FjdGlvblJlc3BvbnNlEgwKBGhhc2gYASABKAkSKAoOcHJlX3R4",
            "X3JlY2VpcHQYAiABKAsyEC5ycGNwYi5UeFJlY2VpcHQiWQoXR2V0VG9rZW5C",
            "YWxhbmNlUmVzcG9uc2USDwoHYmFsYW5jZRgBIAEoARItCg9mcm96ZW5fYmFs",
            "YW5jZXMYAiADKAsyFC5ycGNwYi5Gcm96ZW5CYWxhbmNlIlIKFkdldFRva2Vu",
            "QmFsYW5jZVJlcXVlc3QSDwoHYWNjb3VudBgBIAEoCRINCgV0b2tlbhgCIAEo",
            "CRIYChBieV9sb25nZXN0X2NoYWluGAMgASgIIj8KGkdldFRva2VuNzIxQmFs",
            "YW5jZVJlc3BvbnNlEg8KB2JhbGFuY2UYASABKAMSEAoIdG9rZW5JRHMYAiAD",
            "KAkiUwoWR2V0VG9rZW43MjFJbmZvUmVxdWVzdBINCgV0b2tlbhgBIAEoCRIQ",
            "Cgh0b2tlbl9pZBgCIAEoCRIYChBieV9sb25nZXN0X2NoYWluGAMgASgIIi8K",
            "G0dldFRva2VuNzIxTWV0YWRhdGFSZXNwb25zZRIQCghtZXRhZGF0YRgBIAEo",
            "CSIpChhHZXRUb2tlbjcyMU93bmVyUmVzcG9uc2USDQoFb3duZXIYASABKAki",
            "eQoFRXZlbnQSIQoFdG9waWMYASABKA4yEi5ycGNwYi5FdmVudC5Ub3BpYxIM",
            "CgRkYXRhGAIgASgJEgwKBHRpbWUYAyABKAMiMQoFVG9waWMSFAoQQ09OVFJB",
            "Q1RfUkVDRUlQVBAAEhIKDkNPTlRSQUNUX0VWRU5UEAEihQEKEFN1YnNjcmli",
            "ZVJlcXVlc3QSIgoGdG9waWNzGAEgAygOMhIucnBjcGIuRXZlbnQuVG9waWMS",
            "LgoGZmlsdGVyGAIgASgLMh4ucnBjcGIuU3Vic2NyaWJlUmVxdWVzdC5GaWx0",
            "ZXIaHQoGRmlsdGVyEhMKC2NvbnRyYWN0X2lkGAEgASgJIjAKEVN1YnNjcmli",
            "ZVJlc3BvbnNlEhsKBWV2ZW50GAEgASgLMgwucnBjcGIuRXZlbnQieQoKVm90",
            "ZXJCb251cxINCgVib251cxgBIAEoARItCgZkZXRhaWwYAiADKAsyHS5ycGNw",
            "Yi5Wb3RlckJvbnVzLkRldGFpbEVudHJ5Gi0KC0RldGFpbEVudHJ5EgsKA2tl",
            "eRgBIAEoCRINCgV2YWx1ZRgCIAEoAToCOAEiHwoOQ2FuZGlkYXRlQm9udXMS",
            "DQoFYm9udXMYASABKAEiPwoTR2V0VG9rZW5JbmZvUmVxdWVzdBIOCgZzeW1i",
            "b2wYASABKAkSGAoQYnlfbG9uZ2VzdF9jaGFpbhgCIAEoCCKTAQoJVG9rZW5J",
            "bmZvEg4KBnN5bWJvbBgBIAEoCRIRCglmdWxsX25hbWUYAiABKAkSDgoGaXNz",
            "dWVyGAMgASgJEhQKDHRvdGFsX3N1cHBseRgEIAEoAxIWCg5jdXJyZW50X3N1",
            "cHBseRgFIAEoAxIPCgdkZWNpbWFsGAYgASgFEhQKDGNhbl90cmFuc2ZlchgH",
            "IAEoCDLdFQoKQXBpU2VydmljZRJRCgtHZXROb2RlSW5mbxITLnJwY3BiLkVt",
            "cHR5UmVxdWVzdBoXLnJwY3BiLk5vZGVJbmZvUmVzcG9uc2UiFILT5JMCDhIM",
            "L2dldE5vZGVJbmZvElQKDEdldENoYWluSW5mbxITLnJwY3BiLkVtcHR5UmVx",
            "dWVzdBoYLnJwY3BiLkNoYWluSW5mb1Jlc3BvbnNlIhWC0+STAg8SDS9nZXRD",
            "aGFpbkluZm8STgoKR2V0UkFNSW5mbxITLnJwY3BiLkVtcHR5UmVxdWVzdBoW",
            "LnJwY3BiLlJBTUluZm9SZXNwb25zZSITgtPkkwINEgsvZ2V0UkFNSW5mbxJc",
            "CgtHZXRUeEJ5SGFzaBIULnJwY3BiLlR4SGFzaFJlcXVlc3QaGi5ycGNwYi5U",
            "cmFuc2FjdGlvblJlc3BvbnNlIhuC0+STAhUSEy9nZXRUeEJ5SGFzaC97aGFz",
            "aH0SZAoUR2V0VHhSZWNlaXB0QnlUeEhhc2gSFC5ycGNwYi5UeEhhc2hSZXF1",
            "ZXN0GhAucnBjcGIuVHhSZWNlaXB0IiSC0+STAh4SHC9nZXRUeFJlY2VpcHRC",
            "eVR4SGFzaC97aGFzaH0SbwoOR2V0QmxvY2tCeUhhc2gSHC5ycGNwYi5HZXRC",
            "bG9ja0J5SGFzaFJlcXVlc3QaFC5ycGNwYi5CbG9ja1Jlc3BvbnNlIimC0+ST",
            "AiMSIS9nZXRCbG9ja0J5SGFzaC97aGFzaH0ve2NvbXBsZXRlfRJ3ChBHZXRC",
            "bG9ja0J5TnVtYmVyEh4ucnBjcGIuR2V0QmxvY2tCeU51bWJlclJlcXVlc3Qa",
            "FC5ycGNwYi5CbG9ja1Jlc3BvbnNlIi2C0+STAicSJS9nZXRCbG9ja0J5TnVt",
            "YmVyL3tudW1iZXJ9L3tjb21wbGV0ZX0SZQoKR2V0QWNjb3VudBIYLnJwY3Bi",
            "LkdldEFjY291bnRSZXF1ZXN0Gg4ucnBjcGIuQWNjb3VudCItgtPkkwInEiUv",
            "Z2V0QWNjb3VudC97bmFtZX0ve2J5X2xvbmdlc3RfY2hhaW59Eo8BCg9HZXRU",
            "b2tlbkJhbGFuY2USHS5ycGNwYi5HZXRUb2tlbkJhbGFuY2VSZXF1ZXN0Gh4u",
            "cnBjcGIuR2V0VG9rZW5CYWxhbmNlUmVzcG9uc2UiPYLT5JMCNxI1L2dldFRv",
            "a2VuQmFsYW5jZS97YWNjb3VudH0ve3Rva2VufS97YnlfbG9uZ2VzdF9jaGFp",
            "bn0SmAEKEkdldFRva2VuNzIxQmFsYW5jZRIdLnJwY3BiLkdldFRva2VuQmFs",
            "YW5jZVJlcXVlc3QaIS5ycGNwYi5HZXRUb2tlbjcyMUJhbGFuY2VSZXNwb25z",
            "ZSJAgtPkkwI6EjgvZ2V0VG9rZW43MjFCYWxhbmNlL3thY2NvdW50fS97dG9r",
            "ZW59L3tieV9sb25nZXN0X2NoYWlufRKcAQoTR2V0VG9rZW43MjFNZXRhZGF0",
            "YRIdLnJwY3BiLkdldFRva2VuNzIxSW5mb1JlcXVlc3QaIi5ycGNwYi5HZXRU",
            "b2tlbjcyMU1ldGFkYXRhUmVzcG9uc2UiQoLT5JMCPBI6L2dldFRva2VuNzIx",
            "TWV0YWRhdGEve3Rva2VufS97dG9rZW5faWR9L3tieV9sb25nZXN0X2NoYWlu",
            "fRKTAQoQR2V0VG9rZW43MjFPd25lchIdLnJwY3BiLkdldFRva2VuNzIxSW5m",
            "b1JlcXVlc3QaHy5ycGNwYi5HZXRUb2tlbjcyMU93bmVyUmVzcG9uc2UiP4LT",
            "5JMCORI3L2dldFRva2VuNzIxT3duZXIve3Rva2VufS97dG9rZW5faWR9L3ti",
            "eV9sb25nZXN0X2NoYWlufRJRCgtHZXRHYXNSYXRpbxITLnJwY3BiLkVtcHR5",
            "UmVxdWVzdBoXLnJwY3BiLkdhc1JhdGlvUmVzcG9uc2UiFILT5JMCDhIML2dl",
            "dEdhc1JhdGlvEpcBChNHZXRQcm9kdWNlclZvdGVJbmZvEiEucnBjcGIuR2V0",
            "UHJvZHVjZXJWb3RlSW5mb1JlcXVlc3QaIi5ycGNwYi5HZXRQcm9kdWNlclZv",
            "dGVJbmZvUmVzcG9uc2UiOYLT5JMCMxIxL2dldFByb2R1Y2VyVm90ZUluZm8v",
            "e2FjY291bnR9L3tieV9sb25nZXN0X2NoYWlufRJnCgtHZXRDb250cmFjdBIZ",
            "LnJwY3BiLkdldENvbnRyYWN0UmVxdWVzdBoPLnJwY3BiLkNvbnRyYWN0IiyC",
            "0+STAiYSJC9nZXRDb250cmFjdC97aWR9L3tieV9sb25nZXN0X2NoYWlufRJ5",
            "ChJHZXRDb250cmFjdFN0b3JhZ2USIC5ycGNwYi5HZXRDb250cmFjdFN0b3Jh",
            "Z2VSZXF1ZXN0GiEucnBjcGIuR2V0Q29udHJhY3RTdG9yYWdlUmVzcG9uc2Ui",
            "HoLT5JMCGCITL2dldENvbnRyYWN0U3RvcmFnZToBKhKNAQoXR2V0QmF0Y2hD",
            "b250cmFjdFN0b3JhZ2USJS5ycGNwYi5HZXRCYXRjaENvbnRyYWN0U3RvcmFn",
            "ZVJlcXVlc3QaJi5ycGNwYi5HZXRCYXRjaENvbnRyYWN0U3RvcmFnZVJlc3Bv",
            "bnNlIiOC0+STAh0iGC9nZXRCYXRjaENvbnRyYWN0U3RvcmFnZToBKhKRAQoY",
            "R2V0Q29udHJhY3RTdG9yYWdlRmllbGRzEiYucnBjcGIuR2V0Q29udHJhY3RT",
            "dG9yYWdlRmllbGRzUmVxdWVzdBonLnJwY3BiLkdldENvbnRyYWN0U3RvcmFn",
            "ZUZpZWxkc1Jlc3BvbnNlIiSC0+STAh4iGS9nZXRDb250cmFjdFN0b3JhZ2VG",
            "aWVsZHM6ASoSYAoPU2VuZFRyYW5zYWN0aW9uEhkucnBjcGIuVHJhbnNhY3Rp",
            "b25SZXF1ZXN0Gh4ucnBjcGIuU2VuZFRyYW5zYWN0aW9uUmVzcG9uc2UiEoLT",
            "5JMCDCIHL3NlbmRUeDoBKhJSCg9FeGVjVHJhbnNhY3Rpb24SGS5ycGNwYi5U",
            "cmFuc2FjdGlvblJlcXVlc3QaEC5ycGNwYi5UeFJlY2VpcHQiEoLT5JMCDCIH",
            "L2V4ZWNUeDoBKhJXCglTdWJzY3JpYmUSFy5ycGNwYi5TdWJzY3JpYmVSZXF1",
            "ZXN0GhgucnBjcGIuU3Vic2NyaWJlUmVzcG9uc2UiFYLT5JMCDyIKL3N1YnNj",
            "cmliZToBKjABEm4KDUdldFZvdGVyQm9udXMSGC5ycGNwYi5HZXRBY2NvdW50",
            "UmVxdWVzdBoRLnJwY3BiLlZvdGVyQm9udXMiMILT5JMCKhIoL2dldFZvdGVy",
            "Qm9udXMve25hbWV9L3tieV9sb25nZXN0X2NoYWlufRJ6ChFHZXRDYW5kaWRh",
            "dGVCb251cxIYLnJwY3BiLkdldEFjY291bnRSZXF1ZXN0GhUucnBjcGIuQ2Fu",
            "ZGlkYXRlQm9udXMiNILT5JMCLhIsL2dldENhbmRpZGF0ZUJvbnVzL3tuYW1l",
            "fS97YnlfbG9uZ2VzdF9jaGFpbn0SbwoMR2V0VG9rZW5JbmZvEhoucnBjcGIu",
            "R2V0VG9rZW5JbmZvUmVxdWVzdBoQLnJwY3BiLlRva2VuSW5mbyIxgtPkkwIr",
            "EikvZ2V0VG9rZW5JbmZvL3tzeW1ib2x9L3tieV9sb25nZXN0X2NoYWlufWIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.EmptyRequest), global::IOSTSdk.Rpcpb.EmptyRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.NetworkInfo), global::IOSTSdk.Rpcpb.NetworkInfo.Parser, new[]{ "Id", "PeerCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.RAMInfoResponse), global::IOSTSdk.Rpcpb.RAMInfoResponse.Parser, new[]{ "UsedRam", "AvailableRam", "TotalRam", "SellPrice", "BuyPrice" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.NodeInfoResponse), global::IOSTSdk.Rpcpb.NodeInfoResponse.Parser, new[]{ "BuildTime", "GitHash", "Mode", "Network", "CodeVersion", "ServerTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.AmountLimit), global::IOSTSdk.Rpcpb.AmountLimit.Parser, new[]{ "Token", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.Action), global::IOSTSdk.Rpcpb.Action.Parser, new[]{ "Contract", "ActionName", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.TxReceipt), global::IOSTSdk.Rpcpb.TxReceipt.Parser, new[]{ "TxHash", "GasUsage", "RamUsage", "StatusCode", "Message", "Returns", "Receipts" }, null, new[]{ typeof(global::IOSTSdk.Rpcpb.TxReceipt.Types.StatusCode) }, new pbr::GeneratedClrTypeInfo[] { null, new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.TxReceipt.Types.Receipt), global::IOSTSdk.Rpcpb.TxReceipt.Types.Receipt.Parser, new[]{ "FuncName", "Content" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.Transaction), global::IOSTSdk.Rpcpb.Transaction.Parser, new[]{ "Hash", "Time", "Expiration", "GasRatio", "GasLimit", "Delay", "ChainId", "Actions", "Signers", "Publisher", "ReferredTx", "AmountLimit", "TxReceipt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.TransactionResponse), global::IOSTSdk.Rpcpb.TransactionResponse.Parser, new[]{ "Status", "Transaction", "BlockNumber" }, null, new[]{ typeof(global::IOSTSdk.Rpcpb.TransactionResponse.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.Signature), global::IOSTSdk.Rpcpb.Signature.Parser, new[]{ "Algorithm", "Signature_", "PublicKey" }, null, new[]{ typeof(global::IOSTSdk.Rpcpb.Signature.Types.Algorithm) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.TransactionRequest), global::IOSTSdk.Rpcpb.TransactionRequest.Parser, new[]{ "Time", "Expiration", "GasRatio", "GasLimit", "Delay", "ChainId", "Actions", "AmountLimit", "Signers", "Signatures", "Publisher", "PublisherSigs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.Block), global::IOSTSdk.Rpcpb.Block.Parser, new[]{ "Hash", "Version", "ParentHash", "TxMerkleHash", "TxReceiptMerkleHash", "Number", "Witness", "Time", "GasUsage", "TxCount", "Info", "Transactions" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.Block.Types.Info), global::IOSTSdk.Rpcpb.Block.Types.Info.Parser, new[]{ "Mode", "Thread", "BatchIndex" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.BlockResponse), global::IOSTSdk.Rpcpb.BlockResponse.Parser, new[]{ "Status", "Block" }, null, new[]{ typeof(global::IOSTSdk.Rpcpb.BlockResponse.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.ChainInfoResponse), global::IOSTSdk.Rpcpb.ChainInfoResponse.Parser, new[]{ "NetName", "ProtocolVersion", "ChainId", "HeadBlock", "HeadBlockHash", "LibBlock", "LibBlockHash", "WitnessList", "LibWitnessList", "PendingWitnessList", "HeadBlockTime", "LibBlockTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.TxHashRequest), global::IOSTSdk.Rpcpb.TxHashRequest.Parser, new[]{ "Hash" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.GetBlockByHashRequest), global::IOSTSdk.Rpcpb.GetBlockByHashRequest.Parser, new[]{ "Hash", "Complete" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.GetBlockByNumberRequest), global::IOSTSdk.Rpcpb.GetBlockByNumberRequest.Parser, new[]{ "Number", "Complete" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.FrozenBalance), global::IOSTSdk.Rpcpb.FrozenBalance.Parser, new[]{ "Amount", "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.VoteInfo), global::IOSTSdk.Rpcpb.VoteInfo.Parser, new[]{ "Option", "Votes", "ClearedVotes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.GetProducerVoteInfoRequest), global::IOSTSdk.Rpcpb.GetProducerVoteInfoRequest.Parser, new[]{ "Account", "ByLongestChain" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.GetProducerVoteInfoResponse), global::IOSTSdk.Rpcpb.GetProducerVoteInfoResponse.Parser, new[]{ "Pubkey", "Loc", "Url", "NetId", "IsProducer", "Status", "Online", "Votes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.GasRatioResponse), global::IOSTSdk.Rpcpb.GasRatioResponse.Parser, new[]{ "LowestGasRatio", "MedianGasRatio" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.Account), global::IOSTSdk.Rpcpb.Account.Parser, new[]{ "Name", "Balance", "GasInfo", "RamInfo", "Permissions", "Groups", "FrozenBalances", "VoteInfos" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.Account.Types.PledgeInfo), global::IOSTSdk.Rpcpb.Account.Types.PledgeInfo.Parser, new[]{ "Pledger", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.Account.Types.GasInfo), global::IOSTSdk.Rpcpb.Account.Types.GasInfo.Parser, new[]{ "CurrentTotal", "TransferableGas", "PledgeGas", "IncreaseSpeed", "Limit", "PledgedInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.Account.Types.RAMInfo), global::IOSTSdk.Rpcpb.Account.Types.RAMInfo.Parser, new[]{ "Available", "Used", "Total" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.Account.Types.Item), global::IOSTSdk.Rpcpb.Account.Types.Item.Parser, new[]{ "Id", "IsKeyPair", "Weight", "Permission" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.Account.Types.Group), global::IOSTSdk.Rpcpb.Account.Types.Group.Parser, new[]{ "Name", "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.Account.Types.Permission), global::IOSTSdk.Rpcpb.Account.Types.Permission.Parser, new[]{ "Name", "GroupNames", "Items", "Threshold" }, null, null, null),
            null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.GetAccountRequest), global::IOSTSdk.Rpcpb.GetAccountRequest.Parser, new[]{ "Name", "ByLongestChain" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.Contract), global::IOSTSdk.Rpcpb.Contract.Parser, new[]{ "Id", "Code", "Language", "Version", "Abis" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.Contract.Types.ABI), global::IOSTSdk.Rpcpb.Contract.Types.ABI.Parser, new[]{ "Name", "Args", "AmountLimit" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.GetContractRequest), global::IOSTSdk.Rpcpb.GetContractRequest.Parser, new[]{ "Id", "ByLongestChain" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.GetContractStorageRequest), global::IOSTSdk.Rpcpb.GetContractStorageRequest.Parser, new[]{ "Id", "Key", "Field", "ByLongestChain" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.GetContractStorageResponse), global::IOSTSdk.Rpcpb.GetContractStorageResponse.Parser, new[]{ "Data", "BlockHash", "BlockNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.GetBatchContractStorageRequest), global::IOSTSdk.Rpcpb.GetBatchContractStorageRequest.Parser, new[]{ "Id", "KeyFields", "ByLongestChain" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.GetBatchContractStorageRequest.Types.KeyField), global::IOSTSdk.Rpcpb.GetBatchContractStorageRequest.Types.KeyField.Parser, new[]{ "Key", "Field" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.GetBatchContractStorageResponse), global::IOSTSdk.Rpcpb.GetBatchContractStorageResponse.Parser, new[]{ "Datas", "BlockHash", "BlockNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.GetContractStorageFieldsRequest), global::IOSTSdk.Rpcpb.GetContractStorageFieldsRequest.Parser, new[]{ "Id", "Key", "ByLongestChain" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.GetContractStorageFieldsResponse), global::IOSTSdk.Rpcpb.GetContractStorageFieldsResponse.Parser, new[]{ "Fields", "BlockHash", "BlockNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.SendTransactionResponse), global::IOSTSdk.Rpcpb.SendTransactionResponse.Parser, new[]{ "Hash", "PreTxReceipt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.GetTokenBalanceResponse), global::IOSTSdk.Rpcpb.GetTokenBalanceResponse.Parser, new[]{ "Balance", "FrozenBalances" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.GetTokenBalanceRequest), global::IOSTSdk.Rpcpb.GetTokenBalanceRequest.Parser, new[]{ "Account", "Token", "ByLongestChain" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.GetToken721BalanceResponse), global::IOSTSdk.Rpcpb.GetToken721BalanceResponse.Parser, new[]{ "Balance", "TokenIDs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.GetToken721InfoRequest), global::IOSTSdk.Rpcpb.GetToken721InfoRequest.Parser, new[]{ "Token", "TokenId", "ByLongestChain" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.GetToken721MetadataResponse), global::IOSTSdk.Rpcpb.GetToken721MetadataResponse.Parser, new[]{ "Metadata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.GetToken721OwnerResponse), global::IOSTSdk.Rpcpb.GetToken721OwnerResponse.Parser, new[]{ "Owner" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.Event), global::IOSTSdk.Rpcpb.Event.Parser, new[]{ "Topic", "Data", "Time" }, null, new[]{ typeof(global::IOSTSdk.Rpcpb.Event.Types.Topic) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.SubscribeRequest), global::IOSTSdk.Rpcpb.SubscribeRequest.Parser, new[]{ "Topics", "Filter" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.SubscribeRequest.Types.Filter), global::IOSTSdk.Rpcpb.SubscribeRequest.Types.Filter.Parser, new[]{ "ContractId" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.SubscribeResponse), global::IOSTSdk.Rpcpb.SubscribeResponse.Parser, new[]{ "Event" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.VoterBonus), global::IOSTSdk.Rpcpb.VoterBonus.Parser, new[]{ "Bonus", "Detail" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.CandidateBonus), global::IOSTSdk.Rpcpb.CandidateBonus.Parser, new[]{ "Bonus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.GetTokenInfoRequest), global::IOSTSdk.Rpcpb.GetTokenInfoRequest.Parser, new[]{ "Symbol", "ByLongestChain" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IOSTSdk.Rpcpb.TokenInfo), global::IOSTSdk.Rpcpb.TokenInfo.Parser, new[]{ "Symbol", "FullName", "Issuer", "TotalSupply", "CurrentSupply", "Decimal", "CanTransfer" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// The message defines an empty request.
  /// </summary>
  public sealed partial class EmptyRequest : pb::IMessage<EmptyRequest> {
    private static readonly pb::MessageParser<EmptyRequest> _parser = new pb::MessageParser<EmptyRequest>(() => new EmptyRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EmptyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyRequest(EmptyRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyRequest Clone() {
      return new EmptyRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EmptyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EmptyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EmptyRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// The message defines network connection information.
  /// </summary>
  public sealed partial class NetworkInfo : pb::IMessage<NetworkInfo> {
    private static readonly pb::MessageParser<NetworkInfo> _parser = new pb::MessageParser<NetworkInfo>(() => new NetworkInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetworkInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkInfo(NetworkInfo other) : this() {
      id_ = other.id_;
      peerCount_ = other.peerCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkInfo Clone() {
      return new NetworkInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// local network ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "peer_count" field.</summary>
    public const int PeerCountFieldNumber = 2;
    private int peerCount_;
    /// <summary>
    /// peer connection count
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PeerCount {
      get { return peerCount_; }
      set {
        peerCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetworkInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetworkInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (PeerCount != other.PeerCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (PeerCount != 0) hash ^= PeerCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (PeerCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PeerCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (PeerCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PeerCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetworkInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.PeerCount != 0) {
        PeerCount = other.PeerCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            PeerCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message containing blockchain's ram information.
  /// </summary>
  public sealed partial class RAMInfoResponse : pb::IMessage<RAMInfoResponse> {
    private static readonly pb::MessageParser<RAMInfoResponse> _parser = new pb::MessageParser<RAMInfoResponse>(() => new RAMInfoResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RAMInfoResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RAMInfoResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RAMInfoResponse(RAMInfoResponse other) : this() {
      usedRam_ = other.usedRam_;
      availableRam_ = other.availableRam_;
      totalRam_ = other.totalRam_;
      sellPrice_ = other.sellPrice_;
      buyPrice_ = other.buyPrice_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RAMInfoResponse Clone() {
      return new RAMInfoResponse(this);
    }

    /// <summary>Field number for the "used_ram" field.</summary>
    public const int UsedRamFieldNumber = 1;
    private long usedRam_;
    /// <summary>
    /// how many bytes have been used
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UsedRam {
      get { return usedRam_; }
      set {
        usedRam_ = value;
      }
    }

    /// <summary>Field number for the "available_ram" field.</summary>
    public const int AvailableRamFieldNumber = 2;
    private long availableRam_;
    /// <summary>
    /// how many bytes have not been used
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AvailableRam {
      get { return availableRam_; }
      set {
        availableRam_ = value;
      }
    }

    /// <summary>Field number for the "total_ram" field.</summary>
    public const int TotalRamFieldNumber = 3;
    private long totalRam_;
    /// <summary>
    /// total ram byte
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalRam {
      get { return totalRam_; }
      set {
        totalRam_ = value;
      }
    }

    /// <summary>Field number for the "sell_price" field.</summary>
    public const int SellPriceFieldNumber = 4;
    private double sellPrice_;
    /// <summary>
    /// User can sell NUM bytes RAM to system to get `NUM * sell_price` IOSTs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SellPrice {
      get { return sellPrice_; }
      set {
        sellPrice_ = value;
      }
    }

    /// <summary>Field number for the "buy_price" field.</summary>
    public const int BuyPriceFieldNumber = 5;
    private double buyPrice_;
    /// <summary>
    /// User can spend approximate `NUM * buy_price` IOSTs for NUM bytes RAM
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BuyPrice {
      get { return buyPrice_; }
      set {
        buyPrice_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RAMInfoResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RAMInfoResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UsedRam != other.UsedRam) return false;
      if (AvailableRam != other.AvailableRam) return false;
      if (TotalRam != other.TotalRam) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SellPrice, other.SellPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BuyPrice, other.BuyPrice)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UsedRam != 0L) hash ^= UsedRam.GetHashCode();
      if (AvailableRam != 0L) hash ^= AvailableRam.GetHashCode();
      if (TotalRam != 0L) hash ^= TotalRam.GetHashCode();
      if (SellPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SellPrice);
      if (BuyPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BuyPrice);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UsedRam != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UsedRam);
      }
      if (AvailableRam != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(AvailableRam);
      }
      if (TotalRam != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TotalRam);
      }
      if (SellPrice != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(SellPrice);
      }
      if (BuyPrice != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(BuyPrice);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UsedRam != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UsedRam);
      }
      if (AvailableRam != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AvailableRam);
      }
      if (TotalRam != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalRam);
      }
      if (SellPrice != 0D) {
        size += 1 + 8;
      }
      if (BuyPrice != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RAMInfoResponse other) {
      if (other == null) {
        return;
      }
      if (other.UsedRam != 0L) {
        UsedRam = other.UsedRam;
      }
      if (other.AvailableRam != 0L) {
        AvailableRam = other.AvailableRam;
      }
      if (other.TotalRam != 0L) {
        TotalRam = other.TotalRam;
      }
      if (other.SellPrice != 0D) {
        SellPrice = other.SellPrice;
      }
      if (other.BuyPrice != 0D) {
        BuyPrice = other.BuyPrice;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UsedRam = input.ReadInt64();
            break;
          }
          case 16: {
            AvailableRam = input.ReadInt64();
            break;
          }
          case 24: {
            TotalRam = input.ReadInt64();
            break;
          }
          case 33: {
            SellPrice = input.ReadDouble();
            break;
          }
          case 41: {
            BuyPrice = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message containing the node's information.
  /// </summary>
  public sealed partial class NodeInfoResponse : pb::IMessage<NodeInfoResponse> {
    private static readonly pb::MessageParser<NodeInfoResponse> _parser = new pb::MessageParser<NodeInfoResponse>(() => new NodeInfoResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeInfoResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeInfoResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeInfoResponse(NodeInfoResponse other) : this() {
      buildTime_ = other.buildTime_;
      gitHash_ = other.gitHash_;
      mode_ = other.mode_;
      network_ = other.network_ != null ? other.network_.Clone() : null;
      codeVersion_ = other.codeVersion_;
      serverTime_ = other.serverTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeInfoResponse Clone() {
      return new NodeInfoResponse(this);
    }

    /// <summary>Field number for the "build_time" field.</summary>
    public const int BuildTimeFieldNumber = 1;
    private string buildTime_ = "";
    /// <summary>
    /// build time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BuildTime {
      get { return buildTime_; }
      set {
        buildTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "git_hash" field.</summary>
    public const int GitHashFieldNumber = 2;
    private string gitHash_ = "";
    /// <summary>
    /// git hash
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GitHash {
      get { return gitHash_; }
      set {
        gitHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 3;
    private string mode_ = "";
    /// <summary>
    /// node mode
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mode {
      get { return mode_; }
      set {
        mode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "network" field.</summary>
    public const int NetworkFieldNumber = 4;
    private global::IOSTSdk.Rpcpb.NetworkInfo network_;
    /// <summary>
    /// network connection information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IOSTSdk.Rpcpb.NetworkInfo Network {
      get { return network_; }
      set {
        network_ = value;
      }
    }

    /// <summary>Field number for the "code_version" field.</summary>
    public const int CodeVersionFieldNumber = 5;
    private string codeVersion_ = "";
    /// <summary>
    /// code version string
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CodeVersion {
      get { return codeVersion_; }
      set {
        codeVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "server_time" field.</summary>
    public const int ServerTimeFieldNumber = 6;
    private long serverTime_;
    /// <summary>
    /// server time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ServerTime {
      get { return serverTime_; }
      set {
        serverTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeInfoResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeInfoResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BuildTime != other.BuildTime) return false;
      if (GitHash != other.GitHash) return false;
      if (Mode != other.Mode) return false;
      if (!object.Equals(Network, other.Network)) return false;
      if (CodeVersion != other.CodeVersion) return false;
      if (ServerTime != other.ServerTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BuildTime.Length != 0) hash ^= BuildTime.GetHashCode();
      if (GitHash.Length != 0) hash ^= GitHash.GetHashCode();
      if (Mode.Length != 0) hash ^= Mode.GetHashCode();
      if (network_ != null) hash ^= Network.GetHashCode();
      if (CodeVersion.Length != 0) hash ^= CodeVersion.GetHashCode();
      if (ServerTime != 0L) hash ^= ServerTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BuildTime.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BuildTime);
      }
      if (GitHash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GitHash);
      }
      if (Mode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Mode);
      }
      if (network_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Network);
      }
      if (CodeVersion.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CodeVersion);
      }
      if (ServerTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(ServerTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BuildTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BuildTime);
      }
      if (GitHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GitHash);
      }
      if (Mode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mode);
      }
      if (network_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Network);
      }
      if (CodeVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CodeVersion);
      }
      if (ServerTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ServerTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeInfoResponse other) {
      if (other == null) {
        return;
      }
      if (other.BuildTime.Length != 0) {
        BuildTime = other.BuildTime;
      }
      if (other.GitHash.Length != 0) {
        GitHash = other.GitHash;
      }
      if (other.Mode.Length != 0) {
        Mode = other.Mode;
      }
      if (other.network_ != null) {
        if (network_ == null) {
          Network = new global::IOSTSdk.Rpcpb.NetworkInfo();
        }
        Network.MergeFrom(other.Network);
      }
      if (other.CodeVersion.Length != 0) {
        CodeVersion = other.CodeVersion;
      }
      if (other.ServerTime != 0L) {
        ServerTime = other.ServerTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BuildTime = input.ReadString();
            break;
          }
          case 18: {
            GitHash = input.ReadString();
            break;
          }
          case 26: {
            Mode = input.ReadString();
            break;
          }
          case 34: {
            if (network_ == null) {
              Network = new global::IOSTSdk.Rpcpb.NetworkInfo();
            }
            input.ReadMessage(Network);
            break;
          }
          case 42: {
            CodeVersion = input.ReadString();
            break;
          }
          case 48: {
            ServerTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message defines transaction amount limit struct.
  /// </summary>
  public sealed partial class AmountLimit : pb::IMessage<AmountLimit> {
    private static readonly pb::MessageParser<AmountLimit> _parser = new pb::MessageParser<AmountLimit>(() => new AmountLimit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AmountLimit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AmountLimit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AmountLimit(AmountLimit other) : this() {
      token_ = other.token_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AmountLimit Clone() {
      return new AmountLimit(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    /// <summary>
    /// token name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    /// <summary>
    /// limit value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AmountLimit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AmountLimit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AmountLimit other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message defines transaction action struct.
  /// </summary>
  public sealed partial class Action : pb::IMessage<Action> {
    private static readonly pb::MessageParser<Action> _parser = new pb::MessageParser<Action>(() => new Action());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Action> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action(Action other) : this() {
      contract_ = other.contract_;
      actionName_ = other.actionName_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action Clone() {
      return new Action(this);
    }

    /// <summary>Field number for the "contract" field.</summary>
    public const int ContractFieldNumber = 1;
    private string contract_ = "";
    /// <summary>
    /// contract name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Contract {
      get { return contract_; }
      set {
        contract_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "action_name" field.</summary>
    public const int ActionNameFieldNumber = 2;
    private string actionName_ = "";
    /// <summary>
    /// action name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActionName {
      get { return actionName_; }
      set {
        actionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private string data_ = "";
    /// <summary>
    /// data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Action);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Action other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Contract != other.Contract) return false;
      if (ActionName != other.ActionName) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Contract.Length != 0) hash ^= Contract.GetHashCode();
      if (ActionName.Length != 0) hash ^= ActionName.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Contract.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Contract);
      }
      if (ActionName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ActionName);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Contract.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Contract);
      }
      if (ActionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActionName);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Action other) {
      if (other == null) {
        return;
      }
      if (other.Contract.Length != 0) {
        Contract = other.Contract;
      }
      if (other.ActionName.Length != 0) {
        ActionName = other.ActionName;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Contract = input.ReadString();
            break;
          }
          case 18: {
            ActionName = input.ReadString();
            break;
          }
          case 26: {
            Data = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message defines the transaction receipt struct.
  /// </summary>
  public sealed partial class TxReceipt : pb::IMessage<TxReceipt> {
    private static readonly pb::MessageParser<TxReceipt> _parser = new pb::MessageParser<TxReceipt>(() => new TxReceipt());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TxReceipt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TxReceipt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TxReceipt(TxReceipt other) : this() {
      txHash_ = other.txHash_;
      gasUsage_ = other.gasUsage_;
      ramUsage_ = other.ramUsage_.Clone();
      statusCode_ = other.statusCode_;
      message_ = other.message_;
      returns_ = other.returns_.Clone();
      receipts_ = other.receipts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TxReceipt Clone() {
      return new TxReceipt(this);
    }

    /// <summary>Field number for the "tx_hash" field.</summary>
    public const int TxHashFieldNumber = 1;
    private string txHash_ = "";
    /// <summary>
    /// transaction hash
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TxHash {
      get { return txHash_; }
      set {
        txHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gas_usage" field.</summary>
    public const int GasUsageFieldNumber = 2;
    private double gasUsage_;
    /// <summary>
    /// gas usage
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GasUsage {
      get { return gasUsage_; }
      set {
        gasUsage_ = value;
      }
    }

    /// <summary>Field number for the "ram_usage" field.</summary>
    public const int RamUsageFieldNumber = 3;
    private static readonly pbc::MapField<string, long>.Codec _map_ramUsage_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForInt64(16), 26);
    private readonly pbc::MapField<string, long> ramUsage_ = new pbc::MapField<string, long>();
    /// <summary>
    /// ram usage
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> RamUsage {
      get { return ramUsage_; }
    }

    /// <summary>Field number for the "status_code" field.</summary>
    public const int StatusCodeFieldNumber = 4;
    private global::IOSTSdk.Rpcpb.TxReceipt.Types.StatusCode statusCode_ = 0;
    /// <summary>
    /// status code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IOSTSdk.Rpcpb.TxReceipt.Types.StatusCode StatusCode {
      get { return statusCode_; }
      set {
        statusCode_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 5;
    private string message_ = "";
    /// <summary>
    /// message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "returns" field.</summary>
    public const int ReturnsFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_returns_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> returns_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// transaction returns
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Returns {
      get { return returns_; }
    }

    /// <summary>Field number for the "receipts" field.</summary>
    public const int ReceiptsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::IOSTSdk.Rpcpb.TxReceipt.Types.Receipt> _repeated_receipts_codec
        = pb::FieldCodec.ForMessage(58, global::IOSTSdk.Rpcpb.TxReceipt.Types.Receipt.Parser);
    private readonly pbc::RepeatedField<global::IOSTSdk.Rpcpb.TxReceipt.Types.Receipt> receipts_ = new pbc::RepeatedField<global::IOSTSdk.Rpcpb.TxReceipt.Types.Receipt>();
    /// <summary>
    /// transaction receipts
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IOSTSdk.Rpcpb.TxReceipt.Types.Receipt> Receipts {
      get { return receipts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TxReceipt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TxReceipt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TxHash != other.TxHash) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GasUsage, other.GasUsage)) return false;
      if (!RamUsage.Equals(other.RamUsage)) return false;
      if (StatusCode != other.StatusCode) return false;
      if (Message != other.Message) return false;
      if(!returns_.Equals(other.returns_)) return false;
      if(!receipts_.Equals(other.receipts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TxHash.Length != 0) hash ^= TxHash.GetHashCode();
      if (GasUsage != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GasUsage);
      hash ^= RamUsage.GetHashCode();
      if (StatusCode != 0) hash ^= StatusCode.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      hash ^= returns_.GetHashCode();
      hash ^= receipts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TxHash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TxHash);
      }
      if (GasUsage != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(GasUsage);
      }
      ramUsage_.WriteTo(output, _map_ramUsage_codec);
      if (StatusCode != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) StatusCode);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Message);
      }
      returns_.WriteTo(output, _repeated_returns_codec);
      receipts_.WriteTo(output, _repeated_receipts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TxHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TxHash);
      }
      if (GasUsage != 0D) {
        size += 1 + 8;
      }
      size += ramUsage_.CalculateSize(_map_ramUsage_codec);
      if (StatusCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StatusCode);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += returns_.CalculateSize(_repeated_returns_codec);
      size += receipts_.CalculateSize(_repeated_receipts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TxReceipt other) {
      if (other == null) {
        return;
      }
      if (other.TxHash.Length != 0) {
        TxHash = other.TxHash;
      }
      if (other.GasUsage != 0D) {
        GasUsage = other.GasUsage;
      }
      ramUsage_.Add(other.ramUsage_);
      if (other.StatusCode != 0) {
        StatusCode = other.StatusCode;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      returns_.Add(other.returns_);
      receipts_.Add(other.receipts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TxHash = input.ReadString();
            break;
          }
          case 17: {
            GasUsage = input.ReadDouble();
            break;
          }
          case 26: {
            ramUsage_.AddEntriesFrom(input, _map_ramUsage_codec);
            break;
          }
          case 32: {
            StatusCode = (global::IOSTSdk.Rpcpb.TxReceipt.Types.StatusCode) input.ReadEnum();
            break;
          }
          case 42: {
            Message = input.ReadString();
            break;
          }
          case 50: {
            returns_.AddEntriesFrom(input, _repeated_returns_codec);
            break;
          }
          case 58: {
            receipts_.AddEntriesFrom(input, _repeated_receipts_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TxReceipt message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The enumeration defines transaction receipt status code.
      /// </summary>
      public enum StatusCode {
        /// <summary>
        /// success
        /// </summary>
        [pbr::OriginalName("SUCCESS")] Success = 0,
        /// <summary>
        /// run out of gas
        /// </summary>
        [pbr::OriginalName("GAS_RUN_OUT")] GasRunOut = 1,
        /// <summary>
        /// balance not enough
        /// </summary>
        [pbr::OriginalName("BALANCE_NOT_ENOUGH")] BalanceNotEnough = 2,
        /// <summary>
        /// wrong parameter
        /// </summary>
        [pbr::OriginalName("WRONG_PARAMETER")] WrongParameter = 3,
        /// <summary>
        /// runtime error
        /// </summary>
        [pbr::OriginalName("RUNTIME_ERROR")] RuntimeError = 4,
        /// <summary>
        /// run out of time
        /// </summary>
        [pbr::OriginalName("TIMEOUT")] Timeout = 5,
        /// <summary>
        /// wrong transaction format
        /// </summary>
        [pbr::OriginalName("WRONG_TX_FORMAT")] WrongTxFormat = 6,
        /// <summary>
        /// more than one set code action in a transaction
        /// </summary>
        [pbr::OriginalName("DUPLICATE_SET_CODE")] DuplicateSetCode = 7,
        /// <summary>
        /// unknown error
        /// </summary>
        [pbr::OriginalName("UNKNOWN_ERROR")] UnknownError = 8,
      }

      /// <summary>
      /// The message defines transaction execution receipt.
      /// </summary>
      public sealed partial class Receipt : pb::IMessage<Receipt> {
        private static readonly pb::MessageParser<Receipt> _parser = new pb::MessageParser<Receipt>(() => new Receipt());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Receipt> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::IOSTSdk.Rpcpb.TxReceipt.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Receipt() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Receipt(Receipt other) : this() {
          funcName_ = other.funcName_;
          content_ = other.content_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Receipt Clone() {
          return new Receipt(this);
        }

        /// <summary>Field number for the "func_name" field.</summary>
        public const int FuncNameFieldNumber = 1;
        private string funcName_ = "";
        /// <summary>
        /// function name
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FuncName {
          get { return funcName_; }
          set {
            funcName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "content" field.</summary>
        public const int ContentFieldNumber = 2;
        private string content_ = "";
        /// <summary>
        /// content
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Content {
          get { return content_; }
          set {
            content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Receipt);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Receipt other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (FuncName != other.FuncName) return false;
          if (Content != other.Content) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (FuncName.Length != 0) hash ^= FuncName.GetHashCode();
          if (Content.Length != 0) hash ^= Content.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (FuncName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(FuncName);
          }
          if (Content.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Content);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (FuncName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FuncName);
          }
          if (Content.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Receipt other) {
          if (other == null) {
            return;
          }
          if (other.FuncName.Length != 0) {
            FuncName = other.FuncName;
          }
          if (other.Content.Length != 0) {
            Content = other.Content;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                FuncName = input.ReadString();
                break;
              }
              case 18: {
                Content = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// The message defines transaction struct.
  /// </summary>
  public sealed partial class Transaction : pb::IMessage<Transaction> {
    private static readonly pb::MessageParser<Transaction> _parser = new pb::MessageParser<Transaction>(() => new Transaction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Transaction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction(Transaction other) : this() {
      hash_ = other.hash_;
      time_ = other.time_;
      expiration_ = other.expiration_;
      gasRatio_ = other.gasRatio_;
      gasLimit_ = other.gasLimit_;
      delay_ = other.delay_;
      chainId_ = other.chainId_;
      actions_ = other.actions_.Clone();
      signers_ = other.signers_.Clone();
      publisher_ = other.publisher_;
      referredTx_ = other.referredTx_;
      amountLimit_ = other.amountLimit_.Clone();
      txReceipt_ = other.txReceipt_ != null ? other.txReceipt_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction Clone() {
      return new Transaction(this);
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 1;
    private string hash_ = "";
    /// <summary>
    /// transaction hash
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hash {
      get { return hash_; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private long time_;
    /// <summary>
    /// transaction timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "expiration" field.</summary>
    public const int ExpirationFieldNumber = 3;
    private long expiration_;
    /// <summary>
    /// expiration timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Expiration {
      get { return expiration_; }
      set {
        expiration_ = value;
      }
    }

    /// <summary>Field number for the "gas_ratio" field.</summary>
    public const int GasRatioFieldNumber = 4;
    private double gasRatio_;
    /// <summary>
    /// gas gas_ratio
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GasRatio {
      get { return gasRatio_; }
      set {
        gasRatio_ = value;
      }
    }

    /// <summary>Field number for the "gas_limit" field.</summary>
    public const int GasLimitFieldNumber = 5;
    private double gasLimit_;
    /// <summary>
    /// gas limit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GasLimit {
      get { return gasLimit_; }
      set {
        gasLimit_ = value;
      }
    }

    /// <summary>Field number for the "delay" field.</summary>
    public const int DelayFieldNumber = 6;
    private long delay_;
    /// <summary>
    /// delay nanoseconds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Delay {
      get { return delay_; }
      set {
        delay_ = value;
      }
    }

    /// <summary>Field number for the "chain_id" field.</summary>
    public const int ChainIdFieldNumber = 7;
    private uint chainId_;
    /// <summary>
    /// chain id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChainId {
      get { return chainId_; }
      set {
        chainId_ = value;
      }
    }

    /// <summary>Field number for the "actions" field.</summary>
    public const int ActionsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::IOSTSdk.Rpcpb.Action> _repeated_actions_codec
        = pb::FieldCodec.ForMessage(66, global::IOSTSdk.Rpcpb.Action.Parser);
    private readonly pbc::RepeatedField<global::IOSTSdk.Rpcpb.Action> actions_ = new pbc::RepeatedField<global::IOSTSdk.Rpcpb.Action>();
    /// <summary>
    /// action list
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IOSTSdk.Rpcpb.Action> Actions {
      get { return actions_; }
    }

    /// <summary>Field number for the "signers" field.</summary>
    public const int SignersFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_signers_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> signers_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// signer list
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Signers {
      get { return signers_; }
    }

    /// <summary>Field number for the "publisher" field.</summary>
    public const int PublisherFieldNumber = 10;
    private string publisher_ = "";
    /// <summary>
    /// publisher
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Publisher {
      get { return publisher_; }
      set {
        publisher_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "referred_tx" field.</summary>
    public const int ReferredTxFieldNumber = 11;
    private string referredTx_ = "";
    /// <summary>
    /// referred transaction hash
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReferredTx {
      get { return referredTx_; }
      set {
        referredTx_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount_limit" field.</summary>
    public const int AmountLimitFieldNumber = 12;
    private static readonly pb::FieldCodec<global::IOSTSdk.Rpcpb.AmountLimit> _repeated_amountLimit_codec
        = pb::FieldCodec.ForMessage(98, global::IOSTSdk.Rpcpb.AmountLimit.Parser);
    private readonly pbc::RepeatedField<global::IOSTSdk.Rpcpb.AmountLimit> amountLimit_ = new pbc::RepeatedField<global::IOSTSdk.Rpcpb.AmountLimit>();
    /// <summary>
    /// amount limit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IOSTSdk.Rpcpb.AmountLimit> AmountLimit {
      get { return amountLimit_; }
    }

    /// <summary>Field number for the "tx_receipt" field.</summary>
    public const int TxReceiptFieldNumber = 13;
    private global::IOSTSdk.Rpcpb.TxReceipt txReceipt_;
    /// <summary>
    /// transaction receipt
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IOSTSdk.Rpcpb.TxReceipt TxReceipt {
      get { return txReceipt_; }
      set {
        txReceipt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Transaction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Transaction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Hash != other.Hash) return false;
      if (Time != other.Time) return false;
      if (Expiration != other.Expiration) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GasRatio, other.GasRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GasLimit, other.GasLimit)) return false;
      if (Delay != other.Delay) return false;
      if (ChainId != other.ChainId) return false;
      if(!actions_.Equals(other.actions_)) return false;
      if(!signers_.Equals(other.signers_)) return false;
      if (Publisher != other.Publisher) return false;
      if (ReferredTx != other.ReferredTx) return false;
      if(!amountLimit_.Equals(other.amountLimit_)) return false;
      if (!object.Equals(TxReceipt, other.TxReceipt)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (Expiration != 0L) hash ^= Expiration.GetHashCode();
      if (GasRatio != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GasRatio);
      if (GasLimit != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GasLimit);
      if (Delay != 0L) hash ^= Delay.GetHashCode();
      if (ChainId != 0) hash ^= ChainId.GetHashCode();
      hash ^= actions_.GetHashCode();
      hash ^= signers_.GetHashCode();
      if (Publisher.Length != 0) hash ^= Publisher.GetHashCode();
      if (ReferredTx.Length != 0) hash ^= ReferredTx.GetHashCode();
      hash ^= amountLimit_.GetHashCode();
      if (txReceipt_ != null) hash ^= TxReceipt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Hash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Hash);
      }
      if (Time != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Time);
      }
      if (Expiration != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Expiration);
      }
      if (GasRatio != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(GasRatio);
      }
      if (GasLimit != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(GasLimit);
      }
      if (Delay != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Delay);
      }
      if (ChainId != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(ChainId);
      }
      actions_.WriteTo(output, _repeated_actions_codec);
      signers_.WriteTo(output, _repeated_signers_codec);
      if (Publisher.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Publisher);
      }
      if (ReferredTx.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ReferredTx);
      }
      amountLimit_.WriteTo(output, _repeated_amountLimit_codec);
      if (txReceipt_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(TxReceipt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Hash);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (Expiration != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Expiration);
      }
      if (GasRatio != 0D) {
        size += 1 + 8;
      }
      if (GasLimit != 0D) {
        size += 1 + 8;
      }
      if (Delay != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Delay);
      }
      if (ChainId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChainId);
      }
      size += actions_.CalculateSize(_repeated_actions_codec);
      size += signers_.CalculateSize(_repeated_signers_codec);
      if (Publisher.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Publisher);
      }
      if (ReferredTx.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReferredTx);
      }
      size += amountLimit_.CalculateSize(_repeated_amountLimit_codec);
      if (txReceipt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TxReceipt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Transaction other) {
      if (other == null) {
        return;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      if (other.Expiration != 0L) {
        Expiration = other.Expiration;
      }
      if (other.GasRatio != 0D) {
        GasRatio = other.GasRatio;
      }
      if (other.GasLimit != 0D) {
        GasLimit = other.GasLimit;
      }
      if (other.Delay != 0L) {
        Delay = other.Delay;
      }
      if (other.ChainId != 0) {
        ChainId = other.ChainId;
      }
      actions_.Add(other.actions_);
      signers_.Add(other.signers_);
      if (other.Publisher.Length != 0) {
        Publisher = other.Publisher;
      }
      if (other.ReferredTx.Length != 0) {
        ReferredTx = other.ReferredTx;
      }
      amountLimit_.Add(other.amountLimit_);
      if (other.txReceipt_ != null) {
        if (txReceipt_ == null) {
          TxReceipt = new global::IOSTSdk.Rpcpb.TxReceipt();
        }
        TxReceipt.MergeFrom(other.TxReceipt);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Hash = input.ReadString();
            break;
          }
          case 16: {
            Time = input.ReadInt64();
            break;
          }
          case 24: {
            Expiration = input.ReadInt64();
            break;
          }
          case 33: {
            GasRatio = input.ReadDouble();
            break;
          }
          case 41: {
            GasLimit = input.ReadDouble();
            break;
          }
          case 48: {
            Delay = input.ReadInt64();
            break;
          }
          case 56: {
            ChainId = input.ReadUInt32();
            break;
          }
          case 66: {
            actions_.AddEntriesFrom(input, _repeated_actions_codec);
            break;
          }
          case 74: {
            signers_.AddEntriesFrom(input, _repeated_signers_codec);
            break;
          }
          case 82: {
            Publisher = input.ReadString();
            break;
          }
          case 90: {
            ReferredTx = input.ReadString();
            break;
          }
          case 98: {
            amountLimit_.AddEntriesFrom(input, _repeated_amountLimit_codec);
            break;
          }
          case 106: {
            if (txReceipt_ == null) {
              TxReceipt = new global::IOSTSdk.Rpcpb.TxReceipt();
            }
            input.ReadMessage(TxReceipt);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message defines transaction response.
  /// </summary>
  public sealed partial class TransactionResponse : pb::IMessage<TransactionResponse> {
    private static readonly pb::MessageParser<TransactionResponse> _parser = new pb::MessageParser<TransactionResponse>(() => new TransactionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionResponse(TransactionResponse other) : this() {
      status_ = other.status_;
      transaction_ = other.transaction_ != null ? other.transaction_.Clone() : null;
      blockNumber_ = other.blockNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionResponse Clone() {
      return new TransactionResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::IOSTSdk.Rpcpb.TransactionResponse.Types.Status status_ = 0;
    /// <summary>
    /// transaction status
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IOSTSdk.Rpcpb.TransactionResponse.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "transaction" field.</summary>
    public const int TransactionFieldNumber = 2;
    private global::IOSTSdk.Rpcpb.Transaction transaction_;
    /// <summary>
    /// transaction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IOSTSdk.Rpcpb.Transaction Transaction {
      get { return transaction_; }
      set {
        transaction_ = value;
      }
    }

    /// <summary>Field number for the "block_number" field.</summary>
    public const int BlockNumberFieldNumber = 3;
    private long blockNumber_;
    /// <summary>
    /// block number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BlockNumber {
      get { return blockNumber_; }
      set {
        blockNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(Transaction, other.Transaction)) return false;
      if (BlockNumber != other.BlockNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (transaction_ != null) hash ^= Transaction.GetHashCode();
      if (BlockNumber != 0L) hash ^= BlockNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (transaction_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Transaction);
      }
      if (BlockNumber != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(BlockNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (transaction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transaction);
      }
      if (BlockNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BlockNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.transaction_ != null) {
        if (transaction_ == null) {
          Transaction = new global::IOSTSdk.Rpcpb.Transaction();
        }
        Transaction.MergeFrom(other.Transaction);
      }
      if (other.BlockNumber != 0L) {
        BlockNumber = other.BlockNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = (global::IOSTSdk.Rpcpb.TransactionResponse.Types.Status) input.ReadEnum();
            break;
          }
          case 18: {
            if (transaction_ == null) {
              Transaction = new global::IOSTSdk.Rpcpb.Transaction();
            }
            input.ReadMessage(Transaction);
            break;
          }
          case 24: {
            BlockNumber = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TransactionResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The enumeration defines transaction status.
      /// </summary>
      public enum Status {
        /// <summary>
        /// pending in transaction pool
        /// </summary>
        [pbr::OriginalName("PENDING")] Pending = 0,
        /// <summary>
        /// packed in a block that has not been confirmed
        /// </summary>
        [pbr::OriginalName("PACKED")] Packed = 1,
        /// <summary>
        /// packed in a block that is irreversible
        /// </summary>
        [pbr::OriginalName("IRREVERSIBLE")] Irreversible = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// The message defines signature struct.
  /// </summary>
  public sealed partial class Signature : pb::IMessage<Signature> {
    private static readonly pb::MessageParser<Signature> _parser = new pb::MessageParser<Signature>(() => new Signature());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Signature> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Signature() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Signature(Signature other) : this() {
      algorithm_ = other.algorithm_;
      signature_ = other.signature_;
      publicKey_ = other.publicKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Signature Clone() {
      return new Signature(this);
    }

    /// <summary>Field number for the "algorithm" field.</summary>
    public const int AlgorithmFieldNumber = 1;
    private global::IOSTSdk.Rpcpb.Signature.Types.Algorithm algorithm_ = 0;
    /// <summary>
    /// signature algorithm
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IOSTSdk.Rpcpb.Signature.Types.Algorithm Algorithm {
      get { return algorithm_; }
      set {
        algorithm_ = value;
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int Signature_FieldNumber = 2;
    private pb::ByteString signature_ = pb::ByteString.Empty;
    /// <summary>
    /// signature bytes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature_ {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "public_key" field.</summary>
    public const int PublicKeyFieldNumber = 3;
    private pb::ByteString publicKey_ = pb::ByteString.Empty;
    /// <summary>
    /// public key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Signature);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Signature other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Algorithm != other.Algorithm) return false;
      if (Signature_ != other.Signature_) return false;
      if (PublicKey != other.PublicKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Algorithm != 0) hash ^= Algorithm.GetHashCode();
      if (Signature_.Length != 0) hash ^= Signature_.GetHashCode();
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Algorithm != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Algorithm);
      }
      if (Signature_.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Signature_);
      }
      if (PublicKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(PublicKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Algorithm != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Algorithm);
      }
      if (Signature_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature_);
      }
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Signature other) {
      if (other == null) {
        return;
      }
      if (other.Algorithm != 0) {
        Algorithm = other.Algorithm;
      }
      if (other.Signature_.Length != 0) {
        Signature_ = other.Signature_;
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Algorithm = (global::IOSTSdk.Rpcpb.Signature.Types.Algorithm) input.ReadEnum();
            break;
          }
          case 18: {
            Signature_ = input.ReadBytes();
            break;
          }
          case 26: {
            PublicKey = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Signature message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The enumeration defines the signature algorithm.
      /// </summary>
      public enum Algorithm {
        /// <summary>
        /// unknown
        /// </summary>
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        /// <summary>
        /// secp256k1
        /// </summary>
        [pbr::OriginalName("SECP256K1")] Secp256K1 = 1,
        /// <summary>
        /// ed25519
        /// </summary>
        [pbr::OriginalName("ED25519")] Ed25519 = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// The message defines the transaction request.
  /// </summary>
  public sealed partial class TransactionRequest : pb::IMessage<TransactionRequest> {
    private static readonly pb::MessageParser<TransactionRequest> _parser = new pb::MessageParser<TransactionRequest>(() => new TransactionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionRequest(TransactionRequest other) : this() {
      time_ = other.time_;
      expiration_ = other.expiration_;
      gasRatio_ = other.gasRatio_;
      gasLimit_ = other.gasLimit_;
      delay_ = other.delay_;
      chainId_ = other.chainId_;
      actions_ = other.actions_.Clone();
      amountLimit_ = other.amountLimit_.Clone();
      signers_ = other.signers_.Clone();
      signatures_ = other.signatures_.Clone();
      publisher_ = other.publisher_;
      publisherSigs_ = other.publisherSigs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionRequest Clone() {
      return new TransactionRequest(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private long time_;
    /// <summary>
    /// transaction timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "expiration" field.</summary>
    public const int ExpirationFieldNumber = 2;
    private long expiration_;
    /// <summary>
    /// expiration timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Expiration {
      get { return expiration_; }
      set {
        expiration_ = value;
      }
    }

    /// <summary>Field number for the "gas_ratio" field.</summary>
    public const int GasRatioFieldNumber = 3;
    private double gasRatio_;
    /// <summary>
    /// gas price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GasRatio {
      get { return gasRatio_; }
      set {
        gasRatio_ = value;
      }
    }

    /// <summary>Field number for the "gas_limit" field.</summary>
    public const int GasLimitFieldNumber = 4;
    private double gasLimit_;
    /// <summary>
    /// gas limit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GasLimit {
      get { return gasLimit_; }
      set {
        gasLimit_ = value;
      }
    }

    /// <summary>Field number for the "delay" field.</summary>
    public const int DelayFieldNumber = 5;
    private long delay_;
    /// <summary>
    /// delay nanoseconds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Delay {
      get { return delay_; }
      set {
        delay_ = value;
      }
    }

    /// <summary>Field number for the "chain_id" field.</summary>
    public const int ChainIdFieldNumber = 6;
    private uint chainId_;
    /// <summary>
    /// chain id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChainId {
      get { return chainId_; }
      set {
        chainId_ = value;
      }
    }

    /// <summary>Field number for the "actions" field.</summary>
    public const int ActionsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::IOSTSdk.Rpcpb.Action> _repeated_actions_codec
        = pb::FieldCodec.ForMessage(58, global::IOSTSdk.Rpcpb.Action.Parser);
    private readonly pbc::RepeatedField<global::IOSTSdk.Rpcpb.Action> actions_ = new pbc::RepeatedField<global::IOSTSdk.Rpcpb.Action>();
    /// <summary>
    /// action list
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IOSTSdk.Rpcpb.Action> Actions {
      get { return actions_; }
    }

    /// <summary>Field number for the "amount_limit" field.</summary>
    public const int AmountLimitFieldNumber = 8;
    private static readonly pb::FieldCodec<global::IOSTSdk.Rpcpb.AmountLimit> _repeated_amountLimit_codec
        = pb::FieldCodec.ForMessage(66, global::IOSTSdk.Rpcpb.AmountLimit.Parser);
    private readonly pbc::RepeatedField<global::IOSTSdk.Rpcpb.AmountLimit> amountLimit_ = new pbc::RepeatedField<global::IOSTSdk.Rpcpb.AmountLimit>();
    /// <summary>
    /// amount limit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IOSTSdk.Rpcpb.AmountLimit> AmountLimit {
      get { return amountLimit_; }
    }

    /// <summary>Field number for the "signers" field.</summary>
    public const int SignersFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_signers_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> signers_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// signer list
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Signers {
      get { return signers_; }
    }

    /// <summary>Field number for the "signatures" field.</summary>
    public const int SignaturesFieldNumber = 10;
    private static readonly pb::FieldCodec<global::IOSTSdk.Rpcpb.Signature> _repeated_signatures_codec
        = pb::FieldCodec.ForMessage(82, global::IOSTSdk.Rpcpb.Signature.Parser);
    private readonly pbc::RepeatedField<global::IOSTSdk.Rpcpb.Signature> signatures_ = new pbc::RepeatedField<global::IOSTSdk.Rpcpb.Signature>();
    /// <summary>
    /// signatures of signers
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IOSTSdk.Rpcpb.Signature> Signatures {
      get { return signatures_; }
    }

    /// <summary>Field number for the "publisher" field.</summary>
    public const int PublisherFieldNumber = 11;
    private string publisher_ = "";
    /// <summary>
    /// publisher
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Publisher {
      get { return publisher_; }
      set {
        publisher_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "publisher_sigs" field.</summary>
    public const int PublisherSigsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::IOSTSdk.Rpcpb.Signature> _repeated_publisherSigs_codec
        = pb::FieldCodec.ForMessage(98, global::IOSTSdk.Rpcpb.Signature.Parser);
    private readonly pbc::RepeatedField<global::IOSTSdk.Rpcpb.Signature> publisherSigs_ = new pbc::RepeatedField<global::IOSTSdk.Rpcpb.Signature>();
    /// <summary>
    /// signatures of publisher
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IOSTSdk.Rpcpb.Signature> PublisherSigs {
      get { return publisherSigs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      if (Expiration != other.Expiration) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GasRatio, other.GasRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GasLimit, other.GasLimit)) return false;
      if (Delay != other.Delay) return false;
      if (ChainId != other.ChainId) return false;
      if(!actions_.Equals(other.actions_)) return false;
      if(!amountLimit_.Equals(other.amountLimit_)) return false;
      if(!signers_.Equals(other.signers_)) return false;
      if(!signatures_.Equals(other.signatures_)) return false;
      if (Publisher != other.Publisher) return false;
      if(!publisherSigs_.Equals(other.publisherSigs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (Expiration != 0L) hash ^= Expiration.GetHashCode();
      if (GasRatio != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GasRatio);
      if (GasLimit != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GasLimit);
      if (Delay != 0L) hash ^= Delay.GetHashCode();
      if (ChainId != 0) hash ^= ChainId.GetHashCode();
      hash ^= actions_.GetHashCode();
      hash ^= amountLimit_.GetHashCode();
      hash ^= signers_.GetHashCode();
      hash ^= signatures_.GetHashCode();
      if (Publisher.Length != 0) hash ^= Publisher.GetHashCode();
      hash ^= publisherSigs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Time);
      }
      if (Expiration != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Expiration);
      }
      if (GasRatio != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(GasRatio);
      }
      if (GasLimit != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(GasLimit);
      }
      if (Delay != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Delay);
      }
      if (ChainId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ChainId);
      }
      actions_.WriteTo(output, _repeated_actions_codec);
      amountLimit_.WriteTo(output, _repeated_amountLimit_codec);
      signers_.WriteTo(output, _repeated_signers_codec);
      signatures_.WriteTo(output, _repeated_signatures_codec);
      if (Publisher.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Publisher);
      }
      publisherSigs_.WriteTo(output, _repeated_publisherSigs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (Expiration != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Expiration);
      }
      if (GasRatio != 0D) {
        size += 1 + 8;
      }
      if (GasLimit != 0D) {
        size += 1 + 8;
      }
      if (Delay != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Delay);
      }
      if (ChainId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChainId);
      }
      size += actions_.CalculateSize(_repeated_actions_codec);
      size += amountLimit_.CalculateSize(_repeated_amountLimit_codec);
      size += signers_.CalculateSize(_repeated_signers_codec);
      size += signatures_.CalculateSize(_repeated_signatures_codec);
      if (Publisher.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Publisher);
      }
      size += publisherSigs_.CalculateSize(_repeated_publisherSigs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionRequest other) {
      if (other == null) {
        return;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      if (other.Expiration != 0L) {
        Expiration = other.Expiration;
      }
      if (other.GasRatio != 0D) {
        GasRatio = other.GasRatio;
      }
      if (other.GasLimit != 0D) {
        GasLimit = other.GasLimit;
      }
      if (other.Delay != 0L) {
        Delay = other.Delay;
      }
      if (other.ChainId != 0) {
        ChainId = other.ChainId;
      }
      actions_.Add(other.actions_);
      amountLimit_.Add(other.amountLimit_);
      signers_.Add(other.signers_);
      signatures_.Add(other.signatures_);
      if (other.Publisher.Length != 0) {
        Publisher = other.Publisher;
      }
      publisherSigs_.Add(other.publisherSigs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Time = input.ReadInt64();
            break;
          }
          case 16: {
            Expiration = input.ReadInt64();
            break;
          }
          case 25: {
            GasRatio = input.ReadDouble();
            break;
          }
          case 33: {
            GasLimit = input.ReadDouble();
            break;
          }
          case 40: {
            Delay = input.ReadInt64();
            break;
          }
          case 48: {
            ChainId = input.ReadUInt32();
            break;
          }
          case 58: {
            actions_.AddEntriesFrom(input, _repeated_actions_codec);
            break;
          }
          case 66: {
            amountLimit_.AddEntriesFrom(input, _repeated_amountLimit_codec);
            break;
          }
          case 74: {
            signers_.AddEntriesFrom(input, _repeated_signers_codec);
            break;
          }
          case 82: {
            signatures_.AddEntriesFrom(input, _repeated_signatures_codec);
            break;
          }
          case 90: {
            Publisher = input.ReadString();
            break;
          }
          case 98: {
            publisherSigs_.AddEntriesFrom(input, _repeated_publisherSigs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message defines the block struct.
  /// </summary>
  public sealed partial class Block : pb::IMessage<Block> {
    private static readonly pb::MessageParser<Block> _parser = new pb::MessageParser<Block>(() => new Block());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Block> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block(Block other) : this() {
      hash_ = other.hash_;
      version_ = other.version_;
      parentHash_ = other.parentHash_;
      txMerkleHash_ = other.txMerkleHash_;
      txReceiptMerkleHash_ = other.txReceiptMerkleHash_;
      number_ = other.number_;
      witness_ = other.witness_;
      time_ = other.time_;
      gasUsage_ = other.gasUsage_;
      txCount_ = other.txCount_;
      info_ = other.info_ != null ? other.info_.Clone() : null;
      transactions_ = other.transactions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block Clone() {
      return new Block(this);
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 1;
    private string hash_ = "";
    /// <summary>
    /// block hash
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hash {
      get { return hash_; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private long version_;
    /// <summary>
    /// block version
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "parent_hash" field.</summary>
    public const int ParentHashFieldNumber = 3;
    private string parentHash_ = "";
    /// <summary>
    /// parent block hash
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParentHash {
      get { return parentHash_; }
      set {
        parentHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tx_merkle_hash" field.</summary>
    public const int TxMerkleHashFieldNumber = 4;
    private string txMerkleHash_ = "";
    /// <summary>
    /// transaction merkle tree root hash
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TxMerkleHash {
      get { return txMerkleHash_; }
      set {
        txMerkleHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tx_receipt_merkle_hash" field.</summary>
    public const int TxReceiptMerkleHashFieldNumber = 5;
    private string txReceiptMerkleHash_ = "";
    /// <summary>
    /// transaction receipt merkle tree root hash
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TxReceiptMerkleHash {
      get { return txReceiptMerkleHash_; }
      set {
        txReceiptMerkleHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 6;
    private long number_;
    /// <summary>
    /// block number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Number {
      get { return number_; }
      set {
        number_ = value;
      }
    }

    /// <summary>Field number for the "witness" field.</summary>
    public const int WitnessFieldNumber = 7;
    private string witness_ = "";
    /// <summary>
    /// block producer witness
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Witness {
      get { return witness_; }
      set {
        witness_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 8;
    private long time_;
    /// <summary>
    /// block timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "gas_usage" field.</summary>
    public const int GasUsageFieldNumber = 9;
    private double gasUsage_;
    /// <summary>
    /// block gas usage
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GasUsage {
      get { return gasUsage_; }
      set {
        gasUsage_ = value;
      }
    }

    /// <summary>Field number for the "tx_count" field.</summary>
    public const int TxCountFieldNumber = 10;
    private long txCount_;
    /// <summary>
    /// transaction count
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TxCount {
      get { return txCount_; }
      set {
        txCount_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 11;
    private global::IOSTSdk.Rpcpb.Block.Types.Info info_;
    /// <summary>
    /// extra information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IOSTSdk.Rpcpb.Block.Types.Info Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "transactions" field.</summary>
    public const int TransactionsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::IOSTSdk.Rpcpb.Transaction> _repeated_transactions_codec
        = pb::FieldCodec.ForMessage(98, global::IOSTSdk.Rpcpb.Transaction.Parser);
    private readonly pbc::RepeatedField<global::IOSTSdk.Rpcpb.Transaction> transactions_ = new pbc::RepeatedField<global::IOSTSdk.Rpcpb.Transaction>();
    /// <summary>
    /// block transactions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IOSTSdk.Rpcpb.Transaction> Transactions {
      get { return transactions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Block);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Block other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Hash != other.Hash) return false;
      if (Version != other.Version) return false;
      if (ParentHash != other.ParentHash) return false;
      if (TxMerkleHash != other.TxMerkleHash) return false;
      if (TxReceiptMerkleHash != other.TxReceiptMerkleHash) return false;
      if (Number != other.Number) return false;
      if (Witness != other.Witness) return false;
      if (Time != other.Time) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GasUsage, other.GasUsage)) return false;
      if (TxCount != other.TxCount) return false;
      if (!object.Equals(Info, other.Info)) return false;
      if(!transactions_.Equals(other.transactions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      if (Version != 0L) hash ^= Version.GetHashCode();
      if (ParentHash.Length != 0) hash ^= ParentHash.GetHashCode();
      if (TxMerkleHash.Length != 0) hash ^= TxMerkleHash.GetHashCode();
      if (TxReceiptMerkleHash.Length != 0) hash ^= TxReceiptMerkleHash.GetHashCode();
      if (Number != 0L) hash ^= Number.GetHashCode();
      if (Witness.Length != 0) hash ^= Witness.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (GasUsage != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GasUsage);
      if (TxCount != 0L) hash ^= TxCount.GetHashCode();
      if (info_ != null) hash ^= Info.GetHashCode();
      hash ^= transactions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Hash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Hash);
      }
      if (Version != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Version);
      }
      if (ParentHash.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ParentHash);
      }
      if (TxMerkleHash.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TxMerkleHash);
      }
      if (TxReceiptMerkleHash.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(TxReceiptMerkleHash);
      }
      if (Number != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Number);
      }
      if (Witness.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Witness);
      }
      if (Time != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Time);
      }
      if (GasUsage != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(GasUsage);
      }
      if (TxCount != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(TxCount);
      }
      if (info_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Info);
      }
      transactions_.WriteTo(output, _repeated_transactions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Hash);
      }
      if (Version != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Version);
      }
      if (ParentHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentHash);
      }
      if (TxMerkleHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TxMerkleHash);
      }
      if (TxReceiptMerkleHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TxReceiptMerkleHash);
      }
      if (Number != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Number);
      }
      if (Witness.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Witness);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (GasUsage != 0D) {
        size += 1 + 8;
      }
      if (TxCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TxCount);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      size += transactions_.CalculateSize(_repeated_transactions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Block other) {
      if (other == null) {
        return;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
      if (other.Version != 0L) {
        Version = other.Version;
      }
      if (other.ParentHash.Length != 0) {
        ParentHash = other.ParentHash;
      }
      if (other.TxMerkleHash.Length != 0) {
        TxMerkleHash = other.TxMerkleHash;
      }
      if (other.TxReceiptMerkleHash.Length != 0) {
        TxReceiptMerkleHash = other.TxReceiptMerkleHash;
      }
      if (other.Number != 0L) {
        Number = other.Number;
      }
      if (other.Witness.Length != 0) {
        Witness = other.Witness;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      if (other.GasUsage != 0D) {
        GasUsage = other.GasUsage;
      }
      if (other.TxCount != 0L) {
        TxCount = other.TxCount;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          Info = new global::IOSTSdk.Rpcpb.Block.Types.Info();
        }
        Info.MergeFrom(other.Info);
      }
      transactions_.Add(other.transactions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Hash = input.ReadString();
            break;
          }
          case 16: {
            Version = input.ReadInt64();
            break;
          }
          case 26: {
            ParentHash = input.ReadString();
            break;
          }
          case 34: {
            TxMerkleHash = input.ReadString();
            break;
          }
          case 42: {
            TxReceiptMerkleHash = input.ReadString();
            break;
          }
          case 48: {
            Number = input.ReadInt64();
            break;
          }
          case 58: {
            Witness = input.ReadString();
            break;
          }
          case 64: {
            Time = input.ReadInt64();
            break;
          }
          case 73: {
            GasUsage = input.ReadDouble();
            break;
          }
          case 80: {
            TxCount = input.ReadInt64();
            break;
          }
          case 90: {
            if (info_ == null) {
              Info = new global::IOSTSdk.Rpcpb.Block.Types.Info();
            }
            input.ReadMessage(Info);
            break;
          }
          case 98: {
            transactions_.AddEntriesFrom(input, _repeated_transactions_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Block message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The message defines block extra information
      /// </summary>
      public sealed partial class Info : pb::IMessage<Info> {
        private static readonly pb::MessageParser<Info> _parser = new pb::MessageParser<Info>(() => new Info());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Info> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::IOSTSdk.Rpcpb.Block.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info(Info other) : this() {
          mode_ = other.mode_;
          thread_ = other.thread_;
          batchIndex_ = other.batchIndex_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info Clone() {
          return new Info(this);
        }

        /// <summary>Field number for the "mode" field.</summary>
        public const int ModeFieldNumber = 1;
        private int mode_;
        /// <summary>
        /// pack mode
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Mode {
          get { return mode_; }
          set {
            mode_ = value;
          }
        }

        /// <summary>Field number for the "thread" field.</summary>
        public const int ThreadFieldNumber = 2;
        private int thread_;
        /// <summary>
        /// transaction execution thread number
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Thread {
          get { return thread_; }
          set {
            thread_ = value;
          }
        }

        /// <summary>Field number for the "batch_index" field.</summary>
        public const int BatchIndexFieldNumber = 3;
        private static readonly pb::FieldCodec<int> _repeated_batchIndex_codec
            = pb::FieldCodec.ForInt32(26);
        private readonly pbc::RepeatedField<int> batchIndex_ = new pbc::RepeatedField<int>();
        /// <summary>
        /// transaction index of every batch execution
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> BatchIndex {
          get { return batchIndex_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Info);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Info other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Mode != other.Mode) return false;
          if (Thread != other.Thread) return false;
          if(!batchIndex_.Equals(other.batchIndex_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Mode != 0) hash ^= Mode.GetHashCode();
          if (Thread != 0) hash ^= Thread.GetHashCode();
          hash ^= batchIndex_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Mode != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Mode);
          }
          if (Thread != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Thread);
          }
          batchIndex_.WriteTo(output, _repeated_batchIndex_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Mode != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mode);
          }
          if (Thread != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Thread);
          }
          size += batchIndex_.CalculateSize(_repeated_batchIndex_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Info other) {
          if (other == null) {
            return;
          }
          if (other.Mode != 0) {
            Mode = other.Mode;
          }
          if (other.Thread != 0) {
            Thread = other.Thread;
          }
          batchIndex_.Add(other.batchIndex_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Mode = input.ReadInt32();
                break;
              }
              case 16: {
                Thread = input.ReadInt32();
                break;
              }
              case 26:
              case 24: {
                batchIndex_.AddEntriesFrom(input, _repeated_batchIndex_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class BlockResponse : pb::IMessage<BlockResponse> {
    private static readonly pb::MessageParser<BlockResponse> _parser = new pb::MessageParser<BlockResponse>(() => new BlockResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockResponse(BlockResponse other) : this() {
      status_ = other.status_;
      block_ = other.block_ != null ? other.block_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockResponse Clone() {
      return new BlockResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::IOSTSdk.Rpcpb.BlockResponse.Types.Status status_ = 0;
    /// <summary>
    /// transaction status
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IOSTSdk.Rpcpb.BlockResponse.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "block" field.</summary>
    public const int BlockFieldNumber = 2;
    private global::IOSTSdk.Rpcpb.Block block_;
    /// <summary>
    /// block
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IOSTSdk.Rpcpb.Block Block {
      get { return block_; }
      set {
        block_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(Block, other.Block)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (block_ != null) hash ^= Block.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (block_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Block);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (block_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Block);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.block_ != null) {
        if (block_ == null) {
          Block = new global::IOSTSdk.Rpcpb.Block();
        }
        Block.MergeFrom(other.Block);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = (global::IOSTSdk.Rpcpb.BlockResponse.Types.Status) input.ReadEnum();
            break;
          }
          case 18: {
            if (block_ == null) {
              Block = new global::IOSTSdk.Rpcpb.Block();
            }
            input.ReadMessage(Block);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BlockResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The enumeration defines block status.
      /// </summary>
      public enum Status {
        /// <summary>
        /// pending in block cache
        /// </summary>
        [pbr::OriginalName("PENDING")] Pending = 0,
        /// <summary>
        /// irreversible
        /// </summary>
        [pbr::OriginalName("IRREVERSIBLE")] Irreversible = 1,
      }

    }
    #endregion

  }

  /// <summary>
  /// The message defines chain information response.
  /// </summary>
  public sealed partial class ChainInfoResponse : pb::IMessage<ChainInfoResponse> {
    private static readonly pb::MessageParser<ChainInfoResponse> _parser = new pb::MessageParser<ChainInfoResponse>(() => new ChainInfoResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChainInfoResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChainInfoResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChainInfoResponse(ChainInfoResponse other) : this() {
      netName_ = other.netName_;
      protocolVersion_ = other.protocolVersion_;
      chainId_ = other.chainId_;
      headBlock_ = other.headBlock_;
      headBlockHash_ = other.headBlockHash_;
      libBlock_ = other.libBlock_;
      libBlockHash_ = other.libBlockHash_;
      witnessList_ = other.witnessList_.Clone();
      libWitnessList_ = other.libWitnessList_.Clone();
      pendingWitnessList_ = other.pendingWitnessList_.Clone();
      headBlockTime_ = other.headBlockTime_;
      libBlockTime_ = other.libBlockTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChainInfoResponse Clone() {
      return new ChainInfoResponse(this);
    }

    /// <summary>Field number for the "net_name" field.</summary>
    public const int NetNameFieldNumber = 1;
    private string netName_ = "";
    /// <summary>
    /// the name of network, such mainnet or testnet
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NetName {
      get { return netName_; }
      set {
        netName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "protocol_version" field.</summary>
    public const int ProtocolVersionFieldNumber = 2;
    private string protocolVersion_ = "";
    /// <summary>
    /// the iost protocol version
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProtocolVersion {
      get { return protocolVersion_; }
      set {
        protocolVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "chain_id" field.</summary>
    public const int ChainIdFieldNumber = 3;
    private uint chainId_;
    /// <summary>
    /// chain id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChainId {
      get { return chainId_; }
      set {
        chainId_ = value;
      }
    }

    /// <summary>Field number for the "head_block" field.</summary>
    public const int HeadBlockFieldNumber = 4;
    private long headBlock_;
    /// <summary>
    /// head block height
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeadBlock {
      get { return headBlock_; }
      set {
        headBlock_ = value;
      }
    }

    /// <summary>Field number for the "head_block_hash" field.</summary>
    public const int HeadBlockHashFieldNumber = 5;
    private string headBlockHash_ = "";
    /// <summary>
    /// head block hash
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeadBlockHash {
      get { return headBlockHash_; }
      set {
        headBlockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lib_block" field.</summary>
    public const int LibBlockFieldNumber = 6;
    private long libBlock_;
    /// <summary>
    /// last irreversible block number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LibBlock {
      get { return libBlock_; }
      set {
        libBlock_ = value;
      }
    }

    /// <summary>Field number for the "lib_block_hash" field.</summary>
    public const int LibBlockHashFieldNumber = 7;
    private string libBlockHash_ = "";
    /// <summary>
    /// last irreversible block hash
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LibBlockHash {
      get { return libBlockHash_; }
      set {
        libBlockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "witness_list" field.</summary>
    public const int WitnessListFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_witnessList_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> witnessList_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// the current witness list
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> WitnessList {
      get { return witnessList_; }
    }

    /// <summary>Field number for the "lib_witness_list" field.</summary>
    public const int LibWitnessListFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_libWitnessList_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> libWitnessList_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// the active witness list of lat irreversible block
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> LibWitnessList {
      get { return libWitnessList_; }
    }

    /// <summary>Field number for the "pending_witness_list" field.</summary>
    public const int PendingWitnessListFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _repeated_pendingWitnessList_codec
        = pb::FieldCodec.ForString(82);
    private readonly pbc::RepeatedField<string> pendingWitnessList_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// the pending witness list
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PendingWitnessList {
      get { return pendingWitnessList_; }
    }

    /// <summary>Field number for the "head_block_time" field.</summary>
    public const int HeadBlockTimeFieldNumber = 11;
    private long headBlockTime_;
    /// <summary>
    /// the head block time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeadBlockTime {
      get { return headBlockTime_; }
      set {
        headBlockTime_ = value;
      }
    }

    /// <summary>Field number for the "lib_block_time" field.</summary>
    public const int LibBlockTimeFieldNumber = 12;
    private long libBlockTime_;
    /// <summary>
    /// the last irreversible block time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LibBlockTime {
      get { return libBlockTime_; }
      set {
        libBlockTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChainInfoResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChainInfoResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NetName != other.NetName) return false;
      if (ProtocolVersion != other.ProtocolVersion) return false;
      if (ChainId != other.ChainId) return false;
      if (HeadBlock != other.HeadBlock) return false;
      if (HeadBlockHash != other.HeadBlockHash) return false;
      if (LibBlock != other.LibBlock) return false;
      if (LibBlockHash != other.LibBlockHash) return false;
      if(!witnessList_.Equals(other.witnessList_)) return false;
      if(!libWitnessList_.Equals(other.libWitnessList_)) return false;
      if(!pendingWitnessList_.Equals(other.pendingWitnessList_)) return false;
      if (HeadBlockTime != other.HeadBlockTime) return false;
      if (LibBlockTime != other.LibBlockTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NetName.Length != 0) hash ^= NetName.GetHashCode();
      if (ProtocolVersion.Length != 0) hash ^= ProtocolVersion.GetHashCode();
      if (ChainId != 0) hash ^= ChainId.GetHashCode();
      if (HeadBlock != 0L) hash ^= HeadBlock.GetHashCode();
      if (HeadBlockHash.Length != 0) hash ^= HeadBlockHash.GetHashCode();
      if (LibBlock != 0L) hash ^= LibBlock.GetHashCode();
      if (LibBlockHash.Length != 0) hash ^= LibBlockHash.GetHashCode();
      hash ^= witnessList_.GetHashCode();
      hash ^= libWitnessList_.GetHashCode();
      hash ^= pendingWitnessList_.GetHashCode();
      if (HeadBlockTime != 0L) hash ^= HeadBlockTime.GetHashCode();
      if (LibBlockTime != 0L) hash ^= LibBlockTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NetName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NetName);
      }
      if (ProtocolVersion.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProtocolVersion);
      }
      if (ChainId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ChainId);
      }
      if (HeadBlock != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(HeadBlock);
      }
      if (HeadBlockHash.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(HeadBlockHash);
      }
      if (LibBlock != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(LibBlock);
      }
      if (LibBlockHash.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(LibBlockHash);
      }
      witnessList_.WriteTo(output, _repeated_witnessList_codec);
      libWitnessList_.WriteTo(output, _repeated_libWitnessList_codec);
      pendingWitnessList_.WriteTo(output, _repeated_pendingWitnessList_codec);
      if (HeadBlockTime != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(HeadBlockTime);
      }
      if (LibBlockTime != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(LibBlockTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NetName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NetName);
      }
      if (ProtocolVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProtocolVersion);
      }
      if (ChainId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChainId);
      }
      if (HeadBlock != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeadBlock);
      }
      if (HeadBlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadBlockHash);
      }
      if (LibBlock != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LibBlock);
      }
      if (LibBlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LibBlockHash);
      }
      size += witnessList_.CalculateSize(_repeated_witnessList_codec);
      size += libWitnessList_.CalculateSize(_repeated_libWitnessList_codec);
      size += pendingWitnessList_.CalculateSize(_repeated_pendingWitnessList_codec);
      if (HeadBlockTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeadBlockTime);
      }
      if (LibBlockTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LibBlockTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChainInfoResponse other) {
      if (other == null) {
        return;
      }
      if (other.NetName.Length != 0) {
        NetName = other.NetName;
      }
      if (other.ProtocolVersion.Length != 0) {
        ProtocolVersion = other.ProtocolVersion;
      }
      if (other.ChainId != 0) {
        ChainId = other.ChainId;
      }
      if (other.HeadBlock != 0L) {
        HeadBlock = other.HeadBlock;
      }
      if (other.HeadBlockHash.Length != 0) {
        HeadBlockHash = other.HeadBlockHash;
      }
      if (other.LibBlock != 0L) {
        LibBlock = other.LibBlock;
      }
      if (other.LibBlockHash.Length != 0) {
        LibBlockHash = other.LibBlockHash;
      }
      witnessList_.Add(other.witnessList_);
      libWitnessList_.Add(other.libWitnessList_);
      pendingWitnessList_.Add(other.pendingWitnessList_);
      if (other.HeadBlockTime != 0L) {
        HeadBlockTime = other.HeadBlockTime;
      }
      if (other.LibBlockTime != 0L) {
        LibBlockTime = other.LibBlockTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NetName = input.ReadString();
            break;
          }
          case 18: {
            ProtocolVersion = input.ReadString();
            break;
          }
          case 24: {
            ChainId = input.ReadUInt32();
            break;
          }
          case 32: {
            HeadBlock = input.ReadInt64();
            break;
          }
          case 42: {
            HeadBlockHash = input.ReadString();
            break;
          }
          case 48: {
            LibBlock = input.ReadInt64();
            break;
          }
          case 58: {
            LibBlockHash = input.ReadString();
            break;
          }
          case 66: {
            witnessList_.AddEntriesFrom(input, _repeated_witnessList_codec);
            break;
          }
          case 74: {
            libWitnessList_.AddEntriesFrom(input, _repeated_libWitnessList_codec);
            break;
          }
          case 82: {
            pendingWitnessList_.AddEntriesFrom(input, _repeated_pendingWitnessList_codec);
            break;
          }
          case 88: {
            HeadBlockTime = input.ReadInt64();
            break;
          }
          case 96: {
            LibBlockTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The request message containing the tx's hash.
  /// </summary>
  public sealed partial class TxHashRequest : pb::IMessage<TxHashRequest> {
    private static readonly pb::MessageParser<TxHashRequest> _parser = new pb::MessageParser<TxHashRequest>(() => new TxHashRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TxHashRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TxHashRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TxHashRequest(TxHashRequest other) : this() {
      hash_ = other.hash_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TxHashRequest Clone() {
      return new TxHashRequest(this);
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 1;
    private string hash_ = "";
    /// <summary>
    /// tx hash
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hash {
      get { return hash_; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TxHashRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TxHashRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Hash != other.Hash) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Hash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Hash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Hash);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TxHashRequest other) {
      if (other == null) {
        return;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Hash = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The request message containing the block's hash.
  /// </summary>
  public sealed partial class GetBlockByHashRequest : pb::IMessage<GetBlockByHashRequest> {
    private static readonly pb::MessageParser<GetBlockByHashRequest> _parser = new pb::MessageParser<GetBlockByHashRequest>(() => new GetBlockByHashRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBlockByHashRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBlockByHashRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBlockByHashRequest(GetBlockByHashRequest other) : this() {
      hash_ = other.hash_;
      complete_ = other.complete_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBlockByHashRequest Clone() {
      return new GetBlockByHashRequest(this);
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 1;
    private string hash_ = "";
    /// <summary>
    /// block hash
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hash {
      get { return hash_; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "complete" field.</summary>
    public const int CompleteFieldNumber = 2;
    private bool complete_;
    /// <summary>
    /// complete means whether including the full transactions and transaction receipts
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Complete {
      get { return complete_; }
      set {
        complete_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBlockByHashRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBlockByHashRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Hash != other.Hash) return false;
      if (Complete != other.Complete) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      if (Complete != false) hash ^= Complete.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Hash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Hash);
      }
      if (Complete != false) {
        output.WriteRawTag(16);
        output.WriteBool(Complete);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Hash);
      }
      if (Complete != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBlockByHashRequest other) {
      if (other == null) {
        return;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
      if (other.Complete != false) {
        Complete = other.Complete;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Hash = input.ReadString();
            break;
          }
          case 16: {
            Complete = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The request message containing the block's number.
  /// </summary>
  public sealed partial class GetBlockByNumberRequest : pb::IMessage<GetBlockByNumberRequest> {
    private static readonly pb::MessageParser<GetBlockByNumberRequest> _parser = new pb::MessageParser<GetBlockByNumberRequest>(() => new GetBlockByNumberRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBlockByNumberRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBlockByNumberRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBlockByNumberRequest(GetBlockByNumberRequest other) : this() {
      number_ = other.number_;
      complete_ = other.complete_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBlockByNumberRequest Clone() {
      return new GetBlockByNumberRequest(this);
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 1;
    private long number_;
    /// <summary>
    /// block number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Number {
      get { return number_; }
      set {
        number_ = value;
      }
    }

    /// <summary>Field number for the "complete" field.</summary>
    public const int CompleteFieldNumber = 2;
    private bool complete_;
    /// <summary>
    /// complete means whether including the full transactions and transaction receipts
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Complete {
      get { return complete_; }
      set {
        complete_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBlockByNumberRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBlockByNumberRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Number != other.Number) return false;
      if (Complete != other.Complete) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Number != 0L) hash ^= Number.GetHashCode();
      if (Complete != false) hash ^= Complete.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Number != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Number);
      }
      if (Complete != false) {
        output.WriteRawTag(16);
        output.WriteBool(Complete);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Number != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Number);
      }
      if (Complete != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBlockByNumberRequest other) {
      if (other == null) {
        return;
      }
      if (other.Number != 0L) {
        Number = other.Number;
      }
      if (other.Complete != false) {
        Complete = other.Complete;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Number = input.ReadInt64();
            break;
          }
          case 16: {
            Complete = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message defines the account's frozen balance.
  /// </summary>
  public sealed partial class FrozenBalance : pb::IMessage<FrozenBalance> {
    private static readonly pb::MessageParser<FrozenBalance> _parser = new pb::MessageParser<FrozenBalance>(() => new FrozenBalance());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FrozenBalance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrozenBalance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrozenBalance(FrozenBalance other) : this() {
      amount_ = other.amount_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrozenBalance Clone() {
      return new FrozenBalance(this);
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 1;
    private double amount_;
    /// <summary>
    /// balance amount
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private long time_;
    /// <summary>
    /// free time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FrozenBalance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FrozenBalance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Amount, other.Amount)) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Amount != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Amount);
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Amount != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Amount);
      }
      if (Time != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Amount != 0D) {
        size += 1 + 8;
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FrozenBalance other) {
      if (other == null) {
        return;
      }
      if (other.Amount != 0D) {
        Amount = other.Amount;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Amount = input.ReadDouble();
            break;
          }
          case 16: {
            Time = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message defines the account's vote info.
  /// </summary>
  public sealed partial class VoteInfo : pb::IMessage<VoteInfo> {
    private static readonly pb::MessageParser<VoteInfo> _parser = new pb::MessageParser<VoteInfo>(() => new VoteInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VoteInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoteInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoteInfo(VoteInfo other) : this() {
      option_ = other.option_;
      votes_ = other.votes_;
      clearedVotes_ = other.clearedVotes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoteInfo Clone() {
      return new VoteInfo(this);
    }

    /// <summary>Field number for the "option" field.</summary>
    public const int OptionFieldNumber = 1;
    private string option_ = "";
    /// <summary>
    /// option name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Option {
      get { return option_; }
      set {
        option_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "votes" field.</summary>
    public const int VotesFieldNumber = 2;
    private double votes_;
    /// <summary>
    /// votes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Votes {
      get { return votes_; }
      set {
        votes_ = value;
      }
    }

    /// <summary>Field number for the "cleared_votes" field.</summary>
    public const int ClearedVotesFieldNumber = 3;
    private double clearedVotes_;
    /// <summary>
    /// cleared votes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ClearedVotes {
      get { return clearedVotes_; }
      set {
        clearedVotes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VoteInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VoteInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Option != other.Option) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Votes, other.Votes)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ClearedVotes, other.ClearedVotes)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Option.Length != 0) hash ^= Option.GetHashCode();
      if (Votes != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Votes);
      if (ClearedVotes != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ClearedVotes);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Option.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Option);
      }
      if (Votes != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Votes);
      }
      if (ClearedVotes != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(ClearedVotes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Option.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Option);
      }
      if (Votes != 0D) {
        size += 1 + 8;
      }
      if (ClearedVotes != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VoteInfo other) {
      if (other == null) {
        return;
      }
      if (other.Option.Length != 0) {
        Option = other.Option;
      }
      if (other.Votes != 0D) {
        Votes = other.Votes;
      }
      if (other.ClearedVotes != 0D) {
        ClearedVotes = other.ClearedVotes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Option = input.ReadString();
            break;
          }
          case 17: {
            Votes = input.ReadDouble();
            break;
          }
          case 25: {
            ClearedVotes = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetProducerVoteInfoRequest : pb::IMessage<GetProducerVoteInfoRequest> {
    private static readonly pb::MessageParser<GetProducerVoteInfoRequest> _parser = new pb::MessageParser<GetProducerVoteInfoRequest>(() => new GetProducerVoteInfoRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetProducerVoteInfoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProducerVoteInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProducerVoteInfoRequest(GetProducerVoteInfoRequest other) : this() {
      account_ = other.account_;
      byLongestChain_ = other.byLongestChain_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProducerVoteInfoRequest Clone() {
      return new GetProducerVoteInfoRequest(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    /// <summary>
    /// account name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "by_longest_chain" field.</summary>
    public const int ByLongestChainFieldNumber = 2;
    private bool byLongestChain_;
    /// <summary>
    /// get data by longest chain's head block or last irreversible block
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ByLongestChain {
      get { return byLongestChain_; }
      set {
        byLongestChain_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetProducerVoteInfoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetProducerVoteInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (ByLongestChain != other.ByLongestChain) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (ByLongestChain != false) hash ^= ByLongestChain.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (ByLongestChain != false) {
        output.WriteRawTag(16);
        output.WriteBool(ByLongestChain);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (ByLongestChain != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetProducerVoteInfoRequest other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.ByLongestChain != false) {
        ByLongestChain = other.ByLongestChain;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 16: {
            ByLongestChain = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetProducerVoteInfoResponse : pb::IMessage<GetProducerVoteInfoResponse> {
    private static readonly pb::MessageParser<GetProducerVoteInfoResponse> _parser = new pb::MessageParser<GetProducerVoteInfoResponse>(() => new GetProducerVoteInfoResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetProducerVoteInfoResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProducerVoteInfoResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProducerVoteInfoResponse(GetProducerVoteInfoResponse other) : this() {
      pubkey_ = other.pubkey_;
      loc_ = other.loc_;
      url_ = other.url_;
      netId_ = other.netId_;
      isProducer_ = other.isProducer_;
      status_ = other.status_;
      online_ = other.online_;
      votes_ = other.votes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProducerVoteInfoResponse Clone() {
      return new GetProducerVoteInfoResponse(this);
    }

    /// <summary>Field number for the "pubkey" field.</summary>
    public const int PubkeyFieldNumber = 1;
    private string pubkey_ = "";
    /// <summary>
    /// producer's public key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pubkey {
      get { return pubkey_; }
      set {
        pubkey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "loc" field.</summary>
    public const int LocFieldNumber = 2;
    private string loc_ = "";
    /// <summary>
    /// producer's location
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Loc {
      get { return loc_; }
      set {
        loc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 3;
    private string url_ = "";
    /// <summary>
    /// producer's url
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "net_id" field.</summary>
    public const int NetIdFieldNumber = 4;
    private string netId_ = "";
    /// <summary>
    /// producer's net id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NetId {
      get { return netId_; }
      set {
        netId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_producer" field.</summary>
    public const int IsProducerFieldNumber = 5;
    private bool isProducer_;
    /// <summary>
    /// is producer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsProducer {
      get { return isProducer_; }
      set {
        isProducer_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 6;
    private string status_ = "";
    /// <summary>
    /// is approved
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Status {
      get { return status_; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "online" field.</summary>
    public const int OnlineFieldNumber = 7;
    private bool online_;
    /// <summary>
    /// is online
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Online {
      get { return online_; }
      set {
        online_ = value;
      }
    }

    /// <summary>Field number for the "votes" field.</summary>
    public const int VotesFieldNumber = 8;
    private double votes_;
    /// <summary>
    /// votes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Votes {
      get { return votes_; }
      set {
        votes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetProducerVoteInfoResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetProducerVoteInfoResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pubkey != other.Pubkey) return false;
      if (Loc != other.Loc) return false;
      if (Url != other.Url) return false;
      if (NetId != other.NetId) return false;
      if (IsProducer != other.IsProducer) return false;
      if (Status != other.Status) return false;
      if (Online != other.Online) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Votes, other.Votes)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pubkey.Length != 0) hash ^= Pubkey.GetHashCode();
      if (Loc.Length != 0) hash ^= Loc.GetHashCode();
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      if (NetId.Length != 0) hash ^= NetId.GetHashCode();
      if (IsProducer != false) hash ^= IsProducer.GetHashCode();
      if (Status.Length != 0) hash ^= Status.GetHashCode();
      if (Online != false) hash ^= Online.GetHashCode();
      if (Votes != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Votes);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pubkey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Pubkey);
      }
      if (Loc.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Loc);
      }
      if (Url.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Url);
      }
      if (NetId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(NetId);
      }
      if (IsProducer != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsProducer);
      }
      if (Status.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Status);
      }
      if (Online != false) {
        output.WriteRawTag(56);
        output.WriteBool(Online);
      }
      if (Votes != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Votes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pubkey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pubkey);
      }
      if (Loc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Loc);
      }
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (NetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NetId);
      }
      if (IsProducer != false) {
        size += 1 + 1;
      }
      if (Status.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
      }
      if (Online != false) {
        size += 1 + 1;
      }
      if (Votes != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetProducerVoteInfoResponse other) {
      if (other == null) {
        return;
      }
      if (other.Pubkey.Length != 0) {
        Pubkey = other.Pubkey;
      }
      if (other.Loc.Length != 0) {
        Loc = other.Loc;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      if (other.NetId.Length != 0) {
        NetId = other.NetId;
      }
      if (other.IsProducer != false) {
        IsProducer = other.IsProducer;
      }
      if (other.Status.Length != 0) {
        Status = other.Status;
      }
      if (other.Online != false) {
        Online = other.Online;
      }
      if (other.Votes != 0D) {
        Votes = other.Votes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Pubkey = input.ReadString();
            break;
          }
          case 18: {
            Loc = input.ReadString();
            break;
          }
          case 26: {
            Url = input.ReadString();
            break;
          }
          case 34: {
            NetId = input.ReadString();
            break;
          }
          case 40: {
            IsProducer = input.ReadBool();
            break;
          }
          case 50: {
            Status = input.ReadString();
            break;
          }
          case 56: {
            Online = input.ReadBool();
            break;
          }
          case 65: {
            Votes = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GasRatioResponse : pb::IMessage<GasRatioResponse> {
    private static readonly pb::MessageParser<GasRatioResponse> _parser = new pb::MessageParser<GasRatioResponse>(() => new GasRatioResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GasRatioResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GasRatioResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GasRatioResponse(GasRatioResponse other) : this() {
      lowestGasRatio_ = other.lowestGasRatio_;
      medianGasRatio_ = other.medianGasRatio_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GasRatioResponse Clone() {
      return new GasRatioResponse(this);
    }

    /// <summary>Field number for the "lowest_gas_ratio" field.</summary>
    public const int LowestGasRatioFieldNumber = 1;
    private double lowestGasRatio_;
    /// <summary>
    /// lowest gas ratio in head block
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LowestGasRatio {
      get { return lowestGasRatio_; }
      set {
        lowestGasRatio_ = value;
      }
    }

    /// <summary>Field number for the "median_gas_ratio" field.</summary>
    public const int MedianGasRatioFieldNumber = 2;
    private double medianGasRatio_;
    /// <summary>
    /// median gas ratio in head block
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MedianGasRatio {
      get { return medianGasRatio_; }
      set {
        medianGasRatio_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GasRatioResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GasRatioResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LowestGasRatio, other.LowestGasRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MedianGasRatio, other.MedianGasRatio)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LowestGasRatio != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LowestGasRatio);
      if (MedianGasRatio != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MedianGasRatio);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LowestGasRatio != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(LowestGasRatio);
      }
      if (MedianGasRatio != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(MedianGasRatio);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LowestGasRatio != 0D) {
        size += 1 + 8;
      }
      if (MedianGasRatio != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GasRatioResponse other) {
      if (other == null) {
        return;
      }
      if (other.LowestGasRatio != 0D) {
        LowestGasRatio = other.LowestGasRatio;
      }
      if (other.MedianGasRatio != 0D) {
        MedianGasRatio = other.MedianGasRatio;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            LowestGasRatio = input.ReadDouble();
            break;
          }
          case 17: {
            MedianGasRatio = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message defines account struct.
  /// </summary>
  public sealed partial class Account : pb::IMessage<Account> {
    private static readonly pb::MessageParser<Account> _parser = new pb::MessageParser<Account>(() => new Account());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Account> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account(Account other) : this() {
      name_ = other.name_;
      balance_ = other.balance_;
      gasInfo_ = other.gasInfo_ != null ? other.gasInfo_.Clone() : null;
      ramInfo_ = other.ramInfo_ != null ? other.ramInfo_.Clone() : null;
      permissions_ = other.permissions_.Clone();
      groups_ = other.groups_.Clone();
      frozenBalances_ = other.frozenBalances_.Clone();
      voteInfos_ = other.voteInfos_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account Clone() {
      return new Account(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// account name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "balance" field.</summary>
    public const int BalanceFieldNumber = 2;
    private double balance_;
    /// <summary>
    /// account balance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Balance {
      get { return balance_; }
      set {
        balance_ = value;
      }
    }

    /// <summary>Field number for the "gas_info" field.</summary>
    public const int GasInfoFieldNumber = 3;
    private global::IOSTSdk.Rpcpb.Account.Types.GasInfo gasInfo_;
    /// <summary>
    /// gas information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IOSTSdk.Rpcpb.Account.Types.GasInfo GasInfo {
      get { return gasInfo_; }
      set {
        gasInfo_ = value;
      }
    }

    /// <summary>Field number for the "ram_info" field.</summary>
    public const int RamInfoFieldNumber = 4;
    private global::IOSTSdk.Rpcpb.Account.Types.RAMInfo ramInfo_;
    /// <summary>
    /// ram information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IOSTSdk.Rpcpb.Account.Types.RAMInfo RamInfo {
      get { return ramInfo_; }
      set {
        ramInfo_ = value;
      }
    }

    /// <summary>Field number for the "permissions" field.</summary>
    public const int PermissionsFieldNumber = 5;
    private static readonly pbc::MapField<string, global::IOSTSdk.Rpcpb.Account.Types.Permission>.Codec _map_permissions_codec
        = new pbc::MapField<string, global::IOSTSdk.Rpcpb.Account.Types.Permission>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::IOSTSdk.Rpcpb.Account.Types.Permission.Parser), 42);
    private readonly pbc::MapField<string, global::IOSTSdk.Rpcpb.Account.Types.Permission> permissions_ = new pbc::MapField<string, global::IOSTSdk.Rpcpb.Account.Types.Permission>();
    /// <summary>
    /// account permission
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::IOSTSdk.Rpcpb.Account.Types.Permission> Permissions {
      get { return permissions_; }
    }

    /// <summary>Field number for the "groups" field.</summary>
    public const int GroupsFieldNumber = 6;
    private static readonly pbc::MapField<string, global::IOSTSdk.Rpcpb.Account.Types.Group>.Codec _map_groups_codec
        = new pbc::MapField<string, global::IOSTSdk.Rpcpb.Account.Types.Group>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::IOSTSdk.Rpcpb.Account.Types.Group.Parser), 50);
    private readonly pbc::MapField<string, global::IOSTSdk.Rpcpb.Account.Types.Group> groups_ = new pbc::MapField<string, global::IOSTSdk.Rpcpb.Account.Types.Group>();
    /// <summary>
    /// account groups
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::IOSTSdk.Rpcpb.Account.Types.Group> Groups {
      get { return groups_; }
    }

    /// <summary>Field number for the "frozen_balances" field.</summary>
    public const int FrozenBalancesFieldNumber = 7;
    private static readonly pb::FieldCodec<global::IOSTSdk.Rpcpb.FrozenBalance> _repeated_frozenBalances_codec
        = pb::FieldCodec.ForMessage(58, global::IOSTSdk.Rpcpb.FrozenBalance.Parser);
    private readonly pbc::RepeatedField<global::IOSTSdk.Rpcpb.FrozenBalance> frozenBalances_ = new pbc::RepeatedField<global::IOSTSdk.Rpcpb.FrozenBalance>();
    /// <summary>
    /// frozen balance information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IOSTSdk.Rpcpb.FrozenBalance> FrozenBalances {
      get { return frozenBalances_; }
    }

    /// <summary>Field number for the "vote_infos" field.</summary>
    public const int VoteInfosFieldNumber = 8;
    private static readonly pb::FieldCodec<global::IOSTSdk.Rpcpb.VoteInfo> _repeated_voteInfos_codec
        = pb::FieldCodec.ForMessage(66, global::IOSTSdk.Rpcpb.VoteInfo.Parser);
    private readonly pbc::RepeatedField<global::IOSTSdk.Rpcpb.VoteInfo> voteInfos_ = new pbc::RepeatedField<global::IOSTSdk.Rpcpb.VoteInfo>();
    /// <summary>
    /// vote information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IOSTSdk.Rpcpb.VoteInfo> VoteInfos {
      get { return voteInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Account);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Account other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Balance, other.Balance)) return false;
      if (!object.Equals(GasInfo, other.GasInfo)) return false;
      if (!object.Equals(RamInfo, other.RamInfo)) return false;
      if (!Permissions.Equals(other.Permissions)) return false;
      if (!Groups.Equals(other.Groups)) return false;
      if(!frozenBalances_.Equals(other.frozenBalances_)) return false;
      if(!voteInfos_.Equals(other.voteInfos_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Balance != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Balance);
      if (gasInfo_ != null) hash ^= GasInfo.GetHashCode();
      if (ramInfo_ != null) hash ^= RamInfo.GetHashCode();
      hash ^= Permissions.GetHashCode();
      hash ^= Groups.GetHashCode();
      hash ^= frozenBalances_.GetHashCode();
      hash ^= voteInfos_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Balance != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Balance);
      }
      if (gasInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(GasInfo);
      }
      if (ramInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RamInfo);
      }
      permissions_.WriteTo(output, _map_permissions_codec);
      groups_.WriteTo(output, _map_groups_codec);
      frozenBalances_.WriteTo(output, _repeated_frozenBalances_codec);
      voteInfos_.WriteTo(output, _repeated_voteInfos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Balance != 0D) {
        size += 1 + 8;
      }
      if (gasInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GasInfo);
      }
      if (ramInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RamInfo);
      }
      size += permissions_.CalculateSize(_map_permissions_codec);
      size += groups_.CalculateSize(_map_groups_codec);
      size += frozenBalances_.CalculateSize(_repeated_frozenBalances_codec);
      size += voteInfos_.CalculateSize(_repeated_voteInfos_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Account other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Balance != 0D) {
        Balance = other.Balance;
      }
      if (other.gasInfo_ != null) {
        if (gasInfo_ == null) {
          GasInfo = new global::IOSTSdk.Rpcpb.Account.Types.GasInfo();
        }
        GasInfo.MergeFrom(other.GasInfo);
      }
      if (other.ramInfo_ != null) {
        if (ramInfo_ == null) {
          RamInfo = new global::IOSTSdk.Rpcpb.Account.Types.RAMInfo();
        }
        RamInfo.MergeFrom(other.RamInfo);
      }
      permissions_.Add(other.permissions_);
      groups_.Add(other.groups_);
      frozenBalances_.Add(other.frozenBalances_);
      voteInfos_.Add(other.voteInfos_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 17: {
            Balance = input.ReadDouble();
            break;
          }
          case 26: {
            if (gasInfo_ == null) {
              GasInfo = new global::IOSTSdk.Rpcpb.Account.Types.GasInfo();
            }
            input.ReadMessage(GasInfo);
            break;
          }
          case 34: {
            if (ramInfo_ == null) {
              RamInfo = new global::IOSTSdk.Rpcpb.Account.Types.RAMInfo();
            }
            input.ReadMessage(RamInfo);
            break;
          }
          case 42: {
            permissions_.AddEntriesFrom(input, _map_permissions_codec);
            break;
          }
          case 50: {
            groups_.AddEntriesFrom(input, _map_groups_codec);
            break;
          }
          case 58: {
            frozenBalances_.AddEntriesFrom(input, _repeated_frozenBalances_codec);
            break;
          }
          case 66: {
            voteInfos_.AddEntriesFrom(input, _repeated_voteInfos_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Account message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The message defines account pledged coin information.
      /// </summary>
      public sealed partial class PledgeInfo : pb::IMessage<PledgeInfo> {
        private static readonly pb::MessageParser<PledgeInfo> _parser = new pb::MessageParser<PledgeInfo>(() => new PledgeInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PledgeInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::IOSTSdk.Rpcpb.Account.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PledgeInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PledgeInfo(PledgeInfo other) : this() {
          pledger_ = other.pledger_;
          amount_ = other.amount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PledgeInfo Clone() {
          return new PledgeInfo(this);
        }

        /// <summary>Field number for the "pledger" field.</summary>
        public const int PledgerFieldNumber = 1;
        private string pledger_ = "";
        /// <summary>
        /// the account who pledges
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Pledger {
          get { return pledger_; }
          set {
            pledger_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "amount" field.</summary>
        public const int AmountFieldNumber = 2;
        private double amount_;
        /// <summary>
        /// pledged amount
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PledgeInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PledgeInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Pledger != other.Pledger) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Amount, other.Amount)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Pledger.Length != 0) hash ^= Pledger.GetHashCode();
          if (Amount != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Amount);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Pledger.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Pledger);
          }
          if (Amount != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(Amount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Pledger.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Pledger);
          }
          if (Amount != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PledgeInfo other) {
          if (other == null) {
            return;
          }
          if (other.Pledger.Length != 0) {
            Pledger = other.Pledger;
          }
          if (other.Amount != 0D) {
            Amount = other.Amount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Pledger = input.ReadString();
                break;
              }
              case 17: {
                Amount = input.ReadDouble();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// The message defines account gas information.
      /// </summary>
      public sealed partial class GasInfo : pb::IMessage<GasInfo> {
        private static readonly pb::MessageParser<GasInfo> _parser = new pb::MessageParser<GasInfo>(() => new GasInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GasInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::IOSTSdk.Rpcpb.Account.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GasInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GasInfo(GasInfo other) : this() {
          currentTotal_ = other.currentTotal_;
          transferableGas_ = other.transferableGas_;
          pledgeGas_ = other.pledgeGas_;
          increaseSpeed_ = other.increaseSpeed_;
          limit_ = other.limit_;
          pledgedInfo_ = other.pledgedInfo_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GasInfo Clone() {
          return new GasInfo(this);
        }

        /// <summary>Field number for the "current_total" field.</summary>
        public const int CurrentTotalFieldNumber = 1;
        private double currentTotal_;
        /// <summary>
        /// current total gas amount
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double CurrentTotal {
          get { return currentTotal_; }
          set {
            currentTotal_ = value;
          }
        }

        /// <summary>Field number for the "transferable_gas" field.</summary>
        public const int TransferableGasFieldNumber = 2;
        private double transferableGas_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double TransferableGas {
          get { return transferableGas_; }
          set {
            transferableGas_ = value;
          }
        }

        /// <summary>Field number for the "pledge_gas" field.</summary>
        public const int PledgeGasFieldNumber = 3;
        private double pledgeGas_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double PledgeGas {
          get { return pledgeGas_; }
          set {
            pledgeGas_ = value;
          }
        }

        /// <summary>Field number for the "increase_speed" field.</summary>
        public const int IncreaseSpeedFieldNumber = 4;
        private double increaseSpeed_;
        /// <summary>
        /// gas increase speed
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double IncreaseSpeed {
          get { return increaseSpeed_; }
          set {
            increaseSpeed_ = value;
          }
        }

        /// <summary>Field number for the "limit" field.</summary>
        public const int LimitFieldNumber = 5;
        private double limit_;
        /// <summary>
        /// gas limit
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Limit {
          get { return limit_; }
          set {
            limit_ = value;
          }
        }

        /// <summary>Field number for the "pledged_info" field.</summary>
        public const int PledgedInfoFieldNumber = 6;
        private static readonly pb::FieldCodec<global::IOSTSdk.Rpcpb.Account.Types.PledgeInfo> _repeated_pledgedInfo_codec
            = pb::FieldCodec.ForMessage(50, global::IOSTSdk.Rpcpb.Account.Types.PledgeInfo.Parser);
        private readonly pbc::RepeatedField<global::IOSTSdk.Rpcpb.Account.Types.PledgeInfo> pledgedInfo_ = new pbc::RepeatedField<global::IOSTSdk.Rpcpb.Account.Types.PledgeInfo>();
        /// <summary>
        /// pledge information
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::IOSTSdk.Rpcpb.Account.Types.PledgeInfo> PledgedInfo {
          get { return pledgedInfo_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GasInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GasInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CurrentTotal, other.CurrentTotal)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TransferableGas, other.TransferableGas)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PledgeGas, other.PledgeGas)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(IncreaseSpeed, other.IncreaseSpeed)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Limit, other.Limit)) return false;
          if(!pledgedInfo_.Equals(other.pledgedInfo_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CurrentTotal != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CurrentTotal);
          if (TransferableGas != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TransferableGas);
          if (PledgeGas != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PledgeGas);
          if (IncreaseSpeed != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(IncreaseSpeed);
          if (Limit != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Limit);
          hash ^= pledgedInfo_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CurrentTotal != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(CurrentTotal);
          }
          if (TransferableGas != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(TransferableGas);
          }
          if (PledgeGas != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(PledgeGas);
          }
          if (IncreaseSpeed != 0D) {
            output.WriteRawTag(33);
            output.WriteDouble(IncreaseSpeed);
          }
          if (Limit != 0D) {
            output.WriteRawTag(41);
            output.WriteDouble(Limit);
          }
          pledgedInfo_.WriteTo(output, _repeated_pledgedInfo_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CurrentTotal != 0D) {
            size += 1 + 8;
          }
          if (TransferableGas != 0D) {
            size += 1 + 8;
          }
          if (PledgeGas != 0D) {
            size += 1 + 8;
          }
          if (IncreaseSpeed != 0D) {
            size += 1 + 8;
          }
          if (Limit != 0D) {
            size += 1 + 8;
          }
          size += pledgedInfo_.CalculateSize(_repeated_pledgedInfo_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GasInfo other) {
          if (other == null) {
            return;
          }
          if (other.CurrentTotal != 0D) {
            CurrentTotal = other.CurrentTotal;
          }
          if (other.TransferableGas != 0D) {
            TransferableGas = other.TransferableGas;
          }
          if (other.PledgeGas != 0D) {
            PledgeGas = other.PledgeGas;
          }
          if (other.IncreaseSpeed != 0D) {
            IncreaseSpeed = other.IncreaseSpeed;
          }
          if (other.Limit != 0D) {
            Limit = other.Limit;
          }
          pledgedInfo_.Add(other.pledgedInfo_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                CurrentTotal = input.ReadDouble();
                break;
              }
              case 17: {
                TransferableGas = input.ReadDouble();
                break;
              }
              case 25: {
                PledgeGas = input.ReadDouble();
                break;
              }
              case 33: {
                IncreaseSpeed = input.ReadDouble();
                break;
              }
              case 41: {
                Limit = input.ReadDouble();
                break;
              }
              case 50: {
                pledgedInfo_.AddEntriesFrom(input, _repeated_pledgedInfo_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// The message defines account ram information.
      /// </summary>
      public sealed partial class RAMInfo : pb::IMessage<RAMInfo> {
        private static readonly pb::MessageParser<RAMInfo> _parser = new pb::MessageParser<RAMInfo>(() => new RAMInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RAMInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::IOSTSdk.Rpcpb.Account.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RAMInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RAMInfo(RAMInfo other) : this() {
          available_ = other.available_;
          used_ = other.used_;
          total_ = other.total_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RAMInfo Clone() {
          return new RAMInfo(this);
        }

        /// <summary>Field number for the "available" field.</summary>
        public const int AvailableFieldNumber = 1;
        private long available_;
        /// <summary>
        /// available ram bytes
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Available {
          get { return available_; }
          set {
            available_ = value;
          }
        }

        /// <summary>Field number for the "used" field.</summary>
        public const int UsedFieldNumber = 2;
        private long used_;
        /// <summary>
        /// used ram bytes
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Used {
          get { return used_; }
          set {
            used_ = value;
          }
        }

        /// <summary>Field number for the "total" field.</summary>
        public const int TotalFieldNumber = 3;
        private long total_;
        /// <summary>
        /// total ram bytes
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Total {
          get { return total_; }
          set {
            total_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RAMInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RAMInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Available != other.Available) return false;
          if (Used != other.Used) return false;
          if (Total != other.Total) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Available != 0L) hash ^= Available.GetHashCode();
          if (Used != 0L) hash ^= Used.GetHashCode();
          if (Total != 0L) hash ^= Total.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Available != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(Available);
          }
          if (Used != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Used);
          }
          if (Total != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(Total);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Available != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Available);
          }
          if (Used != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Used);
          }
          if (Total != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Total);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RAMInfo other) {
          if (other == null) {
            return;
          }
          if (other.Available != 0L) {
            Available = other.Available;
          }
          if (other.Used != 0L) {
            Used = other.Used;
          }
          if (other.Total != 0L) {
            Total = other.Total;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Available = input.ReadInt64();
                break;
              }
              case 16: {
                Used = input.ReadInt64();
                break;
              }
              case 24: {
                Total = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// The message defines permission item.
      /// </summary>
      public sealed partial class Item : pb::IMessage<Item> {
        private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Item> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::IOSTSdk.Rpcpb.Account.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Item() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Item(Item other) : this() {
          id_ = other.id_;
          isKeyPair_ = other.isKeyPair_;
          weight_ = other.weight_;
          permission_ = other.permission_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Item Clone() {
          return new Item(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        /// <summary>
        /// permission name or key pair id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "is_key_pair" field.</summary>
        public const int IsKeyPairFieldNumber = 2;
        private bool isKeyPair_;
        /// <summary>
        /// whether it's a key pair
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsKeyPair {
          get { return isKeyPair_; }
          set {
            isKeyPair_ = value;
          }
        }

        /// <summary>Field number for the "weight" field.</summary>
        public const int WeightFieldNumber = 3;
        private long weight_;
        /// <summary>
        /// permission weight
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Weight {
          get { return weight_; }
          set {
            weight_ = value;
          }
        }

        /// <summary>Field number for the "permission" field.</summary>
        public const int PermissionFieldNumber = 4;
        private string permission_ = "";
        /// <summary>
        /// permission
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Permission {
          get { return permission_; }
          set {
            permission_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Item);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Item other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (IsKeyPair != other.IsKeyPair) return false;
          if (Weight != other.Weight) return false;
          if (Permission != other.Permission) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (IsKeyPair != false) hash ^= IsKeyPair.GetHashCode();
          if (Weight != 0L) hash ^= Weight.GetHashCode();
          if (Permission.Length != 0) hash ^= Permission.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (IsKeyPair != false) {
            output.WriteRawTag(16);
            output.WriteBool(IsKeyPair);
          }
          if (Weight != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(Weight);
          }
          if (Permission.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(Permission);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (IsKeyPair != false) {
            size += 1 + 1;
          }
          if (Weight != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Weight);
          }
          if (Permission.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Permission);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Item other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.IsKeyPair != false) {
            IsKeyPair = other.IsKeyPair;
          }
          if (other.Weight != 0L) {
            Weight = other.Weight;
          }
          if (other.Permission.Length != 0) {
            Permission = other.Permission;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 16: {
                IsKeyPair = input.ReadBool();
                break;
              }
              case 24: {
                Weight = input.ReadInt64();
                break;
              }
              case 34: {
                Permission = input.ReadString();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// The message defines a permission group.
      /// </summary>
      public sealed partial class Group : pb::IMessage<Group> {
        private static readonly pb::MessageParser<Group> _parser = new pb::MessageParser<Group>(() => new Group());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Group> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::IOSTSdk.Rpcpb.Account.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Group() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Group(Group other) : this() {
          name_ = other.name_;
          items_ = other.items_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Group Clone() {
          return new Group(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        /// <summary>
        /// group name
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "items" field.</summary>
        public const int ItemsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::IOSTSdk.Rpcpb.Account.Types.Item> _repeated_items_codec
            = pb::FieldCodec.ForMessage(18, global::IOSTSdk.Rpcpb.Account.Types.Item.Parser);
        private readonly pbc::RepeatedField<global::IOSTSdk.Rpcpb.Account.Types.Item> items_ = new pbc::RepeatedField<global::IOSTSdk.Rpcpb.Account.Types.Item>();
        /// <summary>
        /// permission items
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::IOSTSdk.Rpcpb.Account.Types.Item> Items {
          get { return items_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Group);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Group other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if(!items_.Equals(other.items_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          hash ^= items_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          items_.WriteTo(output, _repeated_items_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          size += items_.CalculateSize(_repeated_items_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Group other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          items_.Add(other.items_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// The message defines the permission struct.
      /// </summary>
      public sealed partial class Permission : pb::IMessage<Permission> {
        private static readonly pb::MessageParser<Permission> _parser = new pb::MessageParser<Permission>(() => new Permission());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Permission> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::IOSTSdk.Rpcpb.Account.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Permission() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Permission(Permission other) : this() {
          name_ = other.name_;
          groupNames_ = other.groupNames_.Clone();
          items_ = other.items_.Clone();
          threshold_ = other.threshold_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Permission Clone() {
          return new Permission(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        /// <summary>
        /// permission name
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "group_names" field.</summary>
        public const int GroupNamesFieldNumber = 2;
        private static readonly pb::FieldCodec<string> _repeated_groupNames_codec
            = pb::FieldCodec.ForString(18);
        private readonly pbc::RepeatedField<string> groupNames_ = new pbc::RepeatedField<string>();
        /// <summary>
        /// permission groups
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> GroupNames {
          get { return groupNames_; }
        }

        /// <summary>Field number for the "items" field.</summary>
        public const int ItemsFieldNumber = 3;
        private static readonly pb::FieldCodec<global::IOSTSdk.Rpcpb.Account.Types.Item> _repeated_items_codec
            = pb::FieldCodec.ForMessage(26, global::IOSTSdk.Rpcpb.Account.Types.Item.Parser);
        private readonly pbc::RepeatedField<global::IOSTSdk.Rpcpb.Account.Types.Item> items_ = new pbc::RepeatedField<global::IOSTSdk.Rpcpb.Account.Types.Item>();
        /// <summary>
        /// permission items
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::IOSTSdk.Rpcpb.Account.Types.Item> Items {
          get { return items_; }
        }

        /// <summary>Field number for the "threshold" field.</summary>
        public const int ThresholdFieldNumber = 4;
        private long threshold_;
        /// <summary>
        /// permission threshold
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Threshold {
          get { return threshold_; }
          set {
            threshold_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Permission);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Permission other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if(!groupNames_.Equals(other.groupNames_)) return false;
          if(!items_.Equals(other.items_)) return false;
          if (Threshold != other.Threshold) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          hash ^= groupNames_.GetHashCode();
          hash ^= items_.GetHashCode();
          if (Threshold != 0L) hash ^= Threshold.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          groupNames_.WriteTo(output, _repeated_groupNames_codec);
          items_.WriteTo(output, _repeated_items_codec);
          if (Threshold != 0L) {
            output.WriteRawTag(32);
            output.WriteInt64(Threshold);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          size += groupNames_.CalculateSize(_repeated_groupNames_codec);
          size += items_.CalculateSize(_repeated_items_codec);
          if (Threshold != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Threshold);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Permission other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          groupNames_.Add(other.groupNames_);
          items_.Add(other.items_);
          if (other.Threshold != 0L) {
            Threshold = other.Threshold;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                groupNames_.AddEntriesFrom(input, _repeated_groupNames_codec);
                break;
              }
              case 26: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
              case 32: {
                Threshold = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// The message defines the get account request.
  /// </summary>
  public sealed partial class GetAccountRequest : pb::IMessage<GetAccountRequest> {
    private static readonly pb::MessageParser<GetAccountRequest> _parser = new pb::MessageParser<GetAccountRequest>(() => new GetAccountRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAccountRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccountRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccountRequest(GetAccountRequest other) : this() {
      name_ = other.name_;
      byLongestChain_ = other.byLongestChain_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccountRequest Clone() {
      return new GetAccountRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// account name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "by_longest_chain" field.</summary>
    public const int ByLongestChainFieldNumber = 2;
    private bool byLongestChain_;
    /// <summary>
    /// get account by longest chain's head block or last irreversible block
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ByLongestChain {
      get { return byLongestChain_; }
      set {
        byLongestChain_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAccountRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAccountRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (ByLongestChain != other.ByLongestChain) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ByLongestChain != false) hash ^= ByLongestChain.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (ByLongestChain != false) {
        output.WriteRawTag(16);
        output.WriteBool(ByLongestChain);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ByLongestChain != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAccountRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ByLongestChain != false) {
        ByLongestChain = other.ByLongestChain;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            ByLongestChain = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message defines the contract struct.
  /// </summary>
  public sealed partial class Contract : pb::IMessage<Contract> {
    private static readonly pb::MessageParser<Contract> _parser = new pb::MessageParser<Contract>(() => new Contract());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Contract> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Contract() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Contract(Contract other) : this() {
      id_ = other.id_;
      code_ = other.code_;
      language_ = other.language_;
      version_ = other.version_;
      abis_ = other.abis_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Contract Clone() {
      return new Contract(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// contract id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 2;
    private string code_ = "";
    /// <summary>
    /// contract code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 3;
    private string language_ = "";
    /// <summary>
    /// contract language
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Language {
      get { return language_; }
      set {
        language_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 4;
    private string version_ = "";
    /// <summary>
    /// contract version
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "abis" field.</summary>
    public const int AbisFieldNumber = 5;
    private static readonly pb::FieldCodec<global::IOSTSdk.Rpcpb.Contract.Types.ABI> _repeated_abis_codec
        = pb::FieldCodec.ForMessage(42, global::IOSTSdk.Rpcpb.Contract.Types.ABI.Parser);
    private readonly pbc::RepeatedField<global::IOSTSdk.Rpcpb.Contract.Types.ABI> abis_ = new pbc::RepeatedField<global::IOSTSdk.Rpcpb.Contract.Types.ABI>();
    /// <summary>
    /// contract abis
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IOSTSdk.Rpcpb.Contract.Types.ABI> Abis {
      get { return abis_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Contract);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Contract other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Code != other.Code) return false;
      if (Language != other.Language) return false;
      if (Version != other.Version) return false;
      if(!abis_.Equals(other.abis_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      if (Language.Length != 0) hash ^= Language.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      hash ^= abis_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Code.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Code);
      }
      if (Language.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Language);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Version);
      }
      abis_.WriteTo(output, _repeated_abis_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
      }
      if (Language.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Language);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      size += abis_.CalculateSize(_repeated_abis_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Contract other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
      if (other.Language.Length != 0) {
        Language = other.Language;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      abis_.Add(other.abis_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Code = input.ReadString();
            break;
          }
          case 26: {
            Language = input.ReadString();
            break;
          }
          case 34: {
            Version = input.ReadString();
            break;
          }
          case 42: {
            abis_.AddEntriesFrom(input, _repeated_abis_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Contract message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The message defines the ABI struct.
      /// </summary>
      public sealed partial class ABI : pb::IMessage<ABI> {
        private static readonly pb::MessageParser<ABI> _parser = new pb::MessageParser<ABI>(() => new ABI());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ABI> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::IOSTSdk.Rpcpb.Contract.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ABI() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ABI(ABI other) : this() {
          name_ = other.name_;
          args_ = other.args_.Clone();
          amountLimit_ = other.amountLimit_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ABI Clone() {
          return new ABI(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        /// <summary>
        /// abi name
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "args" field.</summary>
        public const int ArgsFieldNumber = 2;
        private static readonly pb::FieldCodec<string> _repeated_args_codec
            = pb::FieldCodec.ForString(18);
        private readonly pbc::RepeatedField<string> args_ = new pbc::RepeatedField<string>();
        /// <summary>
        /// abi arguments
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Args {
          get { return args_; }
        }

        /// <summary>Field number for the "amount_limit" field.</summary>
        public const int AmountLimitFieldNumber = 3;
        private static readonly pb::FieldCodec<global::IOSTSdk.Rpcpb.AmountLimit> _repeated_amountLimit_codec
            = pb::FieldCodec.ForMessage(26, global::IOSTSdk.Rpcpb.AmountLimit.Parser);
        private readonly pbc::RepeatedField<global::IOSTSdk.Rpcpb.AmountLimit> amountLimit_ = new pbc::RepeatedField<global::IOSTSdk.Rpcpb.AmountLimit>();
        /// <summary>
        /// abi amount limt
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::IOSTSdk.Rpcpb.AmountLimit> AmountLimit {
          get { return amountLimit_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ABI);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ABI other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if(!args_.Equals(other.args_)) return false;
          if(!amountLimit_.Equals(other.amountLimit_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          hash ^= args_.GetHashCode();
          hash ^= amountLimit_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          args_.WriteTo(output, _repeated_args_codec);
          amountLimit_.WriteTo(output, _repeated_amountLimit_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          size += args_.CalculateSize(_repeated_args_codec);
          size += amountLimit_.CalculateSize(_repeated_amountLimit_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ABI other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          args_.Add(other.args_);
          amountLimit_.Add(other.amountLimit_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                args_.AddEntriesFrom(input, _repeated_args_codec);
                break;
              }
              case 26: {
                amountLimit_.AddEntriesFrom(input, _repeated_amountLimit_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// The message defines get contract request.
  /// </summary>
  public sealed partial class GetContractRequest : pb::IMessage<GetContractRequest> {
    private static readonly pb::MessageParser<GetContractRequest> _parser = new pb::MessageParser<GetContractRequest>(() => new GetContractRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetContractRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetContractRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetContractRequest(GetContractRequest other) : this() {
      id_ = other.id_;
      byLongestChain_ = other.byLongestChain_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetContractRequest Clone() {
      return new GetContractRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// contract id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "by_longest_chain" field.</summary>
    public const int ByLongestChainFieldNumber = 2;
    private bool byLongestChain_;
    /// <summary>
    /// get data by longest chain's head block or last irreversible block
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ByLongestChain {
      get { return byLongestChain_; }
      set {
        byLongestChain_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetContractRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetContractRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ByLongestChain != other.ByLongestChain) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (ByLongestChain != false) hash ^= ByLongestChain.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (ByLongestChain != false) {
        output.WriteRawTag(16);
        output.WriteBool(ByLongestChain);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (ByLongestChain != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetContractRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.ByLongestChain != false) {
        ByLongestChain = other.ByLongestChain;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            ByLongestChain = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message defines get contract storage request.
  /// </summary>
  public sealed partial class GetContractStorageRequest : pb::IMessage<GetContractStorageRequest> {
    private static readonly pb::MessageParser<GetContractStorageRequest> _parser = new pb::MessageParser<GetContractStorageRequest>(() => new GetContractStorageRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetContractStorageRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetContractStorageRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetContractStorageRequest(GetContractStorageRequest other) : this() {
      id_ = other.id_;
      key_ = other.key_;
      field_ = other.field_;
      byLongestChain_ = other.byLongestChain_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetContractStorageRequest Clone() {
      return new GetContractStorageRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// contract id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private string key_ = "";
    /// <summary>
    /// the key in the StateDB
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "field" field.</summary>
    public const int FieldFieldNumber = 3;
    private string field_ = "";
    /// <summary>
    /// get the value from StateDB, field is needed if StateDB[key] is a map.(we get StateDB[key][field] in this case)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Field {
      get { return field_; }
      set {
        field_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "by_longest_chain" field.</summary>
    public const int ByLongestChainFieldNumber = 4;
    private bool byLongestChain_;
    /// <summary>
    /// get data by longest chain's head block or last irreversible block
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ByLongestChain {
      get { return byLongestChain_; }
      set {
        byLongestChain_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetContractStorageRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetContractStorageRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Key != other.Key) return false;
      if (Field != other.Field) return false;
      if (ByLongestChain != other.ByLongestChain) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Field.Length != 0) hash ^= Field.GetHashCode();
      if (ByLongestChain != false) hash ^= ByLongestChain.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (Field.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Field);
      }
      if (ByLongestChain != false) {
        output.WriteRawTag(32);
        output.WriteBool(ByLongestChain);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Field.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Field);
      }
      if (ByLongestChain != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetContractStorageRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Field.Length != 0) {
        Field = other.Field;
      }
      if (other.ByLongestChain != false) {
        ByLongestChain = other.ByLongestChain;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
          case 26: {
            Field = input.ReadString();
            break;
          }
          case 32: {
            ByLongestChain = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message defines get contract storage response.
  /// </summary>
  public sealed partial class GetContractStorageResponse : pb::IMessage<GetContractStorageResponse> {
    private static readonly pb::MessageParser<GetContractStorageResponse> _parser = new pb::MessageParser<GetContractStorageResponse>(() => new GetContractStorageResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetContractStorageResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetContractStorageResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetContractStorageResponse(GetContractStorageResponse other) : this() {
      data_ = other.data_;
      blockHash_ = other.blockHash_;
      blockNumber_ = other.blockNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetContractStorageResponse Clone() {
      return new GetContractStorageResponse(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private string data_ = "";
    /// <summary>
    /// the json string data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "block_hash" field.</summary>
    public const int BlockHashFieldNumber = 2;
    private string blockHash_ = "";
    /// <summary>
    /// block hash
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BlockHash {
      get { return blockHash_; }
      set {
        blockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "block_number" field.</summary>
    public const int BlockNumberFieldNumber = 3;
    private long blockNumber_;
    /// <summary>
    /// block number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BlockNumber {
      get { return blockNumber_; }
      set {
        blockNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetContractStorageResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetContractStorageResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      if (BlockHash != other.BlockHash) return false;
      if (BlockNumber != other.BlockNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (BlockHash.Length != 0) hash ^= BlockHash.GetHashCode();
      if (BlockNumber != 0L) hash ^= BlockNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Data);
      }
      if (BlockHash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BlockHash);
      }
      if (BlockNumber != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(BlockNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      if (BlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BlockHash);
      }
      if (BlockNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BlockNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetContractStorageResponse other) {
      if (other == null) {
        return;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.BlockHash.Length != 0) {
        BlockHash = other.BlockHash;
      }
      if (other.BlockNumber != 0L) {
        BlockNumber = other.BlockNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Data = input.ReadString();
            break;
          }
          case 18: {
            BlockHash = input.ReadString();
            break;
          }
          case 24: {
            BlockNumber = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message defines get batch contract storage request.
  /// </summary>
  public sealed partial class GetBatchContractStorageRequest : pb::IMessage<GetBatchContractStorageRequest> {
    private static readonly pb::MessageParser<GetBatchContractStorageRequest> _parser = new pb::MessageParser<GetBatchContractStorageRequest>(() => new GetBatchContractStorageRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBatchContractStorageRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBatchContractStorageRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBatchContractStorageRequest(GetBatchContractStorageRequest other) : this() {
      id_ = other.id_;
      keyFields_ = other.keyFields_.Clone();
      byLongestChain_ = other.byLongestChain_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBatchContractStorageRequest Clone() {
      return new GetBatchContractStorageRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// contract id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key_fields" field.</summary>
    public const int KeyFieldsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::IOSTSdk.Rpcpb.GetBatchContractStorageRequest.Types.KeyField> _repeated_keyFields_codec
        = pb::FieldCodec.ForMessage(18, global::IOSTSdk.Rpcpb.GetBatchContractStorageRequest.Types.KeyField.Parser);
    private readonly pbc::RepeatedField<global::IOSTSdk.Rpcpb.GetBatchContractStorageRequest.Types.KeyField> keyFields_ = new pbc::RepeatedField<global::IOSTSdk.Rpcpb.GetBatchContractStorageRequest.Types.KeyField>();
    /// <summary>
    /// the batch query
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IOSTSdk.Rpcpb.GetBatchContractStorageRequest.Types.KeyField> KeyFields {
      get { return keyFields_; }
    }

    /// <summary>Field number for the "by_longest_chain" field.</summary>
    public const int ByLongestChainFieldNumber = 3;
    private bool byLongestChain_;
    /// <summary>
    /// get data by longest chain's head block or last irreversible block
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ByLongestChain {
      get { return byLongestChain_; }
      set {
        byLongestChain_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBatchContractStorageRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBatchContractStorageRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!keyFields_.Equals(other.keyFields_)) return false;
      if (ByLongestChain != other.ByLongestChain) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      hash ^= keyFields_.GetHashCode();
      if (ByLongestChain != false) hash ^= ByLongestChain.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      keyFields_.WriteTo(output, _repeated_keyFields_codec);
      if (ByLongestChain != false) {
        output.WriteRawTag(24);
        output.WriteBool(ByLongestChain);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      size += keyFields_.CalculateSize(_repeated_keyFields_codec);
      if (ByLongestChain != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBatchContractStorageRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      keyFields_.Add(other.keyFields_);
      if (other.ByLongestChain != false) {
        ByLongestChain = other.ByLongestChain;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            keyFields_.AddEntriesFrom(input, _repeated_keyFields_codec);
            break;
          }
          case 24: {
            ByLongestChain = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GetBatchContractStorageRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The message defines GetContractStorage request params.
      /// </summary>
      public sealed partial class KeyField : pb::IMessage<KeyField> {
        private static readonly pb::MessageParser<KeyField> _parser = new pb::MessageParser<KeyField>(() => new KeyField());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<KeyField> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::IOSTSdk.Rpcpb.GetBatchContractStorageRequest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KeyField() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KeyField(KeyField other) : this() {
          key_ = other.key_;
          field_ = other.field_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KeyField Clone() {
          return new KeyField(this);
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 1;
        private string key_ = "";
        /// <summary>
        /// the key in StateDB
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Key {
          get { return key_; }
          set {
            key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "field" field.</summary>
        public const int FieldFieldNumber = 2;
        private string field_ = "";
        /// <summary>
        /// get the value from StateDB, fields is needed if StateDB[key] is a map.(we get StateDB[key][field] in this case)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Field {
          get { return field_; }
          set {
            field_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as KeyField);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(KeyField other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Key != other.Key) return false;
          if (Field != other.Field) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Key.Length != 0) hash ^= Key.GetHashCode();
          if (Field.Length != 0) hash ^= Field.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Key.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Key);
          }
          if (Field.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Field);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Key.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
          }
          if (Field.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Field);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(KeyField other) {
          if (other == null) {
            return;
          }
          if (other.Key.Length != 0) {
            Key = other.Key;
          }
          if (other.Field.Length != 0) {
            Field = other.Field;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Key = input.ReadString();
                break;
              }
              case 18: {
                Field = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// The message defines get batch contract storage response.
  /// </summary>
  public sealed partial class GetBatchContractStorageResponse : pb::IMessage<GetBatchContractStorageResponse> {
    private static readonly pb::MessageParser<GetBatchContractStorageResponse> _parser = new pb::MessageParser<GetBatchContractStorageResponse>(() => new GetBatchContractStorageResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBatchContractStorageResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBatchContractStorageResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBatchContractStorageResponse(GetBatchContractStorageResponse other) : this() {
      datas_ = other.datas_.Clone();
      blockHash_ = other.blockHash_;
      blockNumber_ = other.blockNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBatchContractStorageResponse Clone() {
      return new GetBatchContractStorageResponse(this);
    }

    /// <summary>Field number for the "datas" field.</summary>
    public const int DatasFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_datas_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> datas_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// the repeated json string data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Datas {
      get { return datas_; }
    }

    /// <summary>Field number for the "block_hash" field.</summary>
    public const int BlockHashFieldNumber = 2;
    private string blockHash_ = "";
    /// <summary>
    /// block hash
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BlockHash {
      get { return blockHash_; }
      set {
        blockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "block_number" field.</summary>
    public const int BlockNumberFieldNumber = 3;
    private long blockNumber_;
    /// <summary>
    /// block number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BlockNumber {
      get { return blockNumber_; }
      set {
        blockNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBatchContractStorageResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBatchContractStorageResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!datas_.Equals(other.datas_)) return false;
      if (BlockHash != other.BlockHash) return false;
      if (BlockNumber != other.BlockNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= datas_.GetHashCode();
      if (BlockHash.Length != 0) hash ^= BlockHash.GetHashCode();
      if (BlockNumber != 0L) hash ^= BlockNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      datas_.WriteTo(output, _repeated_datas_codec);
      if (BlockHash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BlockHash);
      }
      if (BlockNumber != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(BlockNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += datas_.CalculateSize(_repeated_datas_codec);
      if (BlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BlockHash);
      }
      if (BlockNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BlockNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBatchContractStorageResponse other) {
      if (other == null) {
        return;
      }
      datas_.Add(other.datas_);
      if (other.BlockHash.Length != 0) {
        BlockHash = other.BlockHash;
      }
      if (other.BlockNumber != 0L) {
        BlockNumber = other.BlockNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            datas_.AddEntriesFrom(input, _repeated_datas_codec);
            break;
          }
          case 18: {
            BlockHash = input.ReadString();
            break;
          }
          case 24: {
            BlockNumber = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message defines get contract storage request.
  /// </summary>
  public sealed partial class GetContractStorageFieldsRequest : pb::IMessage<GetContractStorageFieldsRequest> {
    private static readonly pb::MessageParser<GetContractStorageFieldsRequest> _parser = new pb::MessageParser<GetContractStorageFieldsRequest>(() => new GetContractStorageFieldsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetContractStorageFieldsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetContractStorageFieldsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetContractStorageFieldsRequest(GetContractStorageFieldsRequest other) : this() {
      id_ = other.id_;
      key_ = other.key_;
      byLongestChain_ = other.byLongestChain_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetContractStorageFieldsRequest Clone() {
      return new GetContractStorageFieldsRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// contract id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private string key_ = "";
    /// <summary>
    /// get the fields from StateDB
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "by_longest_chain" field.</summary>
    public const int ByLongestChainFieldNumber = 3;
    private bool byLongestChain_;
    /// <summary>
    /// get data by longest chain's head block or last irreversible block
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ByLongestChain {
      get { return byLongestChain_; }
      set {
        byLongestChain_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetContractStorageFieldsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetContractStorageFieldsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Key != other.Key) return false;
      if (ByLongestChain != other.ByLongestChain) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (ByLongestChain != false) hash ^= ByLongestChain.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (ByLongestChain != false) {
        output.WriteRawTag(24);
        output.WriteBool(ByLongestChain);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (ByLongestChain != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetContractStorageFieldsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.ByLongestChain != false) {
        ByLongestChain = other.ByLongestChain;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
          case 24: {
            ByLongestChain = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message defines get contract storage response.
  /// </summary>
  public sealed partial class GetContractStorageFieldsResponse : pb::IMessage<GetContractStorageFieldsResponse> {
    private static readonly pb::MessageParser<GetContractStorageFieldsResponse> _parser = new pb::MessageParser<GetContractStorageFieldsResponse>(() => new GetContractStorageFieldsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetContractStorageFieldsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetContractStorageFieldsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetContractStorageFieldsResponse(GetContractStorageFieldsResponse other) : this() {
      fields_ = other.fields_.Clone();
      blockHash_ = other.blockHash_;
      blockNumber_ = other.blockNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetContractStorageFieldsResponse Clone() {
      return new GetContractStorageFieldsResponse(this);
    }

    /// <summary>Field number for the "fields" field.</summary>
    public const int FieldsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_fields_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> fields_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// the fields.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Fields {
      get { return fields_; }
    }

    /// <summary>Field number for the "block_hash" field.</summary>
    public const int BlockHashFieldNumber = 2;
    private string blockHash_ = "";
    /// <summary>
    /// block hash
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BlockHash {
      get { return blockHash_; }
      set {
        blockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "block_number" field.</summary>
    public const int BlockNumberFieldNumber = 3;
    private long blockNumber_;
    /// <summary>
    /// block number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BlockNumber {
      get { return blockNumber_; }
      set {
        blockNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetContractStorageFieldsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetContractStorageFieldsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!fields_.Equals(other.fields_)) return false;
      if (BlockHash != other.BlockHash) return false;
      if (BlockNumber != other.BlockNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= fields_.GetHashCode();
      if (BlockHash.Length != 0) hash ^= BlockHash.GetHashCode();
      if (BlockNumber != 0L) hash ^= BlockNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      fields_.WriteTo(output, _repeated_fields_codec);
      if (BlockHash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BlockHash);
      }
      if (BlockNumber != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(BlockNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += fields_.CalculateSize(_repeated_fields_codec);
      if (BlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BlockHash);
      }
      if (BlockNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BlockNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetContractStorageFieldsResponse other) {
      if (other == null) {
        return;
      }
      fields_.Add(other.fields_);
      if (other.BlockHash.Length != 0) {
        BlockHash = other.BlockHash;
      }
      if (other.BlockNumber != 0L) {
        BlockNumber = other.BlockNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            fields_.AddEntriesFrom(input, _repeated_fields_codec);
            break;
          }
          case 18: {
            BlockHash = input.ReadString();
            break;
          }
          case 24: {
            BlockNumber = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message defines send transaction response.
  /// </summary>
  public sealed partial class SendTransactionResponse : pb::IMessage<SendTransactionResponse> {
    private static readonly pb::MessageParser<SendTransactionResponse> _parser = new pb::MessageParser<SendTransactionResponse>(() => new SendTransactionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendTransactionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendTransactionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendTransactionResponse(SendTransactionResponse other) : this() {
      hash_ = other.hash_;
      preTxReceipt_ = other.preTxReceipt_ != null ? other.preTxReceipt_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendTransactionResponse Clone() {
      return new SendTransactionResponse(this);
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 1;
    private string hash_ = "";
    /// <summary>
    /// the final transaction hash
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hash {
      get { return hash_; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pre_tx_receipt" field.</summary>
    public const int PreTxReceiptFieldNumber = 2;
    private global::IOSTSdk.Rpcpb.TxReceipt preTxReceipt_;
    /// <summary>
    /// the tx_receipt of execution in advance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IOSTSdk.Rpcpb.TxReceipt PreTxReceipt {
      get { return preTxReceipt_; }
      set {
        preTxReceipt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendTransactionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendTransactionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Hash != other.Hash) return false;
      if (!object.Equals(PreTxReceipt, other.PreTxReceipt)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      if (preTxReceipt_ != null) hash ^= PreTxReceipt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Hash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Hash);
      }
      if (preTxReceipt_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PreTxReceipt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Hash);
      }
      if (preTxReceipt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PreTxReceipt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendTransactionResponse other) {
      if (other == null) {
        return;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
      if (other.preTxReceipt_ != null) {
        if (preTxReceipt_ == null) {
          PreTxReceipt = new global::IOSTSdk.Rpcpb.TxReceipt();
        }
        PreTxReceipt.MergeFrom(other.PreTxReceipt);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Hash = input.ReadString();
            break;
          }
          case 18: {
            if (preTxReceipt_ == null) {
              PreTxReceipt = new global::IOSTSdk.Rpcpb.TxReceipt();
            }
            input.ReadMessage(PreTxReceipt);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message defines get token balance response.
  /// </summary>
  public sealed partial class GetTokenBalanceResponse : pb::IMessage<GetTokenBalanceResponse> {
    private static readonly pb::MessageParser<GetTokenBalanceResponse> _parser = new pb::MessageParser<GetTokenBalanceResponse>(() => new GetTokenBalanceResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTokenBalanceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTokenBalanceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTokenBalanceResponse(GetTokenBalanceResponse other) : this() {
      balance_ = other.balance_;
      frozenBalances_ = other.frozenBalances_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTokenBalanceResponse Clone() {
      return new GetTokenBalanceResponse(this);
    }

    /// <summary>Field number for the "balance" field.</summary>
    public const int BalanceFieldNumber = 1;
    private double balance_;
    /// <summary>
    /// token balance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Balance {
      get { return balance_; }
      set {
        balance_ = value;
      }
    }

    /// <summary>Field number for the "frozen_balances" field.</summary>
    public const int FrozenBalancesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::IOSTSdk.Rpcpb.FrozenBalance> _repeated_frozenBalances_codec
        = pb::FieldCodec.ForMessage(18, global::IOSTSdk.Rpcpb.FrozenBalance.Parser);
    private readonly pbc::RepeatedField<global::IOSTSdk.Rpcpb.FrozenBalance> frozenBalances_ = new pbc::RepeatedField<global::IOSTSdk.Rpcpb.FrozenBalance>();
    /// <summary>
    /// frozen balance information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IOSTSdk.Rpcpb.FrozenBalance> FrozenBalances {
      get { return frozenBalances_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTokenBalanceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTokenBalanceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Balance, other.Balance)) return false;
      if(!frozenBalances_.Equals(other.frozenBalances_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Balance != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Balance);
      hash ^= frozenBalances_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Balance != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Balance);
      }
      frozenBalances_.WriteTo(output, _repeated_frozenBalances_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Balance != 0D) {
        size += 1 + 8;
      }
      size += frozenBalances_.CalculateSize(_repeated_frozenBalances_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTokenBalanceResponse other) {
      if (other == null) {
        return;
      }
      if (other.Balance != 0D) {
        Balance = other.Balance;
      }
      frozenBalances_.Add(other.frozenBalances_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Balance = input.ReadDouble();
            break;
          }
          case 18: {
            frozenBalances_.AddEntriesFrom(input, _repeated_frozenBalances_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message defines get token balance request.
  /// </summary>
  public sealed partial class GetTokenBalanceRequest : pb::IMessage<GetTokenBalanceRequest> {
    private static readonly pb::MessageParser<GetTokenBalanceRequest> _parser = new pb::MessageParser<GetTokenBalanceRequest>(() => new GetTokenBalanceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTokenBalanceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTokenBalanceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTokenBalanceRequest(GetTokenBalanceRequest other) : this() {
      account_ = other.account_;
      token_ = other.token_;
      byLongestChain_ = other.byLongestChain_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTokenBalanceRequest Clone() {
      return new GetTokenBalanceRequest(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    /// <summary>
    /// account name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 2;
    private string token_ = "";
    /// <summary>
    /// the token name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "by_longest_chain" field.</summary>
    public const int ByLongestChainFieldNumber = 3;
    private bool byLongestChain_;
    /// <summary>
    /// get data by longest chain's head block or last irreversible block
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ByLongestChain {
      get { return byLongestChain_; }
      set {
        byLongestChain_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTokenBalanceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTokenBalanceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (Token != other.Token) return false;
      if (ByLongestChain != other.ByLongestChain) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (ByLongestChain != false) hash ^= ByLongestChain.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      if (ByLongestChain != false) {
        output.WriteRawTag(24);
        output.WriteBool(ByLongestChain);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (ByLongestChain != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTokenBalanceRequest other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.ByLongestChain != false) {
        ByLongestChain = other.ByLongestChain;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
          case 24: {
            ByLongestChain = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message defines get token721 balance response.
  /// </summary>
  public sealed partial class GetToken721BalanceResponse : pb::IMessage<GetToken721BalanceResponse> {
    private static readonly pb::MessageParser<GetToken721BalanceResponse> _parser = new pb::MessageParser<GetToken721BalanceResponse>(() => new GetToken721BalanceResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetToken721BalanceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetToken721BalanceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetToken721BalanceResponse(GetToken721BalanceResponse other) : this() {
      balance_ = other.balance_;
      tokenIDs_ = other.tokenIDs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetToken721BalanceResponse Clone() {
      return new GetToken721BalanceResponse(this);
    }

    /// <summary>Field number for the "balance" field.</summary>
    public const int BalanceFieldNumber = 1;
    private long balance_;
    /// <summary>
    /// token balance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Balance {
      get { return balance_; }
      set {
        balance_ = value;
      }
    }

    /// <summary>Field number for the "tokenIDs" field.</summary>
    public const int TokenIDsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_tokenIDs_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> tokenIDs_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// balance information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> TokenIDs {
      get { return tokenIDs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetToken721BalanceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetToken721BalanceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Balance != other.Balance) return false;
      if(!tokenIDs_.Equals(other.tokenIDs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Balance != 0L) hash ^= Balance.GetHashCode();
      hash ^= tokenIDs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Balance != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Balance);
      }
      tokenIDs_.WriteTo(output, _repeated_tokenIDs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Balance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Balance);
      }
      size += tokenIDs_.CalculateSize(_repeated_tokenIDs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetToken721BalanceResponse other) {
      if (other == null) {
        return;
      }
      if (other.Balance != 0L) {
        Balance = other.Balance;
      }
      tokenIDs_.Add(other.tokenIDs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Balance = input.ReadInt64();
            break;
          }
          case 18: {
            tokenIDs_.AddEntriesFrom(input, _repeated_tokenIDs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message defines get token721 info request.
  /// </summary>
  public sealed partial class GetToken721InfoRequest : pb::IMessage<GetToken721InfoRequest> {
    private static readonly pb::MessageParser<GetToken721InfoRequest> _parser = new pb::MessageParser<GetToken721InfoRequest>(() => new GetToken721InfoRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetToken721InfoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetToken721InfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetToken721InfoRequest(GetToken721InfoRequest other) : this() {
      token_ = other.token_;
      tokenId_ = other.tokenId_;
      byLongestChain_ = other.byLongestChain_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetToken721InfoRequest Clone() {
      return new GetToken721InfoRequest(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    /// <summary>
    /// the token name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token_id" field.</summary>
    public const int TokenIdFieldNumber = 2;
    private string tokenId_ = "";
    /// <summary>
    /// token id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenId {
      get { return tokenId_; }
      set {
        tokenId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "by_longest_chain" field.</summary>
    public const int ByLongestChainFieldNumber = 3;
    private bool byLongestChain_;
    /// <summary>
    /// get data by longest chain's head block or last irreversible block
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ByLongestChain {
      get { return byLongestChain_; }
      set {
        byLongestChain_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetToken721InfoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetToken721InfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (TokenId != other.TokenId) return false;
      if (ByLongestChain != other.ByLongestChain) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (TokenId.Length != 0) hash ^= TokenId.GetHashCode();
      if (ByLongestChain != false) hash ^= ByLongestChain.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (TokenId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TokenId);
      }
      if (ByLongestChain != false) {
        output.WriteRawTag(24);
        output.WriteBool(ByLongestChain);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (TokenId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenId);
      }
      if (ByLongestChain != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetToken721InfoRequest other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.TokenId.Length != 0) {
        TokenId = other.TokenId;
      }
      if (other.ByLongestChain != false) {
        ByLongestChain = other.ByLongestChain;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 18: {
            TokenId = input.ReadString();
            break;
          }
          case 24: {
            ByLongestChain = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message defines get token721 metadata response.
  /// </summary>
  public sealed partial class GetToken721MetadataResponse : pb::IMessage<GetToken721MetadataResponse> {
    private static readonly pb::MessageParser<GetToken721MetadataResponse> _parser = new pb::MessageParser<GetToken721MetadataResponse>(() => new GetToken721MetadataResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetToken721MetadataResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetToken721MetadataResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetToken721MetadataResponse(GetToken721MetadataResponse other) : this() {
      metadata_ = other.metadata_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetToken721MetadataResponse Clone() {
      return new GetToken721MetadataResponse(this);
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 1;
    private string metadata_ = "";
    /// <summary>
    /// token metadata
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Metadata {
      get { return metadata_; }
      set {
        metadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetToken721MetadataResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetToken721MetadataResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Metadata != other.Metadata) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Metadata.Length != 0) hash ^= Metadata.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Metadata.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Metadata);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Metadata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Metadata);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetToken721MetadataResponse other) {
      if (other == null) {
        return;
      }
      if (other.Metadata.Length != 0) {
        Metadata = other.Metadata;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Metadata = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message defines get token721 owner response.
  /// </summary>
  public sealed partial class GetToken721OwnerResponse : pb::IMessage<GetToken721OwnerResponse> {
    private static readonly pb::MessageParser<GetToken721OwnerResponse> _parser = new pb::MessageParser<GetToken721OwnerResponse>(() => new GetToken721OwnerResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetToken721OwnerResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetToken721OwnerResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetToken721OwnerResponse(GetToken721OwnerResponse other) : this() {
      owner_ = other.owner_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetToken721OwnerResponse Clone() {
      return new GetToken721OwnerResponse(this);
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 1;
    private string owner_ = "";
    /// <summary>
    /// token owner
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Owner {
      get { return owner_; }
      set {
        owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetToken721OwnerResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetToken721OwnerResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Owner != other.Owner) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Owner.Length != 0) hash ^= Owner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Owner.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Owner.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Owner);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetToken721OwnerResponse other) {
      if (other == null) {
        return;
      }
      if (other.Owner.Length != 0) {
        Owner = other.Owner;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Owner = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message defines event struct.
  /// </summary>
  public sealed partial class Event : pb::IMessage<Event> {
    private static readonly pb::MessageParser<Event> _parser = new pb::MessageParser<Event>(() => new Event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event(Event other) : this() {
      topic_ = other.topic_;
      data_ = other.data_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event Clone() {
      return new Event(this);
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 1;
    private global::IOSTSdk.Rpcpb.Event.Types.Topic topic_ = 0;
    /// <summary>
    /// event topic
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IOSTSdk.Rpcpb.Event.Types.Topic Topic {
      get { return topic_; }
      set {
        topic_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private string data_ = "";
    /// <summary>
    /// event data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private long time_;
    /// <summary>
    /// event time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Topic != other.Topic) return false;
      if (Data != other.Data) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Topic != 0) hash ^= Topic.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Topic != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Topic);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Data);
      }
      if (Time != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Topic != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Topic);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Event other) {
      if (other == null) {
        return;
      }
      if (other.Topic != 0) {
        Topic = other.Topic;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Topic = (global::IOSTSdk.Rpcpb.Event.Types.Topic) input.ReadEnum();
            break;
          }
          case 18: {
            Data = input.ReadString();
            break;
          }
          case 24: {
            Time = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Event message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Topic {
        /// <summary>
        /// contract receipt
        /// </summary>
        [pbr::OriginalName("CONTRACT_RECEIPT")] ContractReceipt = 0,
        /// <summary>
        /// contract event
        /// </summary>
        [pbr::OriginalName("CONTRACT_EVENT")] ContractEvent = 1,
      }

    }
    #endregion

  }

  /// <summary>
  /// The message defines subscribe request.
  /// </summary>
  public sealed partial class SubscribeRequest : pb::IMessage<SubscribeRequest> {
    private static readonly pb::MessageParser<SubscribeRequest> _parser = new pb::MessageParser<SubscribeRequest>(() => new SubscribeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubscribeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeRequest(SubscribeRequest other) : this() {
      topics_ = other.topics_.Clone();
      filter_ = other.filter_ != null ? other.filter_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeRequest Clone() {
      return new SubscribeRequest(this);
    }

    /// <summary>Field number for the "topics" field.</summary>
    public const int TopicsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::IOSTSdk.Rpcpb.Event.Types.Topic> _repeated_topics_codec
        = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::IOSTSdk.Rpcpb.Event.Types.Topic) x);
    private readonly pbc::RepeatedField<global::IOSTSdk.Rpcpb.Event.Types.Topic> topics_ = new pbc::RepeatedField<global::IOSTSdk.Rpcpb.Event.Types.Topic>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IOSTSdk.Rpcpb.Event.Types.Topic> Topics {
      get { return topics_; }
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 2;
    private global::IOSTSdk.Rpcpb.SubscribeRequest.Types.Filter filter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IOSTSdk.Rpcpb.SubscribeRequest.Types.Filter Filter {
      get { return filter_; }
      set {
        filter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubscribeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubscribeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!topics_.Equals(other.topics_)) return false;
      if (!object.Equals(Filter, other.Filter)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= topics_.GetHashCode();
      if (filter_ != null) hash ^= Filter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      topics_.WriteTo(output, _repeated_topics_codec);
      if (filter_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Filter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += topics_.CalculateSize(_repeated_topics_codec);
      if (filter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Filter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubscribeRequest other) {
      if (other == null) {
        return;
      }
      topics_.Add(other.topics_);
      if (other.filter_ != null) {
        if (filter_ == null) {
          Filter = new global::IOSTSdk.Rpcpb.SubscribeRequest.Types.Filter();
        }
        Filter.MergeFrom(other.Filter);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            topics_.AddEntriesFrom(input, _repeated_topics_codec);
            break;
          }
          case 18: {
            if (filter_ == null) {
              Filter = new global::IOSTSdk.Rpcpb.SubscribeRequest.Types.Filter();
            }
            input.ReadMessage(Filter);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SubscribeRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Filter : pb::IMessage<Filter> {
        private static readonly pb::MessageParser<Filter> _parser = new pb::MessageParser<Filter>(() => new Filter());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Filter> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::IOSTSdk.Rpcpb.SubscribeRequest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Filter() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Filter(Filter other) : this() {
          contractId_ = other.contractId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Filter Clone() {
          return new Filter(this);
        }

        /// <summary>Field number for the "contract_id" field.</summary>
        public const int ContractIdFieldNumber = 1;
        private string contractId_ = "";
        /// <summary>
        /// contract id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ContractId {
          get { return contractId_; }
          set {
            contractId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Filter);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Filter other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ContractId != other.ContractId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ContractId.Length != 0) hash ^= ContractId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ContractId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(ContractId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ContractId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ContractId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Filter other) {
          if (other == null) {
            return;
          }
          if (other.ContractId.Length != 0) {
            ContractId = other.ContractId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                ContractId = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// The message defines subscribe response.
  /// </summary>
  public sealed partial class SubscribeResponse : pb::IMessage<SubscribeResponse> {
    private static readonly pb::MessageParser<SubscribeResponse> _parser = new pb::MessageParser<SubscribeResponse>(() => new SubscribeResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubscribeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeResponse(SubscribeResponse other) : this() {
      event_ = other.event_ != null ? other.event_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeResponse Clone() {
      return new SubscribeResponse(this);
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 1;
    private global::IOSTSdk.Rpcpb.Event event_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IOSTSdk.Rpcpb.Event Event {
      get { return event_; }
      set {
        event_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubscribeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubscribeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Event, other.Event)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (event_ != null) hash ^= Event.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (event_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Event);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (event_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Event);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubscribeResponse other) {
      if (other == null) {
        return;
      }
      if (other.event_ != null) {
        if (event_ == null) {
          Event = new global::IOSTSdk.Rpcpb.Event();
        }
        Event.MergeFrom(other.Event);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (event_ == null) {
              Event = new global::IOSTSdk.Rpcpb.Event();
            }
            input.ReadMessage(Event);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message defines the getVoterBonus response.
  /// </summary>
  public sealed partial class VoterBonus : pb::IMessage<VoterBonus> {
    private static readonly pb::MessageParser<VoterBonus> _parser = new pb::MessageParser<VoterBonus>(() => new VoterBonus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VoterBonus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoterBonus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoterBonus(VoterBonus other) : this() {
      bonus_ = other.bonus_;
      detail_ = other.detail_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoterBonus Clone() {
      return new VoterBonus(this);
    }

    /// <summary>Field number for the "bonus" field.</summary>
    public const int BonusFieldNumber = 1;
    private double bonus_;
    /// <summary>
    /// the totol voter bonus
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Bonus {
      get { return bonus_; }
      set {
        bonus_ = value;
      }
    }

    /// <summary>Field number for the "detail" field.</summary>
    public const int DetailFieldNumber = 2;
    private static readonly pbc::MapField<string, double>.Codec _map_detail_codec
        = new pbc::MapField<string, double>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForDouble(17), 18);
    private readonly pbc::MapField<string, double> detail_ = new pbc::MapField<string, double>();
    /// <summary>
    /// the voter bonus detail
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, double> Detail {
      get { return detail_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VoterBonus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VoterBonus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Bonus, other.Bonus)) return false;
      if (!Detail.Equals(other.Detail)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Bonus != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Bonus);
      hash ^= Detail.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Bonus != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Bonus);
      }
      detail_.WriteTo(output, _map_detail_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Bonus != 0D) {
        size += 1 + 8;
      }
      size += detail_.CalculateSize(_map_detail_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VoterBonus other) {
      if (other == null) {
        return;
      }
      if (other.Bonus != 0D) {
        Bonus = other.Bonus;
      }
      detail_.Add(other.detail_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Bonus = input.ReadDouble();
            break;
          }
          case 18: {
            detail_.AddEntriesFrom(input, _map_detail_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message defines the getCandidateBonus response.
  /// </summary>
  public sealed partial class CandidateBonus : pb::IMessage<CandidateBonus> {
    private static readonly pb::MessageParser<CandidateBonus> _parser = new pb::MessageParser<CandidateBonus>(() => new CandidateBonus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CandidateBonus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CandidateBonus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CandidateBonus(CandidateBonus other) : this() {
      bonus_ = other.bonus_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CandidateBonus Clone() {
      return new CandidateBonus(this);
    }

    /// <summary>Field number for the "bonus" field.</summary>
    public const int BonusFieldNumber = 1;
    private double bonus_;
    /// <summary>
    /// the candidate bonus
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Bonus {
      get { return bonus_; }
      set {
        bonus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CandidateBonus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CandidateBonus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Bonus, other.Bonus)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Bonus != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Bonus);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Bonus != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Bonus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Bonus != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CandidateBonus other) {
      if (other == null) {
        return;
      }
      if (other.Bonus != 0D) {
        Bonus = other.Bonus;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Bonus = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message defines the get tokeninfo request.
  /// </summary>
  public sealed partial class GetTokenInfoRequest : pb::IMessage<GetTokenInfoRequest> {
    private static readonly pb::MessageParser<GetTokenInfoRequest> _parser = new pb::MessageParser<GetTokenInfoRequest>(() => new GetTokenInfoRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTokenInfoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTokenInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTokenInfoRequest(GetTokenInfoRequest other) : this() {
      symbol_ = other.symbol_;
      byLongestChain_ = other.byLongestChain_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTokenInfoRequest Clone() {
      return new GetTokenInfoRequest(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    /// <summary>
    /// token symbol
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "by_longest_chain" field.</summary>
    public const int ByLongestChainFieldNumber = 2;
    private bool byLongestChain_;
    /// <summary>
    /// get tokeninfo by longest chain's head block or last irreversible block
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ByLongestChain {
      get { return byLongestChain_; }
      set {
        byLongestChain_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTokenInfoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTokenInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (ByLongestChain != other.ByLongestChain) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (ByLongestChain != false) hash ^= ByLongestChain.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (ByLongestChain != false) {
        output.WriteRawTag(16);
        output.WriteBool(ByLongestChain);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (ByLongestChain != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTokenInfoRequest other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.ByLongestChain != false) {
        ByLongestChain = other.ByLongestChain;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 16: {
            ByLongestChain = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message defines the token information.
  /// </summary>
  public sealed partial class TokenInfo : pb::IMessage<TokenInfo> {
    private static readonly pb::MessageParser<TokenInfo> _parser = new pb::MessageParser<TokenInfo>(() => new TokenInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TokenInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IOSTSdk.Rpcpb.RpcReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenInfo(TokenInfo other) : this() {
      symbol_ = other.symbol_;
      fullName_ = other.fullName_;
      issuer_ = other.issuer_;
      totalSupply_ = other.totalSupply_;
      currentSupply_ = other.currentSupply_;
      decimal_ = other.decimal_;
      canTransfer_ = other.canTransfer_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenInfo Clone() {
      return new TokenInfo(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    /// <summary>
    /// token symbol
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "full_name" field.</summary>
    public const int FullNameFieldNumber = 2;
    private string fullName_ = "";
    /// <summary>
    /// token full name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FullName {
      get { return fullName_; }
      set {
        fullName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "issuer" field.</summary>
    public const int IssuerFieldNumber = 3;
    private string issuer_ = "";
    /// <summary>
    /// token issuer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Issuer {
      get { return issuer_; }
      set {
        issuer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "total_supply" field.</summary>
    public const int TotalSupplyFieldNumber = 4;
    private long totalSupply_;
    /// <summary>
    /// the amount of total supply
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalSupply {
      get { return totalSupply_; }
      set {
        totalSupply_ = value;
      }
    }

    /// <summary>Field number for the "current_supply" field.</summary>
    public const int CurrentSupplyFieldNumber = 5;
    private long currentSupply_;
    /// <summary>
    /// the amount of current supply
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurrentSupply {
      get { return currentSupply_; }
      set {
        currentSupply_ = value;
      }
    }

    /// <summary>Field number for the "decimal" field.</summary>
    public const int DecimalFieldNumber = 6;
    private int decimal_;
    /// <summary>
    /// token decimal
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Decimal {
      get { return decimal_; }
      set {
        decimal_ = value;
      }
    }

    /// <summary>Field number for the "can_transfer" field.</summary>
    public const int CanTransferFieldNumber = 7;
    private bool canTransfer_;
    /// <summary>
    /// whether the token can be transfered
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanTransfer {
      get { return canTransfer_; }
      set {
        canTransfer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TokenInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TokenInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (FullName != other.FullName) return false;
      if (Issuer != other.Issuer) return false;
      if (TotalSupply != other.TotalSupply) return false;
      if (CurrentSupply != other.CurrentSupply) return false;
      if (Decimal != other.Decimal) return false;
      if (CanTransfer != other.CanTransfer) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (FullName.Length != 0) hash ^= FullName.GetHashCode();
      if (Issuer.Length != 0) hash ^= Issuer.GetHashCode();
      if (TotalSupply != 0L) hash ^= TotalSupply.GetHashCode();
      if (CurrentSupply != 0L) hash ^= CurrentSupply.GetHashCode();
      if (Decimal != 0) hash ^= Decimal.GetHashCode();
      if (CanTransfer != false) hash ^= CanTransfer.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (FullName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FullName);
      }
      if (Issuer.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Issuer);
      }
      if (TotalSupply != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(TotalSupply);
      }
      if (CurrentSupply != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(CurrentSupply);
      }
      if (Decimal != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Decimal);
      }
      if (CanTransfer != false) {
        output.WriteRawTag(56);
        output.WriteBool(CanTransfer);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (FullName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FullName);
      }
      if (Issuer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Issuer);
      }
      if (TotalSupply != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalSupply);
      }
      if (CurrentSupply != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrentSupply);
      }
      if (Decimal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Decimal);
      }
      if (CanTransfer != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TokenInfo other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.FullName.Length != 0) {
        FullName = other.FullName;
      }
      if (other.Issuer.Length != 0) {
        Issuer = other.Issuer;
      }
      if (other.TotalSupply != 0L) {
        TotalSupply = other.TotalSupply;
      }
      if (other.CurrentSupply != 0L) {
        CurrentSupply = other.CurrentSupply;
      }
      if (other.Decimal != 0) {
        Decimal = other.Decimal;
      }
      if (other.CanTransfer != false) {
        CanTransfer = other.CanTransfer;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            FullName = input.ReadString();
            break;
          }
          case 26: {
            Issuer = input.ReadString();
            break;
          }
          case 32: {
            TotalSupply = input.ReadInt64();
            break;
          }
          case 40: {
            CurrentSupply = input.ReadInt64();
            break;
          }
          case 48: {
            Decimal = input.ReadInt32();
            break;
          }
          case 56: {
            CanTransfer = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
